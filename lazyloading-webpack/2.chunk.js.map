{"version":3,"sources":["webpack:///2.chunk.js","webpack:///./$_gendir/app/search/search.module.ngfactory.ts","webpack:///./~/@angular/http/@angular/http.es5.js","webpack:///./app/search/search.ts","webpack:///./$_gendir/app/search/search.ngfactory.ts","webpack:///./app/search/search.module.ts"],"names":["webpackJsonp","269","module","__webpack_exports__","__webpack_require__","Object","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_1__app_search_search_module__","__WEBPACK_IMPORTED_MODULE_2__angular_common__","__WEBPACK_IMPORTED_MODULE_3__angular_http__","__WEBPACK_IMPORTED_MODULE_4__angular_router__","__WEBPACK_IMPORTED_MODULE_5__search_ngfactory__","__WEBPACK_IMPORTED_MODULE_6__app_search_search__","d","SearchModuleNgFactory","__extends","this","extendStatics","setPrototypeOf","__proto__","Array","b","p","hasOwnProperty","__","constructor","prototype","create","SearchModuleInjector","_super","parent","call","get","__NgLocalization_5","enumerable","configurable","__BrowserXhr_6","__ResponseOptions_7","__XSRFStrategy_8","__XHRBackend_9","_BrowserXhr_6","_ResponseOptions_7","_XSRFStrategy_8","__RequestOptions_10","__Http_11","_XHRBackend_9","_RequestOptions_10","__ɵg_12","__JSONPBackend_13","_ɵg_12","__Jsonp_14","_JSONPBackend_13","createInternal","_CommonModule_0","_HttpModule_1","_JsonpModule_2","_RouterModule_3","_SearchModule_4","_ROUTES_15","path","component","getInternal","token","notFoundResult","_NgLocalization_5","_Http_11","_Jsonp_14","destroyInternal","273","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","Error","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","length","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","Map","split","forEach","param","eqIdx","indexOf","_a","slice","key","val","list","push","set","standardEncoding","v","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","httpRequest","backend","request","createConnection","response","mergeOptions","defaultOpts","providedOpts","url","newOptions","merge","RequestOptions","search","params","headers","body","withCredentials","responseType","_createDefaultCookieXSRFStrategy","CookieXSRFStrategy","httpFactory","xhrBackend","requestOptions","Http","jsonpFactory","jsonpBackend","Jsonp","__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__","__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__","n","BrowserXhr","JSONPBackend","XHRBackend","BaseRequestOptions","BaseResponseOptions","ResponseOptions","Headers","HttpModule","JsonpModule","XSRFStrategy","URLSearchParams","BrowserJsonp","JSONPBackend_","build","XMLHttpRequest","decorators","type","ctorParameters","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","_this","_headers","_normalizedNames","values","name","append","keys","isArray","delete","fromResponseHeaderString","headersString","line","index","trim","getAll","lcName","toLowerCase","fn","has","from","join","mayBeSetNormalizedName","toJSON","serialized","apply","entries","_b","status","statusText","options","ConnectionBackend","Connection","configureRequest","req","isSuccess","QueryEncoder","encodeKey","k","encodeValue","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","Body","json","_body","parse","text","String","fromCharCode","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","finished","data","JSONPConnection_","_dom","baseResponseOptions","_finished","TypeError","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","responseOptions_1","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","arguments","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","responseText","err","setDetectedContentType","setRequestHeader","getBody","abort","contentType","_cookieName","_headerName","xsrfToken","getCookie","_browserXHR","_xsrfStrategy","_mergeSearchParams","_parseParams","objParams","item","_appendParam","Request","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","noop","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","args","providers","provide","useFactory","deps","useClass","275","__WEBPACK_IMPORTED_MODULE_0__angular_http__","__WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map__","Search","http","pages","Content-Type","subscribe","raw","title","281","View_Search_1","l","ck","context","$implicit","View_Search_0","en","$event","ad","co","ngForOf","View_Search_Host_0","RenderType_Search","__WEBPACK_IMPORTED_MODULE_1__app_search_search__","SearchNgFactory","styles_Search","encapsulation","styles","285","__WEBPACK_IMPORTED_MODULE_0__search__","SearchModule"],"mappings":"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","file":"2.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 269:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_search_search_module__ = __webpack_require__(285);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_http__ = __webpack_require__(273);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__angular_router__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__search_ngfactory__ = __webpack_require__(281);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__app_search_search__ = __webpack_require__(275);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SearchModuleNgFactory\", function() { return SearchModuleNgFactory; });\n/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n/* tslint:disable */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n\n\n\n\n\n\n\nvar SearchModuleInjector = (function (_super) {\n    __extends(SearchModuleInjector, _super);\n    function SearchModuleInjector(parent) {\n        return _super.call(this, parent, [__WEBPACK_IMPORTED_MODULE_5__search_ngfactory__[\"a\" /* SearchNgFactory */]], []) || this;\n    }\n    Object.defineProperty(SearchModuleInjector.prototype, \"_NgLocalization_5\", {\n        get: function () {\n            if ((this.__NgLocalization_5 == null)) {\n                (this.__NgLocalization_5 = new __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"a\" /* NgLocaleLocalization */](this.parent.get(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"c\" /* LOCALE_ID */])));\n            }\n            return this.__NgLocalization_5;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_BrowserXhr_6\", {\n        get: function () {\n            if ((this.__BrowserXhr_6 == null)) {\n                (this.__BrowserXhr_6 = new __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"a\" /* BrowserXhr */]());\n            }\n            return this.__BrowserXhr_6;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_ResponseOptions_7\", {\n        get: function () {\n            if ((this.__ResponseOptions_7 == null)) {\n                (this.__ResponseOptions_7 = new __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"b\" /* BaseResponseOptions */]());\n            }\n            return this.__ResponseOptions_7;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_XSRFStrategy_8\", {\n        get: function () {\n            if ((this.__XSRFStrategy_8 == null)) {\n                (this.__XSRFStrategy_8 = __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"c\" /* ɵb */]());\n            }\n            return this.__XSRFStrategy_8;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_XHRBackend_9\", {\n        get: function () {\n            if ((this.__XHRBackend_9 == null)) {\n                (this.__XHRBackend_9 = new __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"d\" /* XHRBackend */](this._BrowserXhr_6, this._ResponseOptions_7, this._XSRFStrategy_8));\n            }\n            return this.__XHRBackend_9;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_RequestOptions_10\", {\n        get: function () {\n            if ((this.__RequestOptions_10 == null)) {\n                (this.__RequestOptions_10 = new __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"e\" /* BaseRequestOptions */]());\n            }\n            return this.__RequestOptions_10;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_Http_11\", {\n        get: function () {\n            if ((this.__Http_11 == null)) {\n                (this.__Http_11 = __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"f\" /* ɵc */](this._XHRBackend_9, this._RequestOptions_10));\n            }\n            return this.__Http_11;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_\\u0275g_12\", {\n        get: function () {\n            if ((this.__ɵg_12 == null)) {\n                (this.__ɵg_12 = new __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"g\" /* ɵg */]());\n            }\n            return this.__ɵg_12;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_JSONPBackend_13\", {\n        get: function () {\n            if ((this.__JSONPBackend_13 == null)) {\n                (this.__JSONPBackend_13 = new __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"h\" /* ɵa */](this._ɵg_12, this._ResponseOptions_7));\n            }\n            return this.__JSONPBackend_13;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SearchModuleInjector.prototype, \"_Jsonp_14\", {\n        get: function () {\n            if ((this.__Jsonp_14 == null)) {\n                (this.__Jsonp_14 = __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"i\" /* ɵd */](this._JSONPBackend_13, this._RequestOptions_10));\n            }\n            return this.__Jsonp_14;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    SearchModuleInjector.prototype.createInternal = function () {\n        this._CommonModule_0 = new __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"b\" /* CommonModule */]();\n        this._HttpModule_1 = new __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"j\" /* HttpModule */]();\n        this._JsonpModule_2 = new __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"k\" /* JsonpModule */]();\n        this._RouterModule_3 = new __WEBPACK_IMPORTED_MODULE_4__angular_router__[\"q\" /* RouterModule */](this.parent.get(__WEBPACK_IMPORTED_MODULE_4__angular_router__[\"r\" /* ɵa */], null), this.parent.get(__WEBPACK_IMPORTED_MODULE_4__angular_router__[\"j\" /* Router */], null));\n        this._SearchModule_4 = new __WEBPACK_IMPORTED_MODULE_1__app_search_search_module__[\"a\" /* SearchModule */]();\n        this._ROUTES_15 = [[{\n                    path: '',\n                    component: __WEBPACK_IMPORTED_MODULE_6__app_search_search__[\"a\" /* Search */]\n                }\n            ]];\n        return this._SearchModule_4;\n    };\n    SearchModuleInjector.prototype.getInternal = function (token, notFoundResult) {\n        if ((token === __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"b\" /* CommonModule */])) {\n            return this._CommonModule_0;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"j\" /* HttpModule */])) {\n            return this._HttpModule_1;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"k\" /* JsonpModule */])) {\n            return this._JsonpModule_2;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_4__angular_router__[\"q\" /* RouterModule */])) {\n            return this._RouterModule_3;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_1__app_search_search_module__[\"a\" /* SearchModule */])) {\n            return this._SearchModule_4;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"g\" /* NgLocalization */])) {\n            return this._NgLocalization_5;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"a\" /* BrowserXhr */])) {\n            return this._BrowserXhr_6;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"l\" /* ResponseOptions */])) {\n            return this._ResponseOptions_7;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"m\" /* XSRFStrategy */])) {\n            return this._XSRFStrategy_8;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"d\" /* XHRBackend */])) {\n            return this._XHRBackend_9;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"n\" /* RequestOptions */])) {\n            return this._RequestOptions_10;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"o\" /* Http */])) {\n            return this._Http_11;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"g\" /* ɵg */])) {\n            return this._ɵg_12;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"p\" /* JSONPBackend */])) {\n            return this._JSONPBackend_13;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_3__angular_http__[\"q\" /* Jsonp */])) {\n            return this._Jsonp_14;\n        }\n        if ((token === __WEBPACK_IMPORTED_MODULE_4__angular_router__[\"u\" /* ROUTES */])) {\n            return this._ROUTES_15;\n        }\n        return notFoundResult;\n    };\n    SearchModuleInjector.prototype.destroyInternal = function () {\n    };\n    return SearchModuleInjector;\n}(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"B\" /* ɵNgModuleInjector */]));\nvar SearchModuleNgFactory = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"C\" /* NgModuleFactory */](SearchModuleInjector, __WEBPACK_IMPORTED_MODULE_1__app_search_search_module__[\"a\" /* SearchModule */]);\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubW9kdWxlLm5nZmFjdG9yeS50cyIsInZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5nOi8vL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIiAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==\n//# sourceMappingURL=search.module.ngfactory.js.map\n\n/***/ }),\n\n/***/ 273:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__ = __webpack_require__(6);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BrowserXhr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return JSONPBackend; });\n/* unused harmony export JSONPConnection */\n/* unused harmony export CookieXSRFStrategy */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return XHRBackend; });\n/* unused harmony export XHRConnection */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return BaseRequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return RequestOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return BaseResponseOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return ResponseOptions; });\n/* unused harmony export ReadyState */\n/* unused harmony export RequestMethod */\n/* unused harmony export ResponseContentType */\n/* unused harmony export ResponseType */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return Headers; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return Http; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return Jsonp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return HttpModule; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return JsonpModule; });\n/* unused harmony export Connection */\n/* unused harmony export ConnectionBackend */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return XSRFStrategy; });\n/* unused harmony export Request */\n/* unused harmony export Response */\n/* unused harmony export QueryEncoder */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return URLSearchParams; });\n/* unused harmony export VERSION */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return BrowserJsonp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return JSONPBackend_; });\n/* unused harmony export ɵf */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return _createDefaultCookieXSRFStrategy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return httpFactory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return jsonpFactory; });\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @license Angular v4.1.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * \\@experimental\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n    return BrowserXhr;\n}());\nBrowserXhr.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"D\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nBrowserXhr.ctorParameters = function () { return []; };\nvar RequestMethod = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\nvar ReadyState = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\nvar ResponseType = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\nvar ContentType = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\nvar ResponseContentType = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * \\@experimental\n */\nvar Headers = (function () {\n    /**\n     * @param {?=} headers\n     */\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n    /**\n     * @return {?}\n     */\n    Headers.prototype.toJSON = function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * \\@experimental\n */\nvar ResponseOptions = (function () {\n    /**\n     * @param {?=} __0\n     */\n    function ResponseOptions(_a) {\n        var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * \\@experimental\n */\nvar BaseResponseOptions = (function (_super) {\n    __extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    return BaseResponseOptions;\n}(ResponseOptions));\nBaseResponseOptions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"D\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nBaseResponseOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * \\@experimental\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    /**\n     * @abstract\n     * @param {?} request\n     * @return {?}\n     */\n    ConnectionBackend.prototype.createConnection = function (request) { };\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * \\@experimental\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * \\@experimental\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    XSRFStrategy.prototype.configureRequest = function (req) { };\n    return XSRFStrategy;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * \\@experimental\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nvar URLSearchParams = (function () {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     * @return {?}\n     */\n    Body.prototype.text = function () {\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = function () {\n        if (this._body instanceof ArrayBuffer) {\n            return (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = function () {\n        if (this._body instanceof Blob) {\n            return (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * \\@experimental\n */\nvar Response = (function (_super) {\n    __extends(Response, _super);\n    /**\n     * @param {?} responseOptions\n     */\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = responseOptions.status;\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = responseOptions.type;\n        _this.url = responseOptions.url;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    return BrowserJsonp;\n}());\nBrowserJsonp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"D\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nBrowserJsonp.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPConnection = (function () {\n    function JSONPConnection() {\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @abstract\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = function (data) { };\n    return JSONPConnection;\n}());\nvar JSONPConnection_ = (function (_super) {\n    __extends(JSONPConnection_, _super);\n    /**\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    function JSONPConnection_(req, _dom, baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._dom = _dom;\n        _this.baseResponseOptions = baseResponseOptions;\n        _this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        _this.request = req;\n        _this.response = new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var callback = _dom.requestCallback(_this._id);\n            var url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var script = _this._script = _dom.build(url);\n            var onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n        return _this;\n    }\n    /**\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection_.prototype.finished = function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection_;\n}(JSONPConnection));\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPBackend = (function (_super) {\n    __extends(JSONPBackend, _super);\n    function JSONPBackend() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return JSONPBackend;\n}(ConnectionBackend));\nvar JSONPBackend_ = (function (_super) {\n    __extends(JSONPBackend_, _super);\n    /**\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend_.prototype.createConnection = function (request) {\n        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    return JSONPBackend_;\n}(JSONPBackend));\nJSONPBackend_.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"D\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nJSONPBackend_.ctorParameters = function () { return [\n    { type: BrowserJsonp, },\n    { type: ResponseOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * \\@experimental\n */\nvar XHRConnection = (function () {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_1_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var url = getResponseURL(_xhr) || req.url;\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * \\@experimental\n */\nvar CookieXSRFStrategy = (function () {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var /** @type {?} */ xsrfToken = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__angular_platform_browser__[\"u\" /* ɵgetDOM */])().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nvar XHRBackend = (function () {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    return XHRBackend;\n}());\nXHRBackend.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"D\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nXHRBackend.ctorParameters = function () { return [\n    { type: BrowserXhr, },\n    { type: ResponseOptions, },\n    { type: XSRFStrategy, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar RequestOptions = (function () {\n    /**\n     * @param {?=} __0\n     */\n    function RequestOptions(_a) {\n        var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, params = _b.params, withCredentials = _b.withCredentials, responseType = _b.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        get: function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        set: function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar BaseRequestOptions = (function (_super) {\n    __extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    return BaseRequestOptions;\n}(RequestOptions));\nBaseRequestOptions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"D\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nBaseRequestOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * \\@experimental\n */\nvar Request = (function (_super) {\n    __extends(Request, _super);\n    /**\n     * @param {?} requestOptions\n     */\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        _this.url = requestOptions.url;\n        if (requestOptions.params) {\n            var params = requestOptions.params.toString();\n            if (params.length > 0) {\n                var prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(requestOptions.method);\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = requestOptions.withCredentials;\n        _this.responseType = requestOptions.responseType;\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * \\@experimental\n */\nvar Http = (function () {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    return Http;\n}());\nHttp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"D\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nHttp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * \\@experimental\n */\nvar Jsonp = (function (_super) {\n    __extends(Jsonp, _super);\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    return Jsonp;\n}(Http));\nJsonp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"D\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nJsonp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * \\@experimental\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    return HttpModule;\n}());\nHttpModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"E\" /* NgModule */], args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nHttpModule.ctorParameters = function () { return []; };\n/**\n * The module that includes jsonp's providers\n *\n * \\@experimental\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    return JsonpModule;\n}());\nJsonpModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"E\" /* NgModule */], args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    { provide: JSONPBackend, useClass: JSONPBackend_ },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nJsonpModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"F\" /* Version */]('4.1.0');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=http.es5.js.map\n\n\n/***/ }),\n\n/***/ 275:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_http__ = __webpack_require__(273);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map__ = __webpack_require__(135);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return Search; });\n\n\nvar Search = (function () {\n    function Search(http) {\n        this.http = http;\n        this.pages = [];\n    }\n    Search.prototype.search = function (text) {\n        var _this = this;\n        if (text && text.length > 0) {\n            var wikiUrl = 'https://en.wikipedia.org/w/api.php';\n            var headers = new __WEBPACK_IMPORTED_MODULE_0__angular_http__[\"r\" /* Headers */]({\n                'Content-Type': 'application/json'\n            });\n            var params = new __WEBPACK_IMPORTED_MODULE_0__angular_http__[\"s\" /* URLSearchParams */]();\n            params.set('gapfrom', text);\n            params.set('gaplimit', '10');\n            params.set('generator', 'allpages');\n            params.set('action', 'query');\n            params.set('format', 'json');\n            params.set('origin', '*');\n            var options = new __WEBPACK_IMPORTED_MODULE_0__angular_http__[\"n\" /* RequestOptions */]({\n                headers: headers,\n                search: params\n            });\n            __WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map__[\"map\"].call(this.http.get(wikiUrl, options), function (response) { return response.json(); })\n                .subscribe(function (data) {\n                _this.pages = [];\n                var raw = data['query']['pages'];\n                for (var key in raw) {\n                    _this.pages.push(raw[key].title);\n                }\n            });\n        }\n    };\n    Search.ctorParameters = function () { return [{ type: __WEBPACK_IMPORTED_MODULE_0__angular_http__[\"o\" /* Http */] }]; };\n    return Search;\n}());\n\n//# sourceMappingURL=search.js.map\n\n/***/ }),\n\n/***/ 281:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__app_search_search__ = __webpack_require__(275);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_http__ = __webpack_require__(273);\n/* unused harmony export RenderType_Search */\n/* unused harmony export View_Search_0 */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SearchNgFactory; });\n/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n/* tslint:disable */\n\n\n\n\nvar styles_Search = [];\nvar RenderType_Search = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_13\" /* ɵcrt */]({\n    encapsulation: 2,\n    styles: styles_Search,\n    data: {}\n});\nfunction View_Search_1(l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵvid */](0, [\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, null, null, 1, 'div', [], null, null, null, null, null)),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, [\n            '',\n            ''\n        ]))\n    ], null, function (ck, v) {\n        var currVal_0 = v.context.$implicit;\n        ck(v, 1, 0, currVal_0);\n    });\n}\nfunction View_Search_0(l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵvid */](0, [\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['\\n    '])),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, null, null, 12, 'div', [], null, null, null, null, null)),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['\\n      '])),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, null, null, 1, 'h2', [], null, null, null, null, null)),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['Search'])),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['\\n      '])),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, [[\n                'foo',\n                1\n            ]\n        ], null, 0, 'input', [\n            [\n                'placeholder',\n                'Search on Wikipedia'\n            ],\n            [\n                'type',\n                'text'\n            ]\n        ], null, null, null, null, null)),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['\\n      '])),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, null, null, 1, 'button', [], null, [[\n                null,\n                'click'\n            ]\n        ], function (v, en, $event) {\n            var ad = true;\n            var co = v.component;\n            if (('click' === en)) {\n                var pd_0 = (co.search(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_17\" /* ɵnov */](v, 6).value) !== false);\n                ad = (pd_0 && ad);\n            }\n            return ad;\n        }, null, null)),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['Search'])),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['\\n      '])),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_18\" /* ɵand */](8388608, null, null, 1, null, View_Search_1)),\n        __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_19\" /* ɵdid */](401408, null, 0, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"i\" /* NgForOf */], [\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_4\" /* ViewContainerRef */],\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_5\" /* TemplateRef */],\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"w\" /* IterableDiffers */]\n        ], { ngForOf: [\n                0,\n                'ngForOf'\n            ]\n        }, null),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['\\n    '])),\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵted */](null, ['\\n  ']))\n    ], function (ck, v) {\n        var co = v.component;\n        var currVal_0 = co.pages;\n        ck(v, 12, 0, currVal_0);\n    }, null);\n}\nfunction View_Search_Host_0(l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵvid */](0, [\n        (l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵeld */](0, null, null, 1, 'search', [], null, null, null, View_Search_0, RenderType_Search)),\n        __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_19\" /* ɵdid */](24576, null, 0, __WEBPACK_IMPORTED_MODULE_1__app_search_search__[\"a\" /* Search */], [__WEBPACK_IMPORTED_MODULE_3__angular_http__[\"o\" /* Http */]], null, null)\n    ], null, null);\n}\nvar SearchNgFactory = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_20\" /* ɵccf */]('search', __WEBPACK_IMPORTED_MODULE_1__app_search_search__[\"a\" /* Search */], View_Search_Host_0, {}, {}, []);\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubmdmYWN0b3J5LnRzIiwidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmc6Ly8vVXNlcnMvbWxhdmFsL2Rldi9naXRodWIvcGxheWdyb3VuZC9vcHRpbWl6ZS1hbmd1bGFyLWFwcC9hcHAvc2VhcmNoL3NlYXJjaC50cyIsIm5nOi8vL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gudHMuU2VhcmNoLmh0bWwiLCJuZzovLy9Vc2Vycy9tbGF2YWwvZGV2L2dpdGh1Yi9wbGF5Z3JvdW5kL29wdGltaXplLWFuZ3VsYXItYXBwL2FwcC9zZWFyY2gvc2VhcmNoLnRzLlNlYXJjaF9Ib3N0Lmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIlxuICAgIDxkaXY+XG4gICAgICA8aDI+U2VhcmNoPC9oMj5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIG9uIFdpa2lwZWRpYVwiICNmb28+XG4gICAgICA8YnV0dG9uIChjbGljayk9XCJzZWFyY2goZm9vLnZhbHVlKVwiPlNlYXJjaDwvYnV0dG9uPlxuICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgcGFnZSBvZiBwYWdlc1wiPnt7cGFnZX19PC9kaXY+XG4gICAgPC9kaXY+XG4gICIsIjxzZWFyY2g+PC9zZWFyY2g+Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lDS007SUFBZ0M7TUFBQTtNQUFBO0lBQUE7SUFBQTs7O0lBQUE7SUFBQTs7Ozs7SUFMdEM7SUFDSTtJQUFLO0lBQ0g7SUFBSTtJQUFXO01BQ2Y7UUFBQTtRQUFBO01BQUE7SUFBQTtNQUFBO1FBQUE7UUFBQTtNQUFBOztNQUFBO1FBQUE7UUFBQTtNQUFBOztJQUFBO0tBQUE7SUFBMEQ7TUFDMUQ7UUFBQTtRQUFBO01BQUE7SUFBQTtNQUFBO01BQUE7TUFBUTtRQUFBO1FBQUE7TUFBQTtNQUFSO0lBQUE7SUFBb0M7SUFBZTtJQUNuRDtnQkFBQTs7OztJQUFBO09BQUE7UUFBQTtRQUFBO01BQUE7SUFBQTtJQUE4QztJQUMxQzs7OztJQURDO0lBQUwsVUFBSyxTQUFMOzs7OztJQ0xOO2dCQUFBOzs7OyJ9\n//# sourceMappingURL=search.ngfactory.js.map\n\n/***/ }),\n\n/***/ 285:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__search__ = __webpack_require__(275);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return SearchModule; });\n\nvar routes = [\n    { path: '', component: __WEBPACK_IMPORTED_MODULE_0__search__[\"a\" /* Search */] },\n];\nvar SearchModule = (function () {\n    function SearchModule() {\n    }\n    return SearchModule;\n}());\n\n//# sourceMappingURL=search.module.js.map\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 2.chunk.js","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nimport * as import0 from '@angular/core';\nimport * as import1 from '../../../app/search/search.module';\nimport * as import2 from '@angular/common';\nimport * as import3 from '@angular/http';\nimport * as import4 from '@angular/router';\nimport * as import5 from './search.ngfactory';\nimport * as import6 from '../../../app/search/search';\nclass SearchModuleInjector extends import0.ɵNgModuleInjector<import1.SearchModule> {\n  _CommonModule_0:import2.CommonModule;\n  _HttpModule_1:import3.HttpModule;\n  _JsonpModule_2:import3.JsonpModule;\n  _RouterModule_3:import4.RouterModule;\n  _SearchModule_4:import1.SearchModule;\n  __NgLocalization_5:import2.NgLocaleLocalization;\n  __BrowserXhr_6:import3.BrowserXhr;\n  __ResponseOptions_7:import3.BaseResponseOptions;\n  __XSRFStrategy_8:any;\n  __XHRBackend_9:import3.XHRBackend;\n  __RequestOptions_10:import3.BaseRequestOptions;\n  __Http_11:any;\n  __ɵg_12:import3.ɵg;\n  __JSONPBackend_13:import3.ɵa;\n  __Jsonp_14:any;\n  _ROUTES_15:any[];\n  constructor(parent:import0.Injector) {\n    super(parent,[import5.SearchNgFactory],([] as any[]));\n  }\n  get _NgLocalization_5():import2.NgLocaleLocalization {\n    if ((this.__NgLocalization_5 == null)) { (this.__NgLocalization_5 = new import2.NgLocaleLocalization(this.parent.get(import0.LOCALE_ID))); }\n    return this.__NgLocalization_5;\n  }\n  get _BrowserXhr_6():import3.BrowserXhr {\n    if ((this.__BrowserXhr_6 == null)) { (this.__BrowserXhr_6 = new import3.BrowserXhr()); }\n    return this.__BrowserXhr_6;\n  }\n  get _ResponseOptions_7():import3.BaseResponseOptions {\n    if ((this.__ResponseOptions_7 == null)) { (this.__ResponseOptions_7 = new import3.BaseResponseOptions()); }\n    return this.__ResponseOptions_7;\n  }\n  get _XSRFStrategy_8():any {\n    if ((this.__XSRFStrategy_8 == null)) { (this.__XSRFStrategy_8 = import3.ɵb()); }\n    return this.__XSRFStrategy_8;\n  }\n  get _XHRBackend_9():import3.XHRBackend {\n    if ((this.__XHRBackend_9 == null)) { (this.__XHRBackend_9 = new import3.XHRBackend(this._BrowserXhr_6,this._ResponseOptions_7,this._XSRFStrategy_8)); }\n    return this.__XHRBackend_9;\n  }\n  get _RequestOptions_10():import3.BaseRequestOptions {\n    if ((this.__RequestOptions_10 == null)) { (this.__RequestOptions_10 = new import3.BaseRequestOptions()); }\n    return this.__RequestOptions_10;\n  }\n  get _Http_11():any {\n    if ((this.__Http_11 == null)) { (this.__Http_11 = import3.ɵc(this._XHRBackend_9,this._RequestOptions_10)); }\n    return this.__Http_11;\n  }\n  get _ɵg_12():import3.ɵg {\n    if ((this.__ɵg_12 == null)) { (this.__ɵg_12 = new import3.ɵg()); }\n    return this.__ɵg_12;\n  }\n  get _JSONPBackend_13():import3.ɵa {\n    if ((this.__JSONPBackend_13 == null)) { (this.__JSONPBackend_13 = new import3.ɵa(this._ɵg_12,this._ResponseOptions_7)); }\n    return this.__JSONPBackend_13;\n  }\n  get _Jsonp_14():any {\n    if ((this.__Jsonp_14 == null)) { (this.__Jsonp_14 = import3.ɵd(this._JSONPBackend_13,this._RequestOptions_10)); }\n    return this.__Jsonp_14;\n  }\n  createInternal():import1.SearchModule {\n    this._CommonModule_0 = new import2.CommonModule();\n    this._HttpModule_1 = new import3.HttpModule();\n    this._JsonpModule_2 = new import3.JsonpModule();\n    this._RouterModule_3 = new import4.RouterModule(this.parent.get(import4.ɵa,(null as any)),this.parent.get(import4.Router,(null as any)));\n    this._SearchModule_4 = new import1.SearchModule();\n        this._ROUTES_15 = [[{\n          path: '',\n          component: import6.Search\n        }\n    ]];\n    return this._SearchModule_4;\n  }\n  getInternal(token:any,notFoundResult:any):any {\n    if ((token === import2.CommonModule)) { return this._CommonModule_0; }\n    if ((token === import3.HttpModule)) { return this._HttpModule_1; }\n    if ((token === import3.JsonpModule)) { return this._JsonpModule_2; }\n    if ((token === import4.RouterModule)) { return this._RouterModule_3; }\n    if ((token === import1.SearchModule)) { return this._SearchModule_4; }\n    if ((token === import2.NgLocalization)) { return this._NgLocalization_5; }\n    if ((token === import3.BrowserXhr)) { return this._BrowserXhr_6; }\n    if ((token === import3.ResponseOptions)) { return this._ResponseOptions_7; }\n    if ((token === import3.XSRFStrategy)) { return this._XSRFStrategy_8; }\n    if ((token === import3.XHRBackend)) { return this._XHRBackend_9; }\n    if ((token === import3.RequestOptions)) { return this._RequestOptions_10; }\n    if ((token === import3.Http)) { return this._Http_11; }\n    if ((token === import3.ɵg)) { return this._ɵg_12; }\n    if ((token === import3.JSONPBackend)) { return this._JSONPBackend_13; }\n    if ((token === import3.Jsonp)) { return this._Jsonp_14; }\n    if ((token === import4.ROUTES)) { return this._ROUTES_15; }\n    return notFoundResult;\n  }\n  destroyInternal():void {\n  }\n}\nexport const SearchModuleNgFactory:import0.NgModuleFactory<import1.SearchModule> = new import0.NgModuleFactory<any>(SearchModuleInjector,import1.SearchModule);\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubW9kdWxlLm5nZmFjdG9yeS50cyIsInZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5nOi8vL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIiAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==\n\n\n\n// WEBPACK FOOTER //\n// ./$$_gendir/app/search/search.module.ngfactory.ts","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * @license Angular v4.1.0\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * \\@experimental\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n    return BrowserXhr;\n}());\nBrowserXhr.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBrowserXhr.ctorParameters = function () { return []; };\nvar RequestMethod = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\nvar ReadyState = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\nvar ResponseType = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\nvar ContentType = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\nvar ResponseContentType = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * \\@experimental\n */\nvar Headers = (function () {\n    /**\n     * @param {?=} headers\n     */\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n    /**\n     * @return {?}\n     */\n    Headers.prototype.toJSON = function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * \\@experimental\n */\nvar ResponseOptions = (function () {\n    /**\n     * @param {?=} __0\n     */\n    function ResponseOptions(_a) {\n        var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * \\@experimental\n */\nvar BaseResponseOptions = (function (_super) {\n    __extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    return BaseResponseOptions;\n}(ResponseOptions));\nBaseResponseOptions.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBaseResponseOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * \\@experimental\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    /**\n     * @abstract\n     * @param {?} request\n     * @return {?}\n     */\n    ConnectionBackend.prototype.createConnection = function (request) { };\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * \\@experimental\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * \\@experimental\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    XSRFStrategy.prototype.configureRequest = function (req) { };\n    return XSRFStrategy;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * \\@experimental\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nvar URLSearchParams = (function () {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     * @return {?}\n     */\n    Body.prototype.text = function () {\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = function () {\n        if (this._body instanceof ArrayBuffer) {\n            return (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = function () {\n        if (this._body instanceof Blob) {\n            return (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * \\@experimental\n */\nvar Response = (function (_super) {\n    __extends(Response, _super);\n    /**\n     * @param {?} responseOptions\n     */\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = responseOptions.status;\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = responseOptions.type;\n        _this.url = responseOptions.url;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    return BrowserJsonp;\n}());\nBrowserJsonp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBrowserJsonp.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPConnection = (function () {\n    function JSONPConnection() {\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @abstract\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = function (data) { };\n    return JSONPConnection;\n}());\nvar JSONPConnection_ = (function (_super) {\n    __extends(JSONPConnection_, _super);\n    /**\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    function JSONPConnection_(req, _dom, baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._dom = _dom;\n        _this.baseResponseOptions = baseResponseOptions;\n        _this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        _this.request = req;\n        _this.response = new Observable(function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var callback = _dom.requestCallback(_this._id);\n            var url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var script = _this._script = _dom.build(url);\n            var onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n        return _this;\n    }\n    /**\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection_.prototype.finished = function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection_;\n}(JSONPConnection));\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPBackend = (function (_super) {\n    __extends(JSONPBackend, _super);\n    function JSONPBackend() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return JSONPBackend;\n}(ConnectionBackend));\nvar JSONPBackend_ = (function (_super) {\n    __extends(JSONPBackend_, _super);\n    /**\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend_.prototype.createConnection = function (request) {\n        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    return JSONPBackend_;\n}(JSONPBackend));\nJSONPBackend_.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nJSONPBackend_.ctorParameters = function () { return [\n    { type: BrowserJsonp, },\n    { type: ResponseOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * \\@experimental\n */\nvar XHRConnection = (function () {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new Observable(function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var url = getResponseURL(_xhr) || req.url;\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * \\@experimental\n */\nvar CookieXSRFStrategy = (function () {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var /** @type {?} */ xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nvar XHRBackend = (function () {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    return XHRBackend;\n}());\nXHRBackend.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nXHRBackend.ctorParameters = function () { return [\n    { type: BrowserXhr, },\n    { type: ResponseOptions, },\n    { type: XSRFStrategy, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar RequestOptions = (function () {\n    /**\n     * @param {?=} __0\n     */\n    function RequestOptions(_a) {\n        var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, params = _b.params, withCredentials = _b.withCredentials, responseType = _b.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        get: function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        set: function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar BaseRequestOptions = (function (_super) {\n    __extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    return BaseRequestOptions;\n}(RequestOptions));\nBaseRequestOptions.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBaseRequestOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * \\@experimental\n */\nvar Request = (function (_super) {\n    __extends(Request, _super);\n    /**\n     * @param {?} requestOptions\n     */\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        _this.url = requestOptions.url;\n        if (requestOptions.params) {\n            var params = requestOptions.params.toString();\n            if (params.length > 0) {\n                var prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(requestOptions.method);\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = requestOptions.withCredentials;\n        _this.responseType = requestOptions.responseType;\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * \\@experimental\n */\nvar Http = (function () {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    return Http;\n}());\nHttp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nHttp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * \\@experimental\n */\nvar Jsonp = (function (_super) {\n    __extends(Jsonp, _super);\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    return Jsonp;\n}(Http));\nJsonp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nJsonp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * \\@experimental\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    return HttpModule;\n}());\nHttpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nHttpModule.ctorParameters = function () { return []; };\n/**\n * The module that includes jsonp's providers\n *\n * \\@experimental\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    return JsonpModule;\n}());\nJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    { provide: JSONPBackend, useClass: JSONPBackend_ },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nJsonpModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new Version('4.1.0');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\nexport { BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION, BrowserJsonp as ɵg, JSONPBackend_ as ɵa, Body as ɵf, _createDefaultCookieXSRFStrategy as ɵb, httpFactory as ɵc, jsonpFactory as ɵd };\n//# sourceMappingURL=http.es5.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/@angular/http/@angular/http.es5.js\n// module id = 273\n// module chunks = 2","import {Component} from '@angular/core'\nimport {Http, URLSearchParams, Headers, RequestOptions} from '@angular/http';\nimport {map} from 'rxjs/operator/map';\n\n@Component({\n  selector: 'search',\n  template: `\n    <div>\n      <h2>Search</h2>\n      <input type=\"text\" placeholder=\"Search on Wikipedia\" #foo>\n      <button (click)=\"search(foo.value)\">Search</button>\n      <div *ngFor=\"let page of pages\">{{page}}</div>\n    </div>\n  `\n})\nexport class Search {\n  pages: Array<any> = [];\n\n  constructor(private http: Http) {}\n\n  search(text: string) {\n    if (text && text.length > 0) {\n      let wikiUrl = 'https://en.wikipedia.org/w/api.php';\n\n      let headers = new Headers({\n        'Content-Type': 'application/json'\n      });\n\n      let params = new URLSearchParams();\n      params.set('gapfrom', text);\n      params.set('gaplimit', '10');\n      params.set('generator', 'allpages');\n      params.set('action', 'query');\n      params.set('format', 'json');\n      params.set('origin', '*');\n\n      let options = new RequestOptions({\n        headers: headers,\n        search: params\n      });\n\n      map.call(this.http.get(wikiUrl, options), response => <string[]> response.json())\n        .subscribe(data => {\n          this.pages = [];\n          var raw = data['query']['pages'];\n          for (var key in raw) {\n            this.pages.push(raw[key].title);\n          }\n        });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/search/search.ts","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nimport * as import0 from '@angular/core';\nimport * as import1 from '../../../app/search/search';\nimport * as import2 from '@angular/common';\nimport * as import3 from '@angular/http';\nconst styles_Search:any[] = ([] as any[]);\nexport const RenderType_Search:import0.RendererType2 = import0.ɵcrt({\n  encapsulation: 2,\n  styles: styles_Search,\n  data: {}\n}\n);\nfunction View_Search_1(l:any):import0.ɵViewDefinition {\n  return import0.ɵvid(0,[\n    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'div',([] as any[]),(null as any),(null as any),(null as any),(null as any),(null as any))),\n    (l()(),import0.ɵted((null as any),[\n      '',\n      ''\n    ]\n    ))\n  ]\n  ,(null as any),(ck,v) => {\n    const currVal_0:any = v.context.$implicit;\n    ck(v,1,0,currVal_0);\n  });\n}\nexport function View_Search_0(l:any):import0.ɵViewDefinition {\n  return import0.ɵvid(0,[\n    (l()(),import0.ɵted((null as any),['\\n    '])),\n    (l()(),import0.ɵeld(0,(null as any),(null as any),12,'div',([] as any[]),(null as any),(null as any),(null as any),(null as any),(null as any))),\n    (l()(),import0.ɵted((null as any),['\\n      '])),\n    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'h2',([] as any[]),(null as any),(null as any),(null as any),(null as any),(null as any))),\n    (l()(),import0.ɵted((null as any),['Search'])),\n    (l()(),import0.ɵted((null as any),['\\n      '])),\n      (l()(),import0.ɵeld(0,[[\n        'foo',\n        1\n      ]\n    ],(null as any),0,'input',[\n      [\n        'placeholder',\n        'Search on Wikipedia'\n      ]\n      ,\n      [\n        'type',\n        'text'\n      ]\n\n    ]\n    ,(null as any),(null as any),(null as any),(null as any),(null as any))),\n    (l()(),import0.ɵted((null as any),['\\n      '])),\n      (l()(),import0.ɵeld(0,(null as any),(null as any),1,'button',([] as any[]),(null as any),[[\n        (null as any),\n        'click'\n      ]\n    ],(v,en,$event) => {\n      var ad:boolean = true;\n      var co:import1.Search = v.component;\n      if (('click' === en)) {\n        const pd_0:any = ((<any>co.search(import0.ɵnov(v,6).value)) !== false);\n        ad = (pd_0 && ad);\n      }\n      return ad;\n    },(null as any),(null as any))),\n    (l()(),import0.ɵted((null as any),['Search'])),\n    (l()(),import0.ɵted((null as any),['\\n      '])),\n    (l()(),import0.ɵand(8388608,(null as any),(null as any),1,(null as any),View_Search_1)),\n    import0.ɵdid(401408,(null as any),0,import2.NgForOf,[\n      import0.ViewContainerRef,\n      import0.TemplateRef,\n      import0.IterableDiffers\n    ]\n      ,{ngForOf: [\n        0,\n        'ngForOf'\n      ]\n    },(null as any)),\n    (l()(),import0.ɵted((null as any),['\\n    '])),\n    (l()(),import0.ɵted((null as any),['\\n  ']))\n  ]\n  ,(ck,v) => {\n    var co:import1.Search = v.component;\n    const currVal_0:any = co.pages;\n    ck(v,12,0,currVal_0);\n  },(null as any));\n}\nfunction View_Search_Host_0(l:any):import0.ɵViewDefinition {\n  return import0.ɵvid(0,[\n    (l()(),import0.ɵeld(0,(null as any),(null as any),1,'search',([] as any[]),(null as any),(null as any),(null as any),View_Search_0,RenderType_Search)),\n    import0.ɵdid(24576,(null as any),0,import1.Search,[import3.Http],(null as any),(null as any))\n  ]\n  ,(null as any),(null as any));\n}\nexport const SearchNgFactory:import0.ComponentFactory<import1.Search> = import0.ɵccf('search',import1.Search,View_Search_Host_0,{},{},([] as any[]));\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubmdmYWN0b3J5LnRzIiwidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmc6Ly8vVXNlcnMvbWxhdmFsL2Rldi9naXRodWIvcGxheWdyb3VuZC9vcHRpbWl6ZS1hbmd1bGFyLWFwcC9hcHAvc2VhcmNoL3NlYXJjaC50cyIsIm5nOi8vL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gudHMuU2VhcmNoLmh0bWwiLCJuZzovLy9Vc2Vycy9tbGF2YWwvZGV2L2dpdGh1Yi9wbGF5Z3JvdW5kL29wdGltaXplLWFuZ3VsYXItYXBwL2FwcC9zZWFyY2gvc2VhcmNoLnRzLlNlYXJjaF9Ib3N0Lmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIlxuICAgIDxkaXY+XG4gICAgICA8aDI+U2VhcmNoPC9oMj5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIG9uIFdpa2lwZWRpYVwiICNmb28+XG4gICAgICA8YnV0dG9uIChjbGljayk9XCJzZWFyY2goZm9vLnZhbHVlKVwiPlNlYXJjaDwvYnV0dG9uPlxuICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgcGFnZSBvZiBwYWdlc1wiPnt7cGFnZX19PC9kaXY+XG4gICAgPC9kaXY+XG4gICIsIjxzZWFyY2g+PC9zZWFyY2g+Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0lDS007SUFBZ0M7TUFBQTtNQUFBO0lBQUE7SUFBQTs7O0lBQUE7SUFBQTs7Ozs7SUFMdEM7SUFDSTtJQUFLO0lBQ0g7SUFBSTtJQUFXO01BQ2Y7UUFBQTtRQUFBO01BQUE7SUFBQTtNQUFBO1FBQUE7UUFBQTtNQUFBOztNQUFBO1FBQUE7UUFBQTtNQUFBOztJQUFBO0tBQUE7SUFBMEQ7TUFDMUQ7UUFBQTtRQUFBO01BQUE7SUFBQTtNQUFBO01BQUE7TUFBUTtRQUFBO1FBQUE7TUFBQTtNQUFSO0lBQUE7SUFBb0M7SUFBZTtJQUNuRDtnQkFBQTs7OztJQUFBO09BQUE7UUFBQTtRQUFBO01BQUE7SUFBQTtJQUE4QztJQUMxQzs7OztJQURDO0lBQUwsVUFBSyxTQUFMOzs7OztJQ0xOO2dCQUFBOzs7OyJ9\n\n\n\n// WEBPACK FOOTER //\n// ./$$_gendir/app/search/search.ngfactory.ts","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HttpModule, JsonpModule} from '@angular/http';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {Search} from './search';\n\n\nconst routes: Routes = [\n  {path: '', component: Search},\n];\n\n@NgModule({\n  imports: [CommonModule, HttpModule, JsonpModule, RouterModule.forChild(routes)],\n  declarations: [Search]\n})\nexport class SearchModule {}\n\n\n// WEBPACK FOOTER //\n// ./app/search/search.module.ts"],"sourceRoot":""}