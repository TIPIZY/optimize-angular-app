{"version":3,"sources":["webpack:///2.chunk.js","webpack:///./node_modules/@angular/http/@angular/http.es5.js","webpack:///./$_gendir/app/search/search.ngfactory.ts","webpack:///./app/search/search.ts","webpack:///./app/search/search.module.ts","webpack:///./$_gendir/app/search/search.module.ngfactory.ts"],"names":["webpackJsonp","64","module","__webpack_exports__","__webpack_require__","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","Error","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","length","i","strLen","charCodeAt","buffer","paramParser","rawParams","map","Map","split","forEach","param","eqIdx","indexOf","_a","slice","key","val","list","get","push","set","standardEncoding","v","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","urlEncodeParams","params","searchParams","URLSearchParams","Object","keys","value","Array","isArray","element","append","toString","httpRequest","backend","request","createConnection","response","mergeOptions","defaultOpts","providedOpts","url","newOptions","merge","RequestOptions","search","headers","body","withCredentials","responseType","_createDefaultCookieXSRFStrategy","CookieXSRFStrategy","httpFactory","xhrBackend","requestOptions","Http","jsonpFactory","jsonpBackend","Jsonp","View_Search_1","_l","__WEBPACK_IMPORTED_MODULE_0__angular_core__","_ck","_v","context","$implicit","View_Search_0","en","$event","ad","_co","component","__WEBPACK_IMPORTED_MODULE_2__angular_common__","ngForOf","pages","View_Search_Host_0","RenderType_Search","search_Search","defineProperty","__WEBPACK_IMPORTED_MODULE_0_tslib__","__WEBPACK_IMPORTED_MODULE_1__angular_core__","__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__","__WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__","n","BrowserXhr","prototype","build","XMLHttpRequest","decorators","type","ctorParameters","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","Blob","Headers","_this","this","_headers","_normalizedNames","values","name","delete","fromResponseHeaderString","headersString","line","index","trim","getAll","lcName","toLowerCase","fn","has","from","join","mayBeSetNormalizedName","toJSON","serialized","apply","entries","ResponseOptions","opts","status","statusText","options","BaseResponseOptions","_super","call","ConnectionBackend","XSRFStrategy","Connection","configureRequest","req","isSuccess","QueryEncoder","encodeKey","k","encodeValue","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","replaceAll","paramsList","Body","json","_body","parse","text","encodingHint","String","fromCharCode","Uint8Array","stringify","arrayBuffer","blob","Response","responseOptions","ok","_nextRequestId","BrowserJsonp","node","document","createElement","src","nextRequestID","requestCallback","id","exposeConnection","connection","removeConnection","send","appendChild","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","finished","data","JSONPConnection_","_dom","baseResponseOptions","_finished","TypeError","responseObserver","readyState","_id","callback","lastIndexOf","substring","script","_script","onLoad","event","responseOptions_1","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","JSONPBackend","arguments","JSONPBackend_","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","responseText","err","setDetectedContentType","setRequestHeader","getBody","abort","contentType","_cookieName","_headerName","xsrfToken","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","_mergeSearchParams","enumerable","configurable","_parseParams","objParams","item","_appendParam","BaseRequestOptions","Request","paramsArg","prefix","detectContentType","ArrayBuffer$1","detectContentTypeFromBody","FormData","Blob$1","noop","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","HttpModule","args","providers","provide","useFactory","deps","useClass","JsonpModule","__WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map__","Search","http","Content-Type","subscribe","raw","title","SearchModule","styles_Search","encapsulation","styles","SearchNgFactory","d","SearchModuleNgFactory","search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__","__WEBPACK_IMPORTED_MODULE_3__angular_common__","__WEBPACK_IMPORTED_MODULE_5__angular_router__","path"],"mappings":"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","file":"2.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 64:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./node_modules/@angular/http/@angular/http.es5.js\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_tslib__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__ = __webpack_require__(8);\n\n/**\n * @license Angular v4.2.4\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\n\n\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * \\@experimental\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n    return BrowserXhr;\n}());\nBrowserXhr.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nBrowserXhr.ctorParameters = function () { return []; };\nvar RequestMethod = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\nvar ReadyState = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\nvar ResponseType = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\nvar ContentType = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\nvar ResponseContentType = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * \\@experimental\n */\nvar Headers = (function () {\n    /**\n     * @param {?=} headers\n     */\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n    /**\n     * @return {?}\n     */\n    Headers.prototype.toJSON = function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * \\@experimental\n */\nvar ResponseOptions = (function () {\n    /**\n     * @param {?=} opts\n     */\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * \\@experimental\n */\nvar BaseResponseOptions = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    return BaseResponseOptions;\n}(ResponseOptions));\nBaseResponseOptions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nBaseResponseOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * \\@experimental\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    /**\n     * @abstract\n     * @param {?} request\n     * @return {?}\n     */\n    ConnectionBackend.prototype.createConnection = function (request) { };\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * \\@experimental\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * \\@experimental\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    XSRFStrategy.prototype.configureRequest = function (req) { };\n    return XSRFStrategy;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * \\@experimental\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nvar URLSearchParams = (function () {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = function () {\n        if (this._body instanceof ArrayBuffer) {\n            return (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = function () {\n        if (this._body instanceof Blob) {\n            return (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * \\@experimental\n */\nvar Response = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Response, _super);\n    /**\n     * @param {?} responseOptions\n     */\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = responseOptions.status;\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = responseOptions.type;\n        _this.url = responseOptions.url;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    return BrowserJsonp;\n}());\nBrowserJsonp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nBrowserJsonp.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPConnection = (function () {\n    function JSONPConnection() {\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @abstract\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = function (data) { };\n    return JSONPConnection;\n}());\nvar JSONPConnection_ = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPConnection_, _super);\n    /**\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    function JSONPConnection_(req, _dom, baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._dom = _dom;\n        _this.baseResponseOptions = baseResponseOptions;\n        _this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        _this.request = req;\n        _this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var callback = _dom.requestCallback(_this._id);\n            var url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var script = _this._script = _dom.build(url);\n            var onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n        return _this;\n    }\n    /**\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection_.prototype.finished = function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection_;\n}(JSONPConnection));\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPBackend = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPBackend, _super);\n    function JSONPBackend() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return JSONPBackend;\n}(ConnectionBackend));\nvar JSONPBackend_ = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](JSONPBackend_, _super);\n    /**\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend_.prototype.createConnection = function (request) {\n        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    return JSONPBackend_;\n}(JSONPBackend));\nJSONPBackend_.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nJSONPBackend_.ctorParameters = function () { return [\n    { type: BrowserJsonp, },\n    { type: ResponseOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * \\@experimental\n */\nvar XHRConnection = (function () {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new __WEBPACK_IMPORTED_MODULE_2_rxjs_Observable__[\"Observable\"](function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var url = getResponseURL(_xhr) || req.url;\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * \\@experimental\n */\nvar CookieXSRFStrategy = (function () {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var /** @type {?} */ xsrfToken = __WEBPACK_IMPORTED_MODULE_3__angular_platform_browser__[\"w\" /* ɵgetDOM */]().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nvar XHRBackend = (function () {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    return XHRBackend;\n}());\nXHRBackend.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nXHRBackend.ctorParameters = function () { return [\n    { type: BrowserXhr, },\n    { type: ResponseOptions, },\n    { type: XSRFStrategy, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar RequestOptions = (function () {\n    /**\n     * @param {?=} opts\n     */\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        get: function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        set: function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar BaseRequestOptions = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    return BaseRequestOptions;\n}(RequestOptions));\nBaseRequestOptions.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nBaseRequestOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * \\@experimental\n */\nvar Request = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Request, _super);\n    /**\n     * @param {?} requestOptions\n     */\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        _this.url = requestOptions.url;\n        var paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(requestOptions.method);\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = requestOptions.withCredentials;\n        _this.responseType = requestOptions.responseType;\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * \\@experimental\n */\nvar Http = (function () {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    return Http;\n}());\nHttp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nHttp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * \\@experimental\n */\nvar Jsonp = (function (_super) {\n    __WEBPACK_IMPORTED_MODULE_0_tslib__[\"a\" /* __extends */](Jsonp, _super);\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    return Jsonp;\n}(Http));\nJsonp.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"w\" /* Injectable */] },\n];\n/**\n * @nocollapse\n */\nJsonp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * \\@experimental\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    return HttpModule;\n}());\nHttpModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"D\" /* NgModule */], args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nHttpModule.ctorParameters = function () { return []; };\n/**\n * The module that includes jsonp's providers\n *\n * \\@experimental\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    return JsonpModule;\n}());\nJsonpModule.decorators = [\n    { type: __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"D\" /* NgModule */], args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    { provide: JSONPBackend, useClass: JSONPBackend_ },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nJsonpModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new __WEBPACK_IMPORTED_MODULE_1__angular_core__[\"Z\" /* Version */]('4.2.4');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\n\n//# sourceMappingURL=http.es5.js.map\n\n// CONCATENATED MODULE: ./app/search/search.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map__);\n\n\nvar search_Search = (function () {\n    function Search(http) {\n        this.http = http;\n        this.pages = [];\n    }\n    Search.prototype.search = function (text) {\n        var _this = this;\n        if (text && text.length > 0) {\n            var wikiUrl = 'https://en.wikipedia.org/w/api.php';\n            var headers = new Headers({\n                'Content-Type': 'application/json'\n            });\n            var params = new URLSearchParams();\n            params.set('gapfrom', text);\n            params.set('gaplimit', '10');\n            params.set('generator', 'allpages');\n            params.set('action', 'query');\n            params.set('format', 'json');\n            params.set('origin', '*');\n            var options = new RequestOptions({\n                headers: headers,\n                search: params\n            });\n            __WEBPACK_IMPORTED_MODULE_1_rxjs_operator_map__[\"map\"].call(this.http.get(wikiUrl, options), function (response) { return response.json(); })\n                .subscribe(function (data) {\n                _this.pages = [];\n                var raw = data['query']['pages'];\n                for (var key in raw) {\n                    _this.pages.push(raw[key].title);\n                }\n            });\n        }\n    };\n    Search.ctorParameters = function () { return [{ type: Http }]; };\n    return Search;\n}());\n\n//# sourceMappingURL=search.js.map\n// CONCATENATED MODULE: ./app/search/search.module.ts\n\nvar routes = [\n    { path: '', component: search_Search },\n];\nvar SearchModule = (function () {\n    function SearchModule() {\n    }\n    return SearchModule;\n}());\n\n//# sourceMappingURL=search.module.js.map\n// CONCATENATED MODULE: ./$$_gendir/app/search/search.ngfactory.ts\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__angular_common__ = __webpack_require__(5);\n/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n/* tslint:disable */\n\n\n\n\nvar styles_Search = [];\nvar RenderType_Search = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_15\" /* ɵcrt */]({ encapsulation: 2, styles: styles_Search,\n    data: {} });\nfunction View_Search_1(_l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_34\" /* ɵvid */](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_18\" /* ɵeld */](0, null, null, 1, 'div', [], null, null, null, null, null)), (_l()(),\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['', '']))], null, function (_ck, _v) {\n        var currVal_0 = _v.context.$implicit;\n        _ck(_v, 1, 0, currVal_0);\n    });\n}\nfunction View_Search_0(_l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_34\" /* ɵvid */](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['\\n    '])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_18\" /* ɵeld */](0, null, null, 12, 'div', [], null, null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['\\n      '])), (_l()(),\n            __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_18\" /* ɵeld */](0, null, null, 1, 'h2', [], null, null, null, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['Search'])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['\\n      '])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_18\" /* ɵeld */](0, [['foo', 1]], null, 0, 'input', [['placeholder', 'Search on Wikipedia'], ['type',\n                'text']], null, null, null, null, null)),\n        (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['\\n      '])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_18\" /* ɵeld */](0, null, null, 1, 'button', [], null, [[null, 'click']], function (_v, en, $event) {\n            var ad = true;\n            var _co = _v.component;\n            if (('click' === en)) {\n                var pd_0 = (_co.search(__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_29\" /* ɵnov */](_v, 6).value) !== false);\n                ad = (pd_0 && ad);\n            }\n            return ad;\n        }, null, null)), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['Search'])),\n        (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['\\n      '])), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_12\" /* ɵand */](16777216, null, null, 1, null, View_Search_1)), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](802816, null, 0, __WEBPACK_IMPORTED_MODULE_2__angular_common__[\"g\" /* NgForOf */], [__WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_0\" /* ViewContainerRef */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"X\" /* TemplateRef */], __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"A\" /* IterableDiffers */]], { ngForOf: [0,\n                'ngForOf'] }, null), (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['\\n    '])),\n        (_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_33\" /* ɵted */](null, ['\\n  ']))], function (_ck, _v) {\n        var _co = _v.component;\n        var currVal_0 = _co.pages;\n        _ck(_v, 12, 0, currVal_0);\n    }, null);\n}\nfunction View_Search_Host_0(_l) {\n    return __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_34\" /* ɵvid */](0, [(_l()(), __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_18\" /* ɵeld */](0, null, null, 1, 'search', [], null, null, null, View_Search_0, RenderType_Search)),\n        __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_16\" /* ɵdid */](49152, null, 0, search_Search, [Http], null, null)], null, null);\n}\nvar SearchNgFactory = __WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_13\" /* ɵccf */]('search', search_Search, View_Search_Host_0, {}, {}, []);\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubmdmYWN0b3J5LnRzIiwidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmc6Ly8vVXNlcnMvbWxhdmFsL2Rldi9naXRodWIvcGxheWdyb3VuZC9vcHRpbWl6ZS1hbmd1bGFyLWFwcC9hcHAvc2VhcmNoL3NlYXJjaC50cyIsIm5nOi8vL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gudHMuU2VhcmNoLmh0bWwiLCJuZzovLy9Vc2Vycy9tbGF2YWwvZGV2L2dpdGh1Yi9wbGF5Z3JvdW5kL29wdGltaXplLWFuZ3VsYXItYXBwL2FwcC9zZWFyY2gvc2VhcmNoLnRzLlNlYXJjaF9Ib3N0Lmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIlxuICAgIDxkaXY+XG4gICAgICA8aDI+U2VhcmNoPC9oMj5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIG9uIFdpa2lwZWRpYVwiICNmb28+XG4gICAgICA8YnV0dG9uIChjbGljayk9XCJzZWFyY2goZm9vLnZhbHVlKVwiPlNlYXJjaDwvYnV0dG9uPlxuICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgcGFnZSBvZiBwYWdlc1wiPnt7cGFnZX19PC9kaXY+XG4gICAgPC9kaXY+XG4gICIsIjxzZWFyY2g+PC9zZWFyY2g+Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztvQkNLTTtNQUFBLHdFQUFnQzthQUFBO0lBQUE7SUFBQTs7OztvQkFMdEMsMkNBQ0k7TUFBQTtNQUFBLDhCQUFLLDZDQUNIO2FBQUE7VUFBQSw0Q0FBSTtNQUFBLGFBQVcsNkNBQ2Y7TUFBQTtVQUFBO01BQTBELDZDQUMxRDtVQUFBO1VBQUE7WUFBQTtZQUFBO1lBQVE7Y0FBQTtjQUFBO1lBQUE7WUFBUjtVQUFBLGdDQUFvQztNQUFlLDZDQUNuRDtVQUFBLHFEQUFBO1VBQUE7Y0FBQSwyQkFBOEM7TUFDMUM7O0lBREM7SUFBTCxZQUFLLFNBQUw7Ozs7b0JDTE47TUFBQTthQUFBOzs7OyJ9\n//# sourceMappingURL=search.ngfactory.js.map\n// CONCATENATED MODULE: ./$$_gendir/app/search/search.module.ngfactory.ts\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"SearchModuleNgFactory\", function() { return SearchModuleNgFactory; });\n/* harmony import */ var search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__angular_common__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__angular_router__ = __webpack_require__(17);\n/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n/* tslint:disable */\n\n\n\n\n\n\n\nvar SearchModuleNgFactory = search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_14\" /* ɵcmf */](SearchModule, [], function (_l) {\n    return search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_27\" /* ɵmod */]([search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](512, search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"m\" /* ComponentFactoryResolver */], search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_10\" /* ɵCodegenComponentFactoryResolver */], [[8, [SearchNgFactory]], [3, search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"m\" /* ComponentFactoryResolver */]], search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"G\" /* NgModuleRef */]]),\n        search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](4608, __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"j\" /* NgLocalization */], __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"i\" /* NgLocaleLocalization */], [search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"C\" /* LOCALE_ID */]]), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](4608, BrowserXhr, BrowserXhr, []), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](4608, ResponseOptions, BaseResponseOptions, []), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](5120, XSRFStrategy, _createDefaultCookieXSRFStrategy, []), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](4608, XHRBackend, XHRBackend, [BrowserXhr,\n            ResponseOptions, XSRFStrategy]), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](4608, RequestOptions, BaseRequestOptions, []), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](5120, Http, httpFactory, [XHRBackend,\n            RequestOptions]), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](4608, BrowserJsonp, BrowserJsonp, []), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](4608, JSONPBackend, JSONPBackend_, [BrowserJsonp, ResponseOptions]), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](5120, Jsonp, jsonpFactory, [JSONPBackend, RequestOptions]), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](512, __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"b\" /* CommonModule */], __WEBPACK_IMPORTED_MODULE_3__angular_common__[\"b\" /* CommonModule */], []), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](512, HttpModule, HttpModule, []), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](512, JsonpModule, JsonpModule, []),\n        search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](512, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"m\" /* RouterModule */], __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"m\" /* RouterModule */], [[2, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"r\" /* ɵa */]], [2, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"k\" /* Router */]]]), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](512, SearchModule, SearchModule, []), search_module_ngfactory___WEBPACK_IMPORTED_MODULE_0__angular_core__[\"_28\" /* ɵmpd */](1024, __WEBPACK_IMPORTED_MODULE_5__angular_router__[\"i\" /* ROUTES */], function () {\n            return [[{ path: '', component: search_Search }]];\n        }, [])]);\n});\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubW9kdWxlLm5nZmFjdG9yeS50cyIsInZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5nOi8vL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIiAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==\n//# sourceMappingURL=search.module.ngfactory.js.map\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 2.chunk.js","import * as tslib_1 from \"tslib\";\n/**\n * @license Angular v4.2.4\n * (c) 2010-2017 Google, Inc. https://angular.io/\n * License: MIT\n */\nimport { Injectable, NgModule, Version } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport { ɵgetDOM } from '@angular/platform-browser';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n *\n * Take care not to evaluate this in non-browser contexts.\n *\n * \\@experimental\n */\nvar BrowserXhr = (function () {\n    function BrowserXhr() {\n    }\n    /**\n     * @return {?}\n     */\n    BrowserXhr.prototype.build = function () { return ((new XMLHttpRequest())); };\n    return BrowserXhr;\n}());\nBrowserXhr.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBrowserXhr.ctorParameters = function () { return []; };\nvar RequestMethod = {};\nRequestMethod.Get = 0;\nRequestMethod.Post = 1;\nRequestMethod.Put = 2;\nRequestMethod.Delete = 3;\nRequestMethod.Options = 4;\nRequestMethod.Head = 5;\nRequestMethod.Patch = 6;\nRequestMethod[RequestMethod.Get] = \"Get\";\nRequestMethod[RequestMethod.Post] = \"Post\";\nRequestMethod[RequestMethod.Put] = \"Put\";\nRequestMethod[RequestMethod.Delete] = \"Delete\";\nRequestMethod[RequestMethod.Options] = \"Options\";\nRequestMethod[RequestMethod.Head] = \"Head\";\nRequestMethod[RequestMethod.Patch] = \"Patch\";\nvar ReadyState = {};\nReadyState.Unsent = 0;\nReadyState.Open = 1;\nReadyState.HeadersReceived = 2;\nReadyState.Loading = 3;\nReadyState.Done = 4;\nReadyState.Cancelled = 5;\nReadyState[ReadyState.Unsent] = \"Unsent\";\nReadyState[ReadyState.Open] = \"Open\";\nReadyState[ReadyState.HeadersReceived] = \"HeadersReceived\";\nReadyState[ReadyState.Loading] = \"Loading\";\nReadyState[ReadyState.Done] = \"Done\";\nReadyState[ReadyState.Cancelled] = \"Cancelled\";\nvar ResponseType = {};\nResponseType.Basic = 0;\nResponseType.Cors = 1;\nResponseType.Default = 2;\nResponseType.Error = 3;\nResponseType.Opaque = 4;\nResponseType[ResponseType.Basic] = \"Basic\";\nResponseType[ResponseType.Cors] = \"Cors\";\nResponseType[ResponseType.Default] = \"Default\";\nResponseType[ResponseType.Error] = \"Error\";\nResponseType[ResponseType.Opaque] = \"Opaque\";\nvar ContentType = {};\nContentType.NONE = 0;\nContentType.JSON = 1;\nContentType.FORM = 2;\nContentType.FORM_DATA = 3;\nContentType.TEXT = 4;\nContentType.BLOB = 5;\nContentType.ARRAY_BUFFER = 6;\nContentType[ContentType.NONE] = \"NONE\";\nContentType[ContentType.JSON] = \"JSON\";\nContentType[ContentType.FORM] = \"FORM\";\nContentType[ContentType.FORM_DATA] = \"FORM_DATA\";\nContentType[ContentType.TEXT] = \"TEXT\";\nContentType[ContentType.BLOB] = \"BLOB\";\nContentType[ContentType.ARRAY_BUFFER] = \"ARRAY_BUFFER\";\nvar ResponseContentType = {};\nResponseContentType.Text = 0;\nResponseContentType.Json = 1;\nResponseContentType.ArrayBuffer = 2;\nResponseContentType.Blob = 3;\nResponseContentType[ResponseContentType.Text] = \"Text\";\nResponseContentType[ResponseContentType.Json] = \"Json\";\nResponseContentType[ResponseContentType.ArrayBuffer] = \"ArrayBuffer\";\nResponseContentType[ResponseContentType.Blob] = \"Blob\";\n/**\n * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n *\n * The only known difference between this `Headers` implementation and the spec is the\n * lack of an `entries` method.\n *\n * ### Example\n *\n * ```\n * import {Headers} from '\\@angular/http';\n *\n * var firstHeaders = new Headers();\n * firstHeaders.append('Content-Type', 'image/jpeg');\n * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n *\n * // Create headers from Plain Old JavaScript Object\n * var secondHeaders = new Headers({\n *   'X-My-Custom-Header': 'Angular'\n * });\n * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n *\n * var thirdHeaders = new Headers(secondHeaders);\n * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n * ```\n *\n * \\@experimental\n */\nvar Headers = (function () {\n    /**\n     * @param {?=} headers\n     */\n    function Headers(headers) {\n        var _this = this;\n        /**\n         * \\@internal header names are lower case\n         */\n        this._headers = new Map();\n        /**\n         * \\@internal map lower case names to actual names\n         */\n        this._normalizedNames = new Map();\n        if (!headers) {\n            return;\n        }\n        if (headers instanceof Headers) {\n            headers.forEach(function (values, name) {\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n            return;\n        }\n        Object.keys(headers).forEach(function (name) {\n            var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n            _this.delete(name);\n            values.forEach(function (value) { return _this.append(name, value); });\n        });\n    }\n    /**\n     * Returns a new Headers instance from the given DOMString of Response Headers\n     * @param {?} headersString\n     * @return {?}\n     */\n    Headers.fromResponseHeaderString = function (headersString) {\n        var /** @type {?} */ headers = new Headers();\n        headersString.split('\\n').forEach(function (line) {\n            var /** @type {?} */ index = line.indexOf(':');\n            if (index > 0) {\n                var /** @type {?} */ name = line.slice(0, index);\n                var /** @type {?} */ value = line.slice(index + 1).trim();\n                headers.set(name, value);\n            }\n        });\n        return headers;\n    };\n    /**\n     * Appends a header to existing list of header values for a given header name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.append = function (name, value) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            this.set(name, value);\n        }\n        else {\n            values.push(value);\n        }\n    };\n    /**\n     * Deletes all header values for the given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.delete = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        this._normalizedNames.delete(lcName);\n        this._headers.delete(lcName);\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    Headers.prototype.forEach = function (fn) {\n        var _this = this;\n        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n    };\n    /**\n     * Returns first header that matches given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.get = function (name) {\n        var /** @type {?} */ values = this.getAll(name);\n        if (values === null) {\n            return null;\n        }\n        return values.length > 0 ? values[0] : null;\n    };\n    /**\n     * Checks for existence of header by given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n    /**\n     * Returns the names of the headers\n     * @return {?}\n     */\n    Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n    /**\n     * Sets or overrides header value for given name.\n     * @param {?} name\n     * @param {?} value\n     * @return {?}\n     */\n    Headers.prototype.set = function (name, value) {\n        if (Array.isArray(value)) {\n            if (value.length) {\n                this._headers.set(name.toLowerCase(), [value.join(',')]);\n            }\n        }\n        else {\n            this._headers.set(name.toLowerCase(), [value]);\n        }\n        this.mayBeSetNormalizedName(name);\n    };\n    /**\n     * Returns values of all headers.\n     * @return {?}\n     */\n    Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n    /**\n     * @return {?}\n     */\n    Headers.prototype.toJSON = function () {\n        var _this = this;\n        var /** @type {?} */ serialized = {};\n        this._headers.forEach(function (values, name) {\n            var /** @type {?} */ split = [];\n            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n            serialized[((_this._normalizedNames.get(name)))] = split;\n        });\n        return serialized;\n    };\n    /**\n     * Returns list of header values for a given name.\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.getAll = function (name) {\n        return this.has(name) ? this._headers.get(name.toLowerCase()) || null : null;\n    };\n    /**\n     * This method is not implemented.\n     * @return {?}\n     */\n    Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n    /**\n     * @param {?} name\n     * @return {?}\n     */\n    Headers.prototype.mayBeSetNormalizedName = function (name) {\n        var /** @type {?} */ lcName = name.toLowerCase();\n        if (!this._normalizedNames.has(lcName)) {\n            this._normalizedNames.set(lcName, name);\n        }\n    };\n    return Headers;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n *\n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n *\n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n *\n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n *\n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n *\n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n *\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n *\n * \\@experimental\n */\nvar ResponseOptions = (function () {\n    /**\n     * @param {?=} opts\n     */\n    function ResponseOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var body = opts.body, status = opts.status, headers = opts.headers, statusText = opts.statusText, type = opts.type, url = opts.url;\n        this.body = body != null ? body : null;\n        this.status = status != null ? status : null;\n        this.headers = headers != null ? headers : null;\n        this.statusText = statusText != null ? statusText : null;\n        this.type = type != null ? type : null;\n        this.url = url != null ? url : null;\n    }\n    /**\n     * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n     * override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * This may be useful when sharing a base `ResponseOptions` object inside tests,\n     * where certain properties may change from test to test.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '\\@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: {name: 'Jeff'}\n     * });\n     * var res = new Response(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('options.url:', options.url); // null\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * console.log('res.url:', res.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    ResponseOptions.prototype.merge = function (options) {\n        return new ResponseOptions({\n            body: options && options.body != null ? options.body : this.body,\n            status: options && options.status != null ? options.status : this.status,\n            headers: options && options.headers != null ? options.headers : this.headers,\n            statusText: options && options.statusText != null ? options.statusText : this.statusText,\n            type: options && options.type != null ? options.type : this.type,\n            url: options && options.url != null ? options.url : this.url,\n        });\n    };\n    return ResponseOptions;\n}());\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n *\n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n *\n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n *\n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n *\n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n *\n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n *\n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n *\n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n *\n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n *\n * \\@experimental\n */\nvar BaseResponseOptions = (function (_super) {\n    tslib_1.__extends(BaseResponseOptions, _super);\n    function BaseResponseOptions() {\n        return _super.call(this, { status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers() }) || this;\n    }\n    return BaseResponseOptions;\n}(ResponseOptions));\nBaseResponseOptions.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBaseResponseOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Abstract class from which real backends are derived.\n *\n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n *\n * \\@experimental\n * @abstract\n */\nvar ConnectionBackend = (function () {\n    function ConnectionBackend() {\n    }\n    /**\n     * @abstract\n     * @param {?} request\n     * @return {?}\n     */\n    ConnectionBackend.prototype.createConnection = function (request) { };\n    return ConnectionBackend;\n}());\n/**\n * Abstract class from which real connections are derived.\n *\n * \\@experimental\n * @abstract\n */\nvar Connection = (function () {\n    function Connection() {\n    }\n    return Connection;\n}());\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n *\n * \\@experimental\n * @abstract\n */\nvar XSRFStrategy = (function () {\n    function XSRFStrategy() {\n    }\n    /**\n     * @abstract\n     * @param {?} req\n     * @return {?}\n     */\n    XSRFStrategy.prototype.configureRequest = function (req) { };\n    return XSRFStrategy;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} method\n * @return {?}\n */\nfunction normalizeMethodName(method) {\n    if (typeof method !== 'string')\n        return method;\n    switch (method.toUpperCase()) {\n        case 'GET':\n            return RequestMethod.Get;\n        case 'POST':\n            return RequestMethod.Post;\n        case 'PUT':\n            return RequestMethod.Put;\n        case 'DELETE':\n            return RequestMethod.Delete;\n        case 'OPTIONS':\n            return RequestMethod.Options;\n        case 'HEAD':\n            return RequestMethod.Head;\n        case 'PATCH':\n            return RequestMethod.Patch;\n    }\n    throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n}\nvar isSuccess = function (status) { return (status >= 200 && status < 300); };\n/**\n * @param {?} xhr\n * @return {?}\n */\nfunction getResponseURL(xhr) {\n    if ('responseURL' in xhr) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\n/**\n * @param {?} input\n * @return {?}\n */\nfunction stringToArrayBuffer(input) {\n    var /** @type {?} */ view = new Uint16Array(input.length);\n    for (var /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n        view[i] = input.charCodeAt(i);\n    }\n    return view.buffer;\n}\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams) {\n    if (rawParams === void 0) { rawParams = ''; }\n    var /** @type {?} */ map = new Map();\n    if (rawParams.length > 0) {\n        var /** @type {?} */ params = rawParams.split('&');\n        params.forEach(function (param) {\n            var /** @type {?} */ eqIdx = param.indexOf('=');\n            var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n            var /** @type {?} */ list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\n/**\n * \\@experimental\n *\n */\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    /**\n     * @param {?} k\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n    /**\n     * @param {?} v\n     * @return {?}\n     */\n    QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n    return QueryEncoder;\n}());\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n *\n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n *\n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n *\n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n *\n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n *\n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n *\n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nvar URLSearchParams = (function () {\n    /**\n     * @param {?=} rawParams\n     * @param {?=} queryEncoder\n     */\n    function URLSearchParams(rawParams, queryEncoder) {\n        if (rawParams === void 0) { rawParams = ''; }\n        if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n        this.rawParams = rawParams;\n        this.queryEncoder = queryEncoder;\n        this.paramsMap = paramParser(rawParams);\n    }\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.clone = function () {\n        var /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n        clone.appendAll(this);\n        return clone;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.get = function (param) {\n        var /** @type {?} */ storedParam = this.paramsMap.get(param);\n        return Array.isArray(storedParam) ? storedParam[0] : null;\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.set = function (param, val) {\n        if (val === void 0 || val === null) {\n            this.delete(param);\n            return;\n        }\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.length = 0;\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.setAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(value[0]);\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} param\n     * @param {?} val\n     * @return {?}\n     */\n    URLSearchParams.prototype.append = function (param, val) {\n        if (val === void 0 || val === null)\n            return;\n        var /** @type {?} */ list = this.paramsMap.get(param) || [];\n        list.push(val);\n        this.paramsMap.set(param, list);\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.appendAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @param {?} searchParams\n     * @return {?}\n     */\n    URLSearchParams.prototype.replaceAll = function (searchParams) {\n        var _this = this;\n        searchParams.paramsMap.forEach(function (value, param) {\n            var /** @type {?} */ list = _this.paramsMap.get(param) || [];\n            list.length = 0;\n            for (var /** @type {?} */ i = 0; i < value.length; ++i) {\n                list.push(value[i]);\n            }\n            _this.paramsMap.set(param, list);\n        });\n    };\n    /**\n     * @return {?}\n     */\n    URLSearchParams.prototype.toString = function () {\n        var _this = this;\n        var /** @type {?} */ paramsList = [];\n        this.paramsMap.forEach(function (values, k) {\n            values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n        });\n        return paramsList.join('&');\n    };\n    /**\n     * @param {?} param\n     * @return {?}\n     */\n    URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n    return URLSearchParams;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nvar Body = (function () {\n    function Body() {\n    }\n    /**\n     * Attempts to return body as parsed `JSON` object, or raises an exception.\n     * @return {?}\n     */\n    Body.prototype.json = function () {\n        if (typeof this._body === 'string') {\n            return JSON.parse(/** @type {?} */ (this._body));\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return JSON.parse(this.text());\n        }\n        return this._body;\n    };\n    /**\n     * Returns the body as a string, presuming `toString()` can be called on the response body.\n     *\n     * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n     * bytes in the buffer will be interpreted. Valid values are:\n     *\n     * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n     *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n     *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n     *   into consideration. This is the default behavior to avoid breaking apps, but should be\n     *   considered deprecated.\n     *\n     * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n     * @param {?=} encodingHint\n     * @return {?}\n     */\n    Body.prototype.text = function (encodingHint) {\n        if (encodingHint === void 0) { encodingHint = 'legacy'; }\n        if (this._body instanceof URLSearchParams) {\n            return this._body.toString();\n        }\n        if (this._body instanceof ArrayBuffer) {\n            switch (encodingHint) {\n                case 'legacy':\n                    return String.fromCharCode.apply(null, new Uint16Array(/** @type {?} */ (this._body)));\n                case 'iso-8859':\n                    return String.fromCharCode.apply(null, new Uint8Array(/** @type {?} */ (this._body)));\n                default:\n                    throw new Error(\"Invalid value for encodingHint: \" + encodingHint);\n            }\n        }\n        if (this._body == null) {\n            return '';\n        }\n        if (typeof this._body === 'object') {\n            return JSON.stringify(this._body, null, 2);\n        }\n        return this._body.toString();\n    };\n    /**\n     * Return the body as an ArrayBuffer\n     * @return {?}\n     */\n    Body.prototype.arrayBuffer = function () {\n        if (this._body instanceof ArrayBuffer) {\n            return (this._body);\n        }\n        return stringToArrayBuffer(this.text());\n    };\n    /**\n     * Returns the request's body as a Blob, assuming that body exists.\n     * @return {?}\n     */\n    Body.prototype.blob = function () {\n        if (this._body instanceof Blob) {\n            return (this._body);\n        }\n        if (this._body instanceof ArrayBuffer) {\n            return new Blob([this._body]);\n        }\n        throw new Error('The request body isn\\'t either a blob or an array buffer');\n    };\n    return Body;\n}());\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Response` instances from provided values.\n *\n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n *\n * ### Example\n *\n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n *\n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n *\n * \\@experimental\n */\nvar Response = (function (_super) {\n    tslib_1.__extends(Response, _super);\n    /**\n     * @param {?} responseOptions\n     */\n    function Response(responseOptions) {\n        var _this = _super.call(this) || this;\n        _this._body = responseOptions.body;\n        _this.status = responseOptions.status;\n        _this.ok = (_this.status >= 200 && _this.status <= 299);\n        _this.statusText = responseOptions.statusText;\n        _this.headers = responseOptions.headers;\n        _this.type = responseOptions.type;\n        _this.url = responseOptions.url;\n        return _this;\n    }\n    /**\n     * @return {?}\n     */\n    Response.prototype.toString = function () {\n        return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n    };\n    return Response;\n}(Body));\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar _nextRequestId = 0;\nvar JSONP_HOME = '__ng_jsonp__';\nvar _jsonpConnections = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections() {\n    var /** @type {?} */ w = typeof window == 'object' ? window : {};\n    if (_jsonpConnections === null) {\n        _jsonpConnections = w[JSONP_HOME] = {};\n    }\n    return _jsonpConnections;\n}\nvar BrowserJsonp = (function () {\n    function BrowserJsonp() {\n    }\n    /**\n     * @param {?} url\n     * @return {?}\n     */\n    BrowserJsonp.prototype.build = function (url) {\n        var /** @type {?} */ node = document.createElement('script');\n        node.src = url;\n        return node;\n    };\n    /**\n     * @return {?}\n     */\n    BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n    /**\n     * @param {?} id\n     * @param {?} connection\n     * @return {?}\n     */\n    BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = connection;\n    };\n    /**\n     * @param {?} id\n     * @return {?}\n     */\n    BrowserJsonp.prototype.removeConnection = function (id) {\n        var /** @type {?} */ connections = _getJsonpConnections();\n        connections[id] = null;\n    };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.send = function (node) { document.body.appendChild(/** @type {?} */ ((node))); };\n    /**\n     * @param {?} node\n     * @return {?}\n     */\n    BrowserJsonp.prototype.cleanup = function (node) {\n        if (node.parentNode) {\n            node.parentNode.removeChild(/** @type {?} */ ((node)));\n        }\n    };\n    return BrowserJsonp;\n}());\nBrowserJsonp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBrowserJsonp.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPConnection = (function () {\n    function JSONPConnection() {\n    }\n    /**\n     * Callback called when the JSONP request completes, to notify the application\n     * of the new data.\n     * @abstract\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection.prototype.finished = function (data) { };\n    return JSONPConnection;\n}());\nvar JSONPConnection_ = (function (_super) {\n    tslib_1.__extends(JSONPConnection_, _super);\n    /**\n     * @param {?} req\n     * @param {?} _dom\n     * @param {?=} baseResponseOptions\n     */\n    function JSONPConnection_(req, _dom, baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._dom = _dom;\n        _this.baseResponseOptions = baseResponseOptions;\n        _this._finished = false;\n        if (req.method !== RequestMethod.Get) {\n            throw new TypeError(JSONP_ERR_WRONG_METHOD);\n        }\n        _this.request = req;\n        _this.response = new Observable(function (responseObserver) {\n            _this.readyState = ReadyState.Loading;\n            var id = _this._id = _dom.nextRequestID();\n            _dom.exposeConnection(id, _this);\n            // Workaround Dart\n            // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n            var callback = _dom.requestCallback(_this._id);\n            var url = req.url;\n            if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n            }\n            else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n            }\n            var script = _this._script = _dom.build(url);\n            var onLoad = function (event) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                if (!_this._finished) {\n                    var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url: url });\n                    if (baseResponseOptions) {\n                        responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                    }\n                    responseObserver.error(new Response(responseOptions_1));\n                    return;\n                }\n                var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                if (_this.baseResponseOptions) {\n                    responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.next(new Response(responseOptions));\n                responseObserver.complete();\n            };\n            var onError = function (error) {\n                if (_this.readyState === ReadyState.Cancelled)\n                    return;\n                _this.readyState = ReadyState.Done;\n                _dom.cleanup(script);\n                var responseOptions = new ResponseOptions({ body: error.message, type: ResponseType.Error });\n                if (baseResponseOptions) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            script.addEventListener('load', onLoad);\n            script.addEventListener('error', onError);\n            _dom.send(script);\n            return function () {\n                _this.readyState = ReadyState.Cancelled;\n                script.removeEventListener('load', onLoad);\n                script.removeEventListener('error', onError);\n                _this._dom.cleanup(script);\n            };\n        });\n        return _this;\n    }\n    /**\n     * @param {?=} data\n     * @return {?}\n     */\n    JSONPConnection_.prototype.finished = function (data) {\n        // Don't leak connections\n        this._finished = true;\n        this._dom.removeConnection(this._id);\n        if (this.readyState === ReadyState.Cancelled)\n            return;\n        this._responseData = data;\n    };\n    return JSONPConnection_;\n}(JSONPConnection));\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n *\n * \\@experimental\n * @abstract\n */\nvar JSONPBackend = (function (_super) {\n    tslib_1.__extends(JSONPBackend, _super);\n    function JSONPBackend() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return JSONPBackend;\n}(ConnectionBackend));\nvar JSONPBackend_ = (function (_super) {\n    tslib_1.__extends(JSONPBackend_, _super);\n    /**\n     * @param {?} _browserJSONP\n     * @param {?} _baseResponseOptions\n     */\n    function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n        var _this = _super.call(this) || this;\n        _this._browserJSONP = _browserJSONP;\n        _this._baseResponseOptions = _baseResponseOptions;\n        return _this;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    JSONPBackend_.prototype.createConnection = function (request) {\n        return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n    };\n    return JSONPBackend_;\n}(JSONPBackend));\nJSONPBackend_.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nJSONPBackend_.ctorParameters = function () { return [\n    { type: BrowserJsonp, },\n    { type: ResponseOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n *\n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n *\n * \\@experimental\n */\nvar XHRConnection = (function () {\n    /**\n     * @param {?} req\n     * @param {?} browserXHR\n     * @param {?=} baseResponseOptions\n     */\n    function XHRConnection(req, browserXHR, baseResponseOptions) {\n        var _this = this;\n        this.request = req;\n        this.response = new Observable(function (responseObserver) {\n            var _xhr = browserXHR.build();\n            _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n            if (req.withCredentials != null) {\n                _xhr.withCredentials = req.withCredentials;\n            }\n            // load event handler\n            var onLoad = function () {\n                // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                var body = null;\n                // HTTP 204 means no content\n                if (status !== 204) {\n                    // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                    // response/responseType properties were introduced in ResourceLoader Level2 spec\n                    // (supported by IE10)\n                    body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                    // Implicitly strip a potential XSSI prefix.\n                    if (typeof body === 'string') {\n                        body = body.replace(XSSI_PREFIX, '');\n                    }\n                }\n                // fix status code when it is 0 (0 status is undocumented).\n                // Occurs when accessing file resources or on Android 4.1 stock browser\n                // while retrieving files from application cache.\n                if (status === 0) {\n                    status = body ? 200 : 0;\n                }\n                var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                // IE 9 does not provide the way to get URL of response\n                var url = getResponseURL(_xhr) || req.url;\n                var statusText = _xhr.statusText || 'OK';\n                var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                var response = new Response(responseOptions);\n                response.ok = isSuccess(status);\n                if (response.ok) {\n                    responseObserver.next(response);\n                    // TODO(gdi2290): defer complete if array buffer until done\n                    responseObserver.complete();\n                    return;\n                }\n                responseObserver.error(response);\n            };\n            // error event handler\n            var onError = function (err) {\n                var responseOptions = new ResponseOptions({\n                    body: err,\n                    type: ResponseType.Error,\n                    status: _xhr.status,\n                    statusText: _xhr.statusText,\n                });\n                if (baseResponseOptions != null) {\n                    responseOptions = baseResponseOptions.merge(responseOptions);\n                }\n                responseObserver.error(new Response(responseOptions));\n            };\n            _this.setDetectedContentType(req, _xhr);\n            if (req.headers == null) {\n                req.headers = new Headers();\n            }\n            if (!req.headers.has('Accept')) {\n                req.headers.append('Accept', 'application/json, text/plain, */*');\n            }\n            req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n            // Select the correct buffer type to store the response\n            if (req.responseType != null && _xhr.responseType != null) {\n                switch (req.responseType) {\n                    case ResponseContentType.ArrayBuffer:\n                        _xhr.responseType = 'arraybuffer';\n                        break;\n                    case ResponseContentType.Json:\n                        _xhr.responseType = 'json';\n                        break;\n                    case ResponseContentType.Text:\n                        _xhr.responseType = 'text';\n                        break;\n                    case ResponseContentType.Blob:\n                        _xhr.responseType = 'blob';\n                        break;\n                    default:\n                        throw new Error('The selected responseType is not supported');\n                }\n            }\n            _xhr.addEventListener('load', onLoad);\n            _xhr.addEventListener('error', onError);\n            _xhr.send(_this.request.getBody());\n            return function () {\n                _xhr.removeEventListener('load', onLoad);\n                _xhr.removeEventListener('error', onError);\n                _xhr.abort();\n            };\n        });\n    }\n    /**\n     * @param {?} req\n     * @param {?} _xhr\n     * @return {?}\n     */\n    XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n        // Skip if a custom Content-Type header is provided\n        if (req.headers != null && req.headers.get('Content-Type') != null) {\n            return;\n        }\n        // Set the detected content type\n        switch (req.contentType) {\n            case ContentType.NONE:\n                break;\n            case ContentType.JSON:\n                _xhr.setRequestHeader('content-type', 'application/json');\n                break;\n            case ContentType.FORM:\n                _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                break;\n            case ContentType.TEXT:\n                _xhr.setRequestHeader('content-type', 'text/plain');\n                break;\n            case ContentType.BLOB:\n                var /** @type {?} */ blob = req.blob();\n                if (blob.type) {\n                    _xhr.setRequestHeader('content-type', blob.type);\n                }\n                break;\n        }\n    };\n    return XHRConnection;\n}());\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n *\n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n *\n * \\@experimental\n */\nvar CookieXSRFStrategy = (function () {\n    /**\n     * @param {?=} _cookieName\n     * @param {?=} _headerName\n     */\n    function CookieXSRFStrategy(_cookieName, _headerName) {\n        if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n        if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n        this._cookieName = _cookieName;\n        this._headerName = _headerName;\n    }\n    /**\n     * @param {?} req\n     * @return {?}\n     */\n    CookieXSRFStrategy.prototype.configureRequest = function (req) {\n        var /** @type {?} */ xsrfToken = ɵgetDOM().getCookie(this._cookieName);\n        if (xsrfToken) {\n            req.headers.set(this._headerName, xsrfToken);\n        }\n    };\n    return CookieXSRFStrategy;\n}());\n/**\n * Creates {\\@link XHRConnection} instances.\n *\n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n *\n * ### Example\n *\n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({\n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nvar XHRBackend = (function () {\n    /**\n     * @param {?} _browserXHR\n     * @param {?} _baseResponseOptions\n     * @param {?} _xsrfStrategy\n     */\n    function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n        this._browserXHR = _browserXHR;\n        this._baseResponseOptions = _baseResponseOptions;\n        this._xsrfStrategy = _xsrfStrategy;\n    }\n    /**\n     * @param {?} request\n     * @return {?}\n     */\n    XHRBackend.prototype.createConnection = function (request) {\n        this._xsrfStrategy.configureRequest(request);\n        return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n    };\n    return XHRBackend;\n}());\nXHRBackend.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nXHRBackend.ctorParameters = function () { return [\n    { type: BrowserXhr, },\n    { type: ResponseOptions, },\n    { type: XSRFStrategy, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n *\n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n *\n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n *\n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar RequestOptions = (function () {\n    /**\n     * @param {?=} opts\n     */\n    function RequestOptions(opts) {\n        if (opts === void 0) { opts = {}; }\n        var method = opts.method, headers = opts.headers, body = opts.body, url = opts.url, search = opts.search, params = opts.params, withCredentials = opts.withCredentials, responseType = opts.responseType;\n        this.method = method != null ? normalizeMethodName(method) : null;\n        this.headers = headers != null ? headers : null;\n        this.body = body != null ? body : null;\n        this.url = url != null ? url : null;\n        this.params = this._mergeSearchParams(params || search);\n        this.withCredentials = withCredentials != null ? withCredentials : null;\n        this.responseType = responseType != null ? responseType : null;\n    }\n    Object.defineProperty(RequestOptions.prototype, \"search\", {\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @return {?}\n         */\n        get: function () { return this.params; },\n        /**\n         * @deprecated from 4.0.0. Use params instead.\n         * @param {?} params\n         * @return {?}\n         */\n        set: function (params) { this.params = params; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n     * existing values. This method will not change the values of the instance on which it is being\n     * called.\n     *\n     * Note that `headers` and `search` will override existing values completely if present in\n     * the `options` object. If these values should be merged, it should be done prior to calling\n     * `merge` on the `RequestOptions` instance.\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n     *\n     * const options = new RequestOptions({\n     *   method: RequestMethod.Post\n     * });\n     * const req = new Request(options.merge({\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     * @param {?=} options\n     * @return {?}\n     */\n    RequestOptions.prototype.merge = function (options) {\n        return new RequestOptions({\n            method: options && options.method != null ? options.method : this.method,\n            headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n            body: options && options.body != null ? options.body : this.body,\n            url: options && options.url != null ? options.url : this.url,\n            params: options && this._mergeSearchParams(options.params || options.search),\n            withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                this.withCredentials,\n            responseType: options && options.responseType != null ? options.responseType :\n                this.responseType\n        });\n    };\n    /**\n     * @param {?=} params\n     * @return {?}\n     */\n    RequestOptions.prototype._mergeSearchParams = function (params) {\n        if (!params)\n            return this.params;\n        if (params instanceof URLSearchParams) {\n            return params.clone();\n        }\n        if (typeof params === 'string') {\n            return new URLSearchParams(params);\n        }\n        return this._parseParams(params);\n    };\n    /**\n     * @param {?=} objParams\n     * @return {?}\n     */\n    RequestOptions.prototype._parseParams = function (objParams) {\n        var _this = this;\n        if (objParams === void 0) { objParams = {}; }\n        var /** @type {?} */ params = new URLSearchParams();\n        Object.keys(objParams).forEach(function (key) {\n            var /** @type {?} */ value = objParams[key];\n            if (Array.isArray(value)) {\n                value.forEach(function (item) { return _this._appendParam(key, item, params); });\n            }\n            else {\n                _this._appendParam(key, value, params);\n            }\n        });\n        return params;\n    };\n    /**\n     * @param {?} key\n     * @param {?} value\n     * @param {?} params\n     * @return {?}\n     */\n    RequestOptions.prototype._appendParam = function (key, value, params) {\n        if (typeof value !== 'string') {\n            value = JSON.stringify(value);\n        }\n        params.append(key, value);\n    };\n    return RequestOptions;\n}());\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n *\n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n *\n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n *\n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n *\n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n *\n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n *\n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n *\n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n *\n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n *\n * \\@experimental\n */\nvar BaseRequestOptions = (function (_super) {\n    tslib_1.__extends(BaseRequestOptions, _super);\n    function BaseRequestOptions() {\n        return _super.call(this, { method: RequestMethod.Get, headers: new Headers() }) || this;\n    }\n    return BaseRequestOptions;\n}(RequestOptions));\nBaseRequestOptions.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nBaseRequestOptions.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Creates `Request` instances from provided values.\n *\n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n *\n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n *\n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n *\n * \\@Injectable()\n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n *\n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n *\n * \\@experimental\n */\nvar Request = (function (_super) {\n    tslib_1.__extends(Request, _super);\n    /**\n     * @param {?} requestOptions\n     */\n    function Request(requestOptions) {\n        var _this = _super.call(this) || this;\n        // TODO: assert that url is present\n        var url = requestOptions.url;\n        _this.url = requestOptions.url;\n        var paramsArg = requestOptions.params || requestOptions.search;\n        if (paramsArg) {\n            var params = void 0;\n            if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n                params = urlEncodeParams(paramsArg).toString();\n            }\n            else {\n                params = paramsArg.toString();\n            }\n            if (params.length > 0) {\n                var prefix = '?';\n                if (_this.url.indexOf('?') != -1) {\n                    prefix = (_this.url[_this.url.length - 1] == '&') ? '' : '&';\n                }\n                // TODO: just delete search-query-looking string in url?\n                _this.url = url + prefix + params;\n            }\n        }\n        _this._body = requestOptions.body;\n        _this.method = normalizeMethodName(requestOptions.method);\n        // TODO(jeffbcross): implement behavior\n        // Defaults to 'omit', consistent with browser\n        _this.headers = new Headers(requestOptions.headers);\n        _this.contentType = _this.detectContentType();\n        _this.withCredentials = requestOptions.withCredentials;\n        _this.responseType = requestOptions.responseType;\n        return _this;\n    }\n    /**\n     * Returns the content type enum based on header options.\n     * @return {?}\n     */\n    Request.prototype.detectContentType = function () {\n        switch (this.headers.get('content-type')) {\n            case 'application/json':\n                return ContentType.JSON;\n            case 'application/x-www-form-urlencoded':\n                return ContentType.FORM;\n            case 'multipart/form-data':\n                return ContentType.FORM_DATA;\n            case 'text/plain':\n            case 'text/html':\n                return ContentType.TEXT;\n            case 'application/octet-stream':\n                return this._body instanceof ArrayBuffer$1 ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n            default:\n                return this.detectContentTypeFromBody();\n        }\n    };\n    /**\n     * Returns the content type of request's body based on its type.\n     * @return {?}\n     */\n    Request.prototype.detectContentTypeFromBody = function () {\n        if (this._body == null) {\n            return ContentType.NONE;\n        }\n        else if (this._body instanceof URLSearchParams) {\n            return ContentType.FORM;\n        }\n        else if (this._body instanceof FormData) {\n            return ContentType.FORM_DATA;\n        }\n        else if (this._body instanceof Blob$1) {\n            return ContentType.BLOB;\n        }\n        else if (this._body instanceof ArrayBuffer$1) {\n            return ContentType.ARRAY_BUFFER;\n        }\n        else if (this._body && typeof this._body === 'object') {\n            return ContentType.JSON;\n        }\n        else {\n            return ContentType.TEXT;\n        }\n    };\n    /**\n     * Returns the request's body according to its type. If body is undefined, return\n     * null.\n     * @return {?}\n     */\n    Request.prototype.getBody = function () {\n        switch (this.contentType) {\n            case ContentType.JSON:\n                return this.text();\n            case ContentType.FORM:\n                return this.text();\n            case ContentType.FORM_DATA:\n                return this._body;\n            case ContentType.TEXT:\n                return this.text();\n            case ContentType.BLOB:\n                return this.blob();\n            case ContentType.ARRAY_BUFFER:\n                return this.arrayBuffer();\n            default:\n                return null;\n        }\n    };\n    return Request;\n}(Body));\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params) {\n    var /** @type {?} */ searchParams = new URLSearchParams();\n    Object.keys(params).forEach(function (key) {\n        var /** @type {?} */ value = params[key];\n        if (value && Array.isArray(value)) {\n            value.forEach(function (element) { return searchParams.append(key, element.toString()); });\n        }\n        else {\n            searchParams.append(key, value.toString());\n        }\n    });\n    return searchParams;\n}\nvar noop = function () { };\nvar w = typeof window == 'object' ? window : noop;\nvar FormData = ((w) /** TODO #9100 */)['FormData'] || noop;\nvar Blob$1 = ((w) /** TODO #9100 */)['Blob'] || noop;\nvar ArrayBuffer$1 = ((w) /** TODO #9100 */)['ArrayBuffer'] || noop;\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @param {?} backend\n * @param {?} request\n * @return {?}\n */\nfunction httpRequest(backend, request) {\n    return backend.createConnection(request).response;\n}\n/**\n * @param {?} defaultOpts\n * @param {?} providedOpts\n * @param {?} method\n * @param {?} url\n * @return {?}\n */\nfunction mergeOptions(defaultOpts, providedOpts, method, url) {\n    var /** @type {?} */ newOptions = defaultOpts;\n    if (providedOpts) {\n        // Hack so Dart can used named parameters\n        return (newOptions.merge(new RequestOptions({\n            method: providedOpts.method || method,\n            url: providedOpts.url || url,\n            search: providedOpts.search,\n            params: providedOpts.params,\n            headers: providedOpts.headers,\n            body: providedOpts.body,\n            withCredentials: providedOpts.withCredentials,\n            responseType: providedOpts.responseType\n        })));\n    }\n    return (newOptions.merge(new RequestOptions({ method: method, url: url })));\n}\n/**\n * Performs http requests using `XMLHttpRequest` as the default backend.\n *\n * `Http` is available as an injectable class, with methods to perform http requests. Calling\n * `request` returns an `Observable` which will emit a single {\\@link Response} when a\n * response is received.\n *\n * ### Example\n *\n * ```typescript\n * import {Http, HTTP_PROVIDERS} from '\\@angular/http';\n * import 'rxjs/add/operator/map'\n * \\@Component({\n *   selector: 'http-app',\n *   viewProviders: [HTTP_PROVIDERS],\n *   templateUrl: 'people.html'\n * })\n * class PeopleComponent {\n *   constructor(http: Http) {\n *     http.get('people.json')\n *       // Call map on the response observable to get the parsed people object\n *       .map(res => res.json())\n *       // Subscribe to the observable to get the parsed people object and attach it to the\n *       // component\n *       .subscribe(people => this.people = people);\n *   }\n * }\n * ```\n *\n *\n * ### Example\n *\n * ```\n * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n * ```\n *\n * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n * {\\@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n * the {\\@link XHRBackend} provider, as in the following example:\n *\n * ### Example\n *\n * ```typescript\n * import {BaseRequestOptions, Http} from '\\@angular/http';\n * import {MockBackend} from '\\@angular/http/testing';\n * var injector = Injector.resolveAndCreate([\n *   BaseRequestOptions,\n *   MockBackend,\n *   {provide: Http, useFactory:\n *       function(backend, defaultOptions) {\n *         return new Http(backend, defaultOptions);\n *       },\n *       deps: [MockBackend, BaseRequestOptions]}\n * ]);\n * var http = injector.get(Http);\n * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n * ```\n *\n * \\@experimental\n */\nvar Http = (function () {\n    /**\n     * @param {?} _backend\n     * @param {?} _defaultOptions\n     */\n    function Http(_backend, _defaultOptions) {\n        this._backend = _backend;\n        this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url))));\n        }\n        else if (url instanceof Request) {\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    /**\n     * Performs a request with `get` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.get = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, url)));\n    };\n    /**\n     * Performs a request with `post` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.post = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Post, url)));\n    };\n    /**\n     * Performs a request with `put` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.put = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Put, url)));\n    };\n    /**\n     * Performs a request with `delete` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.delete = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Delete, url)));\n    };\n    /**\n     * Performs a request with `patch` http method.\n     * @param {?} url\n     * @param {?} body\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.patch = function (url, body, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, RequestMethod.Patch, url)));\n    };\n    /**\n     * Performs a request with `head` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.head = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Head, url)));\n    };\n    /**\n     * Performs a request with `options` http method.\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Http.prototype.options = function (url, options) {\n        return this.request(new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Options, url)));\n    };\n    return Http;\n}());\nHttp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nHttp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * \\@experimental\n */\nvar Jsonp = (function (_super) {\n    tslib_1.__extends(Jsonp, _super);\n    /**\n     * @param {?} backend\n     * @param {?} defaultOptions\n     */\n    function Jsonp(backend, defaultOptions) {\n        return _super.call(this, backend, defaultOptions) || this;\n    }\n    /**\n     * Performs any type of http request. First argument is required, and can either be a url or\n     * a {\\@link Request} instance. If the first argument is a url, an optional {\\@link RequestOptions}\n     * object can be provided as the 2nd argument. The options object will be merged with the values\n     * of {\\@link BaseRequestOptions} before performing the request.\n     *\n     * \\@security Regular XHR is the safest alternative to JSONP for most applications, and is\n     * supported by all current browsers. Because JSONP creates a `<script>` element with\n     * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n     * source could expose your application to XSS risks. Data exposed by JSONP may also be\n     * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n     * future security issues (e.g. content sniffing).  For more detail, see the\n     * [Security Guide](http://g.co/ng/security).\n     * @param {?} url\n     * @param {?=} options\n     * @return {?}\n     */\n    Jsonp.prototype.request = function (url, options) {\n        var /** @type {?} */ responseObservable;\n        if (typeof url === 'string') {\n            url =\n                new Request(mergeOptions(this._defaultOptions, options, RequestMethod.Get, /** @type {?} */ (url)));\n        }\n        if (url instanceof Request) {\n            if (url.method !== RequestMethod.Get) {\n                throw new Error('JSONP requests must use GET request method.');\n            }\n            responseObservable = httpRequest(this._backend, url);\n        }\n        else {\n            throw new Error('First argument must be a url string or Request instance.');\n        }\n        return responseObservable;\n    };\n    return Jsonp;\n}(Http));\nJsonp.decorators = [\n    { type: Injectable },\n];\n/**\n * @nocollapse\n */\nJsonp.ctorParameters = function () { return [\n    { type: ConnectionBackend, },\n    { type: RequestOptions, },\n]; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n/**\n * @return {?}\n */\nfunction _createDefaultCookieXSRFStrategy() {\n    return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction httpFactory(xhrBackend, requestOptions) {\n    return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nfunction jsonpFactory(jsonpBackend, requestOptions) {\n    return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n *\n * \\@experimental\n */\nvar HttpModule = (function () {\n    function HttpModule() {\n    }\n    return HttpModule;\n}());\nHttpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                    BrowserXhr,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    XHRBackend,\n                    { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nHttpModule.ctorParameters = function () { return []; };\n/**\n * The module that includes jsonp's providers\n *\n * \\@experimental\n */\nvar JsonpModule = (function () {\n    function JsonpModule() {\n    }\n    return JsonpModule;\n}());\nJsonpModule.decorators = [\n    { type: NgModule, args: [{\n                providers: [\n                    // TODO(pascal): use factory type annotations once supported in DI\n                    // issue: https://github.com/angular/angular/issues/3183\n                    { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                    BrowserJsonp,\n                    { provide: RequestOptions, useClass: BaseRequestOptions },\n                    { provide: ResponseOptions, useClass: BaseResponseOptions },\n                    { provide: JSONPBackend, useClass: JSONPBackend_ },\n                ],\n            },] },\n];\n/**\n * @nocollapse\n */\nJsonpModule.ctorParameters = function () { return []; };\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n/**\n * \\@stable\n */\nvar VERSION = new Version('4.2.4');\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n/**\n * Generated bundle index. Do not edit.\n */\nexport { BrowserXhr, JSONPBackend, JSONPConnection, CookieXSRFStrategy, XHRBackend, XHRConnection, BaseRequestOptions, RequestOptions, BaseResponseOptions, ResponseOptions, ReadyState, RequestMethod, ResponseContentType, ResponseType, Headers, Http, Jsonp, HttpModule, JsonpModule, Connection, ConnectionBackend, XSRFStrategy, Request, Response, QueryEncoder, URLSearchParams, VERSION, BrowserJsonp as ɵg, JSONPBackend_ as ɵa, Body as ɵf, _createDefaultCookieXSRFStrategy as ɵb, httpFactory as ɵc, jsonpFactory as ɵd };\n//# sourceMappingURL=http.es5.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/@angular/http/@angular/http.es5.js\n// module id = null\n// module chunks = ","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nimport * as i0 from '@angular/core';\nimport * as i1 from '../../../app/search/search';\nimport * as i2 from '@angular/common';\nimport * as i3 from '@angular/http';\nconst styles_Search:any[] = ([] as any[]);\nexport const RenderType_Search:i0.RendererType2 = i0.ɵcrt({encapsulation:2,styles:styles_Search,\n    data:{}});\nfunction View_Search_1(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵeld(0,(null as any),(null as any),1,'div',([] as any[]),\n      (null as any),(null as any),(null as any),(null as any),(null as any))),(_l()(),\n      i0.ɵted((null as any),['','']))],(null as any),(_ck,_v) => {\n    const currVal_0:any = _v.context.$implicit;\n    _ck(_v,1,0,currVal_0);\n  });\n}\nexport function View_Search_0(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵted((null as any),['\\n    '])),(_l()(),i0.ɵeld(0,(null as any),\n      (null as any),12,'div',([] as any[]),(null as any),(null as any),(null as any),\n      (null as any),(null as any))),(_l()(),i0.ɵted((null as any),['\\n      '])),(_l()(),\n      i0.ɵeld(0,(null as any),(null as any),1,'h2',([] as any[]),(null as any),(null as any),\n          (null as any),(null as any),(null as any))),(_l()(),i0.ɵted((null as any),\n      ['Search'])),(_l()(),i0.ɵted((null as any),['\\n      '])),(_l()(),i0.ɵeld(0,\n      [['foo',1]],(null as any),0,'input',[['placeholder','Search on Wikipedia'],['type',\n          'text']],(null as any),(null as any),(null as any),(null as any),(null as any))),\n      (_l()(),i0.ɵted((null as any),['\\n      '])),(_l()(),i0.ɵeld(0,(null as any),\n          (null as any),1,'button',([] as any[]),(null as any),[[(null as any),'click']],\n          (_v,en,$event) => {\n            var ad:boolean = true;\n            var _co:i1.Search = _v.component;\n            if (('click' === en)) {\n              const pd_0:any = ((<any>_co.search(i0.ɵnov(_v,6).value)) !== false);\n              ad = (pd_0 && ad);\n            }\n            return ad;\n          },(null as any),(null as any))),(_l()(),i0.ɵted((null as any),['Search'])),\n      (_l()(),i0.ɵted((null as any),['\\n      '])),(_l()(),i0.ɵand(16777216,(null as any),\n          (null as any),1,(null as any),View_Search_1)),i0.ɵdid(802816,(null as any),\n          0,i2.NgForOf,[i0.ViewContainerRef,i0.TemplateRef,i0.IterableDiffers],{ngForOf:[0,\n              'ngForOf']},(null as any)),(_l()(),i0.ɵted((null as any),['\\n    '])),\n      (_l()(),i0.ɵted((null as any),['\\n  ']))],(_ck,_v) => {\n    var _co:i1.Search = _v.component;\n    const currVal_0:any = _co.pages;\n    _ck(_v,12,0,currVal_0);\n  },(null as any));\n}\nexport function View_Search_Host_0(_l:any):i0.ɵViewDefinition {\n  return i0.ɵvid(0,[(_l()(),i0.ɵeld(0,(null as any),(null as any),1,'search',([] as any[]),\n      (null as any),(null as any),(null as any),View_Search_0,RenderType_Search)),\n      i0.ɵdid(49152,(null as any),0,i1.Search,[i3.Http],(null as any),(null as any))],\n      (null as any),(null as any));\n}\nexport const SearchNgFactory:i0.ComponentFactory<i1.Search> = i0.ɵccf('search',i1.Search,\n    View_Search_Host_0,{},{},([] as any[]));\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubmdmYWN0b3J5LnRzIiwidmVyc2lvbiI6Mywic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibmc6Ly8vVXNlcnMvbWxhdmFsL2Rldi9naXRodWIvcGxheWdyb3VuZC9vcHRpbWl6ZS1hbmd1bGFyLWFwcC9hcHAvc2VhcmNoL3NlYXJjaC50cyIsIm5nOi8vL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gudHMuU2VhcmNoLmh0bWwiLCJuZzovLy9Vc2Vycy9tbGF2YWwvZGV2L2dpdGh1Yi9wbGF5Z3JvdW5kL29wdGltaXplLWFuZ3VsYXItYXBwL2FwcC9zZWFyY2gvc2VhcmNoLnRzLlNlYXJjaF9Ib3N0Lmh0bWwiXSwic291cmNlc0NvbnRlbnQiOlsiICIsIlxuICAgIDxkaXY+XG4gICAgICA8aDI+U2VhcmNoPC9oMj5cbiAgICAgIDxpbnB1dCB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoIG9uIFdpa2lwZWRpYVwiICNmb28+XG4gICAgICA8YnV0dG9uIChjbGljayk9XCJzZWFyY2goZm9vLnZhbHVlKVwiPlNlYXJjaDwvYnV0dG9uPlxuICAgICAgPGRpdiAqbmdGb3I9XCJsZXQgcGFnZSBvZiBwYWdlc1wiPnt7cGFnZX19PC9kaXY+XG4gICAgPC9kaXY+XG4gICIsIjxzZWFyY2g+PC9zZWFyY2g+Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztvQkNLTTtNQUFBLHdFQUFnQzthQUFBO0lBQUE7SUFBQTs7OztvQkFMdEMsMkNBQ0k7TUFBQTtNQUFBLDhCQUFLLDZDQUNIO2FBQUE7VUFBQSw0Q0FBSTtNQUFBLGFBQVcsNkNBQ2Y7TUFBQTtVQUFBO01BQTBELDZDQUMxRDtVQUFBO1VBQUE7WUFBQTtZQUFBO1lBQVE7Y0FBQTtjQUFBO1lBQUE7WUFBUjtVQUFBLGdDQUFvQztNQUFlLDZDQUNuRDtVQUFBLHFEQUFBO1VBQUE7Y0FBQSwyQkFBOEM7TUFDMUM7O0lBREM7SUFBTCxZQUFLLFNBQUw7Ozs7b0JDTE47TUFBQTthQUFBOzs7OyJ9\n\n\n\n// WEBPACK FOOTER //\n// ./$$_gendir/app/search/search.ngfactory.ts","import {Component} from '@angular/core'\nimport {Http, URLSearchParams, Headers, RequestOptions} from '@angular/http';\nimport {map} from 'rxjs/operator/map';\n\n@Component({\n  selector: 'search',\n  template: `\n    <div>\n      <h2>Search</h2>\n      <input type=\"text\" placeholder=\"Search on Wikipedia\" #foo>\n      <button (click)=\"search(foo.value)\">Search</button>\n      <div *ngFor=\"let page of pages\">{{page}}</div>\n    </div>\n  `\n})\nexport class Search {\n  pages: Array<any> = [];\n\n  constructor(private http: Http) {}\n\n  search(text: string) {\n    if (text && text.length > 0) {\n      let wikiUrl = 'https://en.wikipedia.org/w/api.php';\n\n      let headers = new Headers({\n        'Content-Type': 'application/json'\n      });\n\n      let params = new URLSearchParams();\n      params.set('gapfrom', text);\n      params.set('gaplimit', '10');\n      params.set('generator', 'allpages');\n      params.set('action', 'query');\n      params.set('format', 'json');\n      params.set('origin', '*');\n\n      let options = new RequestOptions({\n        headers: headers,\n        search: params\n      });\n\n      map.call(this.http.get(wikiUrl, options), response => <string[]> response.json())\n        .subscribe(data => {\n          this.pages = [];\n          var raw = data['query']['pages'];\n          for (var key in raw) {\n            this.pages.push(raw[key].title);\n          }\n        });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./app/search/search.ts","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HttpModule, JsonpModule} from '@angular/http';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {Search} from './search';\n\n\nconst routes: Routes = [\n  {path: '', component: Search},\n];\n\n@NgModule({\n  imports: [CommonModule, HttpModule, JsonpModule, RouterModule.forChild(routes)],\n  declarations: [Search]\n})\nexport class SearchModule {}\n\n\n// WEBPACK FOOTER //\n// ./app/search/search.module.ts","/**\n * @fileoverview This file is generated by the Angular template compiler.\n * Do not edit.\n * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}\n */\n /* tslint:disable */\n\n\nimport * as i0 from '@angular/core';\nimport * as i1 from '../../../app/search/search.module';\nimport * as i2 from './search.ngfactory';\nimport * as i3 from '@angular/common';\nimport * as i4 from '@angular/http';\nimport * as i5 from '@angular/router';\nimport * as i6 from '../../../app/search/search';\nexport const SearchModuleNgFactory:i0.NgModuleFactory<i1.SearchModule> = i0.ɵcmf(i1.SearchModule,\n    ([] as any[]),(_l:any) => {\n      return i0.ɵmod([i0.ɵmpd(512,i0.ComponentFactoryResolver,i0.ɵCodegenComponentFactoryResolver,\n          [[8,[i2.SearchNgFactory]],[3,i0.ComponentFactoryResolver],i0.NgModuleRef]),\n          i0.ɵmpd(4608,i3.NgLocalization,i3.NgLocaleLocalization,[i0.LOCALE_ID]),i0.ɵmpd(4608,\n              i4.BrowserXhr,i4.BrowserXhr,([] as any[])),i0.ɵmpd(4608,i4.ResponseOptions,\n              i4.BaseResponseOptions,([] as any[])),i0.ɵmpd(5120,i4.XSRFStrategy,i4.ɵb,\n              ([] as any[])),i0.ɵmpd(4608,i4.XHRBackend,i4.XHRBackend,[i4.BrowserXhr,\n              i4.ResponseOptions,i4.XSRFStrategy]),i0.ɵmpd(4608,i4.RequestOptions,\n              i4.BaseRequestOptions,([] as any[])),i0.ɵmpd(5120,i4.Http,i4.ɵc,[i4.XHRBackend,\n              i4.RequestOptions]),i0.ɵmpd(4608,i4.ɵg,i4.ɵg,([] as any[])),i0.ɵmpd(4608,\n              i4.JSONPBackend,i4.ɵa,[i4.ɵg,i4.ResponseOptions]),i0.ɵmpd(5120,i4.Jsonp,\n              i4.ɵd,[i4.JSONPBackend,i4.RequestOptions]),i0.ɵmpd(512,i3.CommonModule,\n              i3.CommonModule,([] as any[])),i0.ɵmpd(512,i4.HttpModule,i4.HttpModule,\n              ([] as any[])),i0.ɵmpd(512,i4.JsonpModule,i4.JsonpModule,([] as any[])),\n          i0.ɵmpd(512,i5.RouterModule,i5.RouterModule,[[2,i5.ɵa],[2,i5.Router]]),i0.ɵmpd(512,\n              i1.SearchModule,i1.SearchModule,([] as any[])),i0.ɵmpd(1024,i5.ROUTES,\n              () => {\n                return [[{path:'',component:i6.Search}]];\n              },([] as any[]))]);\n    });\n//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubW9kdWxlLm5nZmFjdG9yeS50cyIsInZlcnNpb24iOjMsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5nOi8vL1VzZXJzL21sYXZhbC9kZXYvZ2l0aHViL3BsYXlncm91bmQvb3B0aW1pemUtYW5ndWxhci1hcHAvYXBwL3NlYXJjaC9zZWFyY2gubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIiAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==\n\n\n\n// WEBPACK FOOTER //\n// ./$$_gendir/app/search/search.module.ngfactory.ts"],"sourceRoot":""}