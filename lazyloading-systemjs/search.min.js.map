{"version":3,"sources":["../../app/search/search.module.ts","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/app/search/search.ts.Search.html","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/app/search/search.ts.Search_Host.html","../../node_modules/tslib/tslib.js","../../../../packages/http/src/static_request.ts","../../../../packages/http/src/base_request_options.ts","../../../../packages/http/src/backends/browser_jsonp.ts","../../../../packages/http/src/http_utils.ts","../../../../packages/http/src/interfaces.ts","../../../../packages/http/public_api.ts","../../../../packages/http/src/index.ts","../../../../packages/http/src/version.ts","../../../../packages/http/src/http_module.ts","../../../../packages/http/src/backends/xhr_backend.ts","../../../../packages/http/src/backends/jsonp_backend.ts","../../../../packages/http/src/static_response.ts","../../../../packages/http/src/body.ts","../../../../packages/http/src/url_search_params.ts","../../../../packages/http/src/base_response_options.ts","../../../../packages/http/src/backends/browser_xhr.ts","../../app/search/search.ts"],"names":["routes","path","component","search_1","Search","SearchModule","__decorate","core_1","NgModule","imports","common_1","CommonModule","http_1","HttpModule","JsonpModule","router_1","RouterModule","forChild","declarations","View_Search_0","_l","ɵeld","i0","ɵted","_v","en","$event","pd_0","_co","search","ɵnov","value","ad","ɵand","View_Search_1","ɵdid","i2","NgForOf","ViewContainerRef","TemplateRef","IterableDiffers","ngForOf","_ck","pages","View_Search_Host_0","ɵvid","RenderType_Search","i1","i3","Http","exports_1","styles_Search","SearchNgFactory","setters","i0_1","i1_1","i3_1","__extends","__assign","__rest","__param","__metadata","__awaiter","__generator","__exportStar","__values","__read","__spread","__await","__asyncGenerator","__asyncDelegator","__asyncValues","factory","createExporter","exports","previous","id","v","root","global","self","this","define","amd","m","module","exporter","extendStatics","Object","setPrototypeOf","__proto__","Array","d","b","p","hasOwnProperty","__","constructor","prototype","create","assign","t","s","i","n","arguments","length","call","e","indexOf","getOwnPropertySymbols","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","paramIndex","decorator","metadataKey","metadataValue","metadata","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","body","verb","op","f","TypeError","_","y","label","ops","pop","trys","push","g","sent","throw","return","Symbol","iterator","o","ar","error","concat","a","q","resume","settle","fulfill","shift","asyncIterator","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","getResponseURL","xhr","responseURL","stringToArrayBuffer","input","view","Uint16Array","charCodeAt","paramParser","rawParams","map","Map","params","split","forEach","param","eqIdx","_a","slice","val","list","get","standardEncoding","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","urlEncodeParams","searchParams","URLSearchParams","keys","isArray","element","append","toString","mergeOptions","defaultOpts","providedOpts","url","newOptions","merge","RequestOptions","headers","withCredentials","tslib_1","_nTslibTslibJs","ɵgetDOM","_nAngularPlatformBrowserAngularPlatformBrowserEs5Js","type","Injectable","BrowserXhr","ctorParameters","Patch","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Error","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","_headers","_normalizedNames","Headers","values","name","_this","fromResponseHeaderString","headersString","line","index","trim","getAll","set","lcName","has","toLowerCase","join","from","toJSON","serialized","entries","mayBeSetNormalizedName","ResponseOptions","opts","status","statusText","options","BaseResponseOptions","_super","isSuccess","QueryEncoder","encodeKey","k","paramsMap","clone","delete","setAll","appendAll","replaceAll","paramsList","Body","json","_body","parse","text","encodingHint","String","fromCharCode","Uint8Array","arrayBuffer","blob","Blob","Response","responseOptions","ok","JSONP_HOME","BrowserJsonp","node","nextRequestID","_nextRequestId","connection","send","document","appendChild","parentNode","removeChild","JSONPConnection_","req","_dom","baseResponseOptions","_finished","JSONP_ERR_WRONG_METHOD","readyState","_id","exposeConnection","callback","requestCallback","lastIndexOf","substring","script","_script","build","onLoad","event","cleanup","responseOptions_1","JSONP_ERR_NO_CALLBACK","responseObserver","_responseData","complete","onError","message","addEventListener","removeEventListener","finished","data","removeConnection","ConnectionBackend","JSONPBackend_","createConnection","request","_browserJSONP","_baseResponseOptions","JSONPBackend","XHRConnection","browserXHR","response","Observable","_xhr","open","responseText","getAllResponseHeaders","err","setDetectedContentType","setRequestHeader","responseType","getBody","contentType","_headerName","CookieXSRFStrategy","configureRequest","xsrfToken","getCookie","_cookieName","_xsrfStrategy","XHRBackend","_browserXHR","XSRFStrategy","_mergeSearchParams","_parseParams","objParams","item","_appendParam","stringify","BaseRequestOptions","Request","requestOptions","paramsArg","prefix","detectContentType","detectContentTypeFromBody","FormData","Blob$1","ArrayBuffer$1","noop","responseObservable","httpRequest","_backend","_defaultOptions","Jsonp","args","providers","provide","useFactory","httpFactory","deps","useClass","_createDefaultCookieXSRFStrategy","jsonpFactory","http","wikiUrl","Content-Type","map_1","subscribe","raw","title","Component","selector","template"],"mappings":"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","file":"search.min.js","sourcesContent":["import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HttpModule, JsonpModule} from '@angular/http';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {Search} from './search';\n\n\nconst routes: Routes = [\n  {path: '', component: Search},\n];\n\n@NgModule({\n  imports: [CommonModule, HttpModule, JsonpModule, RouterModule.forChild(routes)],\n  declarations: [Search]\n})\nexport class SearchModule {}","","","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global global, define, System, Reflect, Promise */\r\nvar __extends;\r\nvar __assign;\r\nvar __rest;\r\nvar __decorate;\r\nvar __param;\r\nvar __metadata;\r\nvar __awaiter;\r\nvar __generator;\r\nvar __exportStar;\r\nvar __values;\r\nvar __read;\r\nvar __spread;\r\nvar __await;\r\nvar __asyncGenerator;\r\nvar __asyncDelegator;\r\nvar __asyncValues;\r\n(function (factory) {\r\n    var root = typeof global === \"object\" ? global : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\r\n    if (typeof define === \"function\" && define.amd) {\r\n        define(\"tslib\", [\"exports\"], function (exports) { factory(createExporter(root, createExporter(exports))); });\r\n    }\r\n    else if (typeof module === \"object\" && typeof module.exports === \"object\") {\r\n        factory(createExporter(root, createExporter(module.exports)));\r\n    }\r\n    else {\r\n        factory(createExporter(root));\r\n    }\r\n    function createExporter(exports, previous) {\r\n        return function (id, v) { return exports[id] = previous ? previous(id, v) : v; };\r\n    }\r\n})\r\n(function (exporter) {\r\n    var extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\n    __extends = function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n\r\n    __assign = Object.assign || function (t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n\r\n    __rest = function (s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    };\r\n\r\n    __decorate = function (decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    };\r\n\r\n    __param = function (paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    };\r\n\r\n    __metadata = function (metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    };\r\n\r\n    __awaiter = function (thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    };\r\n\r\n    __generator = function (thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [0, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    };\r\n\r\n    __exportStar = function (m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    };\r\n\r\n    __values = function (o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    };\r\n\r\n    __read = function (o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    };\r\n\r\n    __spread = function () {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    };\r\n\r\n    __await = function (v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    };\r\n\r\n    __asyncGenerator = function (thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    };\r\n\r\n    __asyncDelegator = function (o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n    };\r\n\r\n    __asyncValues = function (o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator];\r\n        return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n    };\r\n\r\n    exporter(\"__extends\", __extends);\r\n    exporter(\"__assign\", __assign);\r\n    exporter(\"__rest\", __rest);\r\n    exporter(\"__decorate\", __decorate);\r\n    exporter(\"__param\", __param);\r\n    exporter(\"__metadata\", __metadata);\r\n    exporter(\"__awaiter\", __awaiter);\r\n    exporter(\"__generator\", __generator);\r\n    exporter(\"__exportStar\", __exportStar);\r\n    exporter(\"__values\", __values);\r\n    exporter(\"__read\", __read);\r\n    exporter(\"__spread\", __spread);\r\n    exporter(\"__await\", __await);\r\n    exporter(\"__asyncGenerator\", __asyncGenerator);\r\n    exporter(\"__asyncDelegator\", __asyncDelegator);\r\n    exporter(\"__asyncValues\", __asyncValues);\r\n});","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * \\@experimental\n */\nexport class Request extends Body {\n/**\n * Http method with which to perform the request.\n */\nmethod: RequestMethod;\n/**\n * {\\@link Headers} instance\n */\nheaders: Headers;\n/**\n * Url of the remote resource\n */\nurl: string;\n/**\n * Type of the request body *\n */\nprivate contentType: ContentType;\n/**\n * Enable use credentials\n */\nwithCredentials: boolean;\n/**\n * Buffer to store the response\n */\nresponseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url !;\n    const paramsArg = requestOptions.params || requestOptions.search;\n    if (paramsArg) {\n      let params: string;\n      if (typeof paramsArg === 'object' && !(paramsArg instanceof URLSearchParams)) {\n        params = urlEncodeParams(paramsArg).toString();\n      } else {\n        params = paramsArg.toString();\n      }\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method !);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials !;\n    this.responseType = requestOptions.responseType !;\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n/**\n * @param {?} params\n * @return {?}\n */\nfunction urlEncodeParams(params: {[key: string]: any}): URLSearchParams {\n  const /** @type {?} */ searchParams = new URLSearchParams();\n  Object.keys(params).forEach(key => {\n    const /** @type {?} */ value = params[key];\n    if (value && Array.isArray(value)) {\n      value.forEach(element => searchParams.append(key, element.toString()));\n    } else {\n      searchParams.append(key, value.toString());\n    }\n  });\n  return searchParams;\n}\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer: ArrayBufferConstructor =\n    ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * const req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n */\nmethod: RequestMethod|string|null;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n */\nheaders: Headers|null;\n/**\n * Body to be used when creating a {\\@link Request}.\n */\nbody: any;\n/**\n * Url with which to perform a {\\@link Request}.\n */\nurl: string|null;\n/**\n * Search parameters to be included in a {\\@link Request}.\n */\nparams: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n/**\n * Enable use credentials for a {\\@link Request}.\n */\nwithCredentials: boolean|null;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: RequestOptionsArgs = {}) {\n    const {method, headers, body, url, search, params, withCredentials, responseType} = opts;\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * const req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?=} params\n * @return {?}\n */\nprivate _mergeSearchParams(params?: string|URLSearchParams|{[key: string]: any | any[]}|\n                             null): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ```typescript\n * import {BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * {provide: RequestOptions, useClass: MyOptions};\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * const options = new BaseRequestOptions();\n * const req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any}|null = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string|null {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer8(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint8Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Abstract class from which real backends are derived.\n * \n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class ConnectionBackend {\n/**\n * @abstract\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: any) {} }\n/**\n * Abstract class from which real connections are derived.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class Connection {\n  readyState: ReadyState;\n  request: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\nfunction Connection_tsickle_Closure_declarations() {\n/** @type {?} */\nConnection.prototype.readyState;\n/** @type {?} */\nConnection.prototype.request;\n/** @type {?} */\nConnection.prototype.response;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class XSRFStrategy {\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request) {} }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface RequestOptionsArgs {\n  url?: string|null;\n  method?: string|RequestMethod|null;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  params?: string|URLSearchParams|{[key: string]: any | any[]}|null;\n  headers?: Headers|null;\n  body?: any;\n  withCredentials?: boolean|null;\n  responseType?: ResponseContentType|null;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string|null; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob|null;\n  status?: number|null;\n  statusText?: string|null;\n  headers?: Headers|null;\n  type?: ResponseType|null;\n  url?: string|null;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\nexport {BrowserXhr,JSONPBackend,JSONPConnection,CookieXSRFStrategy,XHRBackend,XHRConnection,BaseRequestOptions,RequestOptions,BaseResponseOptions,ResponseOptions,ReadyState,RequestMethod,ResponseContentType,ResponseType,Headers,Http,Jsonp,HttpModule,JsonpModule,Connection,ConnectionBackend,RequestOptionsArgs,ResponseOptionsArgs,XSRFStrategy,Request,Response,QueryEncoder,URLSearchParams,VERSION} from './src/index';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {BrowserXhr} from './backends/browser_xhr';\nexport {JSONPBackend, JSONPConnection} from './backends/jsonp_backend';\nexport {CookieXSRFStrategy, XHRBackend, XHRConnection} from './backends/xhr_backend';\nexport {BaseRequestOptions, RequestOptions} from './base_request_options';\nexport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nexport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nexport {Headers} from './headers';\nexport {Http, Jsonp} from './http';\nexport {HttpModule, JsonpModule} from './http_module';\nexport {Connection, ConnectionBackend, RequestOptionsArgs, ResponseOptionsArgs, XSRFStrategy} from './interfaces';\nexport {Request} from './static_request';\nexport {Response} from './static_response';\nexport {QueryEncoder, URLSearchParams} from './url_search_params';\nexport {VERSION} from './version';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const VERSION = new Version('4.2.4');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n/**\n * @return {?}\n */\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n * \n * \\@experimental\n */\nexport class HttpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpModule.ctorParameters;\n}\n\n/**\n * The module that includes jsonp's providers\n * \n * \\@experimental\n */\nexport class JsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n */\nresponse: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name !, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPConnection implements Connection {\n/**\n * The {\\@link ReadyState} of this request.\n */\nreadyState: ReadyState;\n/**\n * The outgoing HTTP request.\n */\nrequest: Request;\n/**\n * An observable that completes with the response, when the request is finished.\n */\nresponse: Observable<Response>;\n/**\n * Callback called when the JSONP request completes, to notify the application\n * of the new data.\n * @abstract\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {}\n}\n\nfunction JSONPConnection_tsickle_Closure_declarations() {\n/**\n * The {\\@link ReadyState} of this request.\n * @type {?}\n */\nJSONPConnection.prototype.readyState;\n/**\n * The outgoing HTTP request.\n * @type {?}\n */\nJSONPConnection.prototype.request;\n/**\n * An observable that completes with the response, when the request is finished.\n * @type {?}\n */\nJSONPConnection.prototype.response;\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\nprivate _id: string;\nprivate _script: Element;\nprivate _responseData: any;\nprivate _finished: boolean = false;\n/**\n * @param {?} req\n * @param {?} _dom\n * @param {?=} baseResponseOptions\n */\nconstructor(\n      req: Request,\nprivate _dom: BrowserJsonp,\nprivate baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\nfunction JSONPConnection__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPConnection_.prototype._id;\n/** @type {?} */\nJSONPConnection_.prototype._script;\n/** @type {?} */\nJSONPConnection_.prototype._responseData;\n/** @type {?} */\nJSONPConnection_.prototype._finished;\n/** @type {?} */\nJSONPConnection_.prototype._dom;\n/** @type {?} */\nJSONPConnection_.prototype.baseResponseOptions;\n}\n\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\nexport class JSONPBackend_ extends JSONPBackend {\n/**\n * @param {?} _browserJSONP\n * @param {?} _baseResponseOptions\n */\nconstructor(private _browserJSONP: BrowserJsonp,\nprivate _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\nfunction JSONPBackend__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPBackend_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONPBackend_.ctorParameters;\n/** @type {?} */\nJSONPBackend_.prototype._browserJSONP;\n/** @type {?} */\nJSONPBackend_.prototype._baseResponseOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n/**\n * Creates `Response` instances from provided values.\n * \n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n * \n * ### Example\n * \n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n * \n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n * \n * \\@experimental\n */\nexport class Response extends Body {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n */\ntype: ResponseType;\n/**\n * True if the response's status is within 200-299\n */\nok: boolean;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n */\nurl: string;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n */\nstatus: number;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n */\nstatusText: string|null;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n */\nbytesLoaded: number;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n */\ntotalBytes: number;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n */\nheaders: Headers|null;\n/**\n * @param {?} responseOptions\n */\nconstructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status !;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type !;\n    this.url = responseOptions.url !;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\nfunction Response_tsickle_Closure_declarations() {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n * @type {?}\n */\nResponse.prototype.type;\n/**\n * True if the response's status is within 200-299\n * @type {?}\n */\nResponse.prototype.ok;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n * @type {?}\n */\nResponse.prototype.url;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n * @type {?}\n */\nResponse.prototype.status;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n * @type {?}\n */\nResponse.prototype.statusText;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n * @type {?}\n */\nResponse.prototype.bytesLoaded;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n * @type {?}\n */\nResponse.prototype.totalBytes;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n * @type {?}\n */\nResponse.prototype.headers;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nexport abstract class Body {\n/**\n * \\@internal\n */\nprotected _body: any;\n/**\n * Attempts to return body as parsed `JSON` object, or raises an exception.\n * @return {?}\n */\njson(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */((<string>this._body)));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n/**\n * Returns the body as a string, presuming `toString()` can be called on the response body.\n * \n * When decoding an `ArrayBuffer`, the optional `encodingHint` parameter determines how the\n * bytes in the buffer will be interpreted. Valid values are:\n * \n * - `legacy` - incorrectly interpret the bytes as UTF-16 (technically, UCS-2). Only characters\n *   in the Basic Multilingual Plane are supported, surrogate pairs are not handled correctly.\n *   In addition, the endianness of the 16-bit octet pairs in the `ArrayBuffer` is not taken\n *   into consideration. This is the default behavior to avoid breaking apps, but should be\n *   considered deprecated.\n * \n * - `iso-8859` - interpret the bytes as ISO-8859 (which can be used for ASCII encoded text).\n * @param {?=} encodingHint\n * @return {?}\n */\ntext(encodingHint: 'legacy'|'iso-8859' = 'legacy'): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      switch (encodingHint) {\n        case 'legacy':\n          return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */((this._body as ArrayBuffer))));\n        case 'iso-8859':\n          return String.fromCharCode.apply(null, new Uint8Array( /** @type {?} */((this._body as ArrayBuffer))));\n        default:\n          throw new Error(`Invalid value for encodingHint: ${encodingHint}`);\n      }\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n/**\n * Return the body as an ArrayBuffer\n * @return {?}\n */\narrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return /** @type {?} */(( <ArrayBuffer>this._body));\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n/**\n * Returns the request's body as a Blob, assuming that body exists.\n * @return {?}\n */\nblob(): Blob {\n    if (this._body instanceof Blob) {\n      return /** @type {?} */(( <Blob>this._body));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\nfunction Body_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nBody.prototype._body;\n}\n\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string|null {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * \\@experimental\n */\nexport class ResponseOptions {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n */\nbody: string|Object|ArrayBuffer|Blob|null;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n */\nstatus: number|null;\n/**\n * Response {\\@link Headers headers}\n */\nheaders: Headers|null;\n/**\n * \\@internal\n */\nstatusText: string|null;\n/**\n * \\@internal\n */\ntype: ResponseType|null;\n  url: string|null;\n/**\n * @param {?=} opts\n */\nconstructor(opts: ResponseOptionsArgs = {}) {\n    const {body, status, headers, statusText, type, url} = opts;\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * \\@experimental\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n * \n * Take care not to evaluate this in non-browser contexts.\n * \n * \\@experimental\n */\nexport class BrowserXhr {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core'\nimport {Http, URLSearchParams, Headers, RequestOptions} from '@angular/http';\nimport {map} from 'rxjs/operator/map';\n\n@Component({\n  selector: 'search',\n  template: `\n    <div>\n      <h2>Search</h2>\n      <input type=\"text\" placeholder=\"Search on Wikipedia\" #foo>\n      <button (click)=\"search(foo.value)\">Search</button>\n      <div *ngFor=\"let page of pages\">{{page}}</div>\n    </div>\n  `\n})\nexport class Search {\n  pages: Array<any> = [];\n\n  constructor(private http: Http) {}\n\n  search(text: string) {\n    if (text && text.length > 0) {\n      let wikiUrl = 'https://en.wikipedia.org/w/api.php';\n\n      let headers = new Headers({\n        'Content-Type': 'application/json'\n      });\n\n      let params = new URLSearchParams();\n      params.set('gapfrom', text);\n      params.set('gaplimit', '10');\n      params.set('generator', 'allpages');\n      params.set('action', 'query');\n      params.set('format', 'json');\n      params.set('origin', '*');\n\n      let options = new RequestOptions({\n        headers: headers,\n        search: params\n      });\n\n      map.call(this.http.get(wikiUrl, options), response => <string[]> response.json())\n        .subscribe(data => {\n          this.pages = [];\n          var raw = data['query']['pages'];\n          for (var key in raw) {\n            this.pages.push(raw[key].title);\n          }\n        });\n    }\n  }\n\n}\n"]}