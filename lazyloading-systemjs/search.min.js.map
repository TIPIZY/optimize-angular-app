{"version":3,"sources":["../../app/search/search.module.ts","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/app/search/search.ts.Search.html","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/app/search/search.ts.Search_Host.html","../../../../packages/http/src/static_request.ts","../../../../packages/http/src/base_request_options.ts","../../../../packages/http/src/backends/browser_jsonp.ts","../../../../packages/http/src/interfaces.ts","../../../../packages/http/public_api.ts","../../../../packages/http/src/index.ts","../../../../packages/http/src/version.ts","../../../../packages/http/src/http_module.ts","../../../../packages/http/src/backends/xhr_backend.ts","../../../../packages/http/src/backends/jsonp_backend.ts","../../../../packages/http/src/static_response.ts","../../../../packages/http/src/body.ts","../../../../packages/http/src/url_search_params.ts","../../../../packages/http/src/http_utils.ts","../../../../packages/http/src/base_response_options.ts","../../../../packages/http/src/backends/browser_xhr.ts","../../app/search/search.ts"],"names":["routes","path","component","search_1","Search","SearchModule","__decorate","core_1","NgModule","imports","common_1","CommonModule","http_1","HttpModule","JsonpModule","router_1","RouterModule","forChild","declarations","View_Search_0","l","import0","ɵeld","ɵted","v","en","$event","ad","ɵand","View_Search_1","ɵdid","import2","NgForOf","ViewContainerRef","TemplateRef","IterableDiffers","ngForOf","ck","pages","RenderType_Search","import1","import3","Http","styles_Search","SearchNgFactory","import1_1","import3_1","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","getResponseURL","xhr","responseURL","stringToArrayBuffer","input","view","Uint16Array","length","i","charCodeAt","paramParser","rawParams","map","Map","params","split","forEach","param","eqIdx","indexOf","_a","slice","key","val","list","get","push","standardEncoding","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","mergeOptions","defaultOpts","providedOpts","url","newOptions","merge","RequestOptions","search","headers","body","withCredentials","ɵgetDOM","_nAngularPlatformBrowserAngularPlatformBrowserEs5Js","type","Injectable","BrowserXhr","ctorParameters","Patch","ReadyState","Unsent","Open","HeadersReceived","Loading","Done","Cancelled","ResponseType","Basic","Cors","Default","Error","Opaque","ContentType","NONE","JSON","FORM","FORM_DATA","TEXT","BLOB","ARRAY_BUFFER","ResponseContentType","Text","Json","ArrayBuffer","this","_headers","_normalizedNames","Headers","values","name","value","_this","append","Object","keys","fromResponseHeaderString","headersString","line","index","trim","prototype","getAll","set","lcName","has","toLowerCase","Array","isArray","join","from","toJSON","serialized","entries","mayBeSetNormalizedName","ResponseOptions","_b","status","statusText","options","BaseResponseOptions","_super","call","__extends","isSuccess","QueryEncoder","encodeKey","k","paramsMap","clone","URLSearchParams","delete","setAll","searchParams","appendAll","replaceAll","toString","paramsList","Body","json","_body","parse","text","String","fromCharCode","apply","arrayBuffer","blob","Blob","Response","responseOptions","ok","JSONP_HOME","BrowserJsonp","node","nextRequestID","_nextRequestId","connection","send","document","appendChild","parentNode","removeChild","JSONPConnection_","req","_dom","baseResponseOptions","_finished","TypeError","JSONP_ERR_WRONG_METHOD","readyState","id","_id","exposeConnection","callback","requestCallback","lastIndexOf","substring","script","_script","build","onLoad","event","cleanup","responseOptions_1","JSONP_ERR_NO_CALLBACK","responseObserver","error","_responseData","next","complete","onError","message","addEventListener","removeEventListener","finished","data","removeConnection","ConnectionBackend","JSONPBackend_","createConnection","request","_browserJSONP","_baseResponseOptions","JSONPBackend","XHRConnection","browserXHR","response","Observable","_xhr","open","responseText","getAllResponseHeaders","err","setDetectedContentType","setRequestHeader","responseType","getBody","contentType","_headerName","CookieXSRFStrategy","configureRequest","xsrfToken","getCookie","_cookieName","_xsrfStrategy","XHRBackend","_browserXHR","XSRFStrategy","_mergeSearchParams","_parseParams","objParams","item","_appendParam","stringify","BaseRequestOptions","Request","requestOptions","prefix","detectContentType","detectContentTypeFromBody","FormData","Blob$1","ArrayBuffer$1","noop","responseObservable","httpRequest","_backend","_defaultOptions","Jsonp","decorators","args","providers","provide","useFactory","httpFactory","deps","useClass","_createDefaultCookieXSRFStrategy","jsonpFactory","http","wikiUrl","Content-Type","map_1","subscribe","raw","title","Component","selector","template","__metadata"],"mappings":"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","file":"search.min.js","sourcesContent":["import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {HttpModule, JsonpModule} from '@angular/http';\nimport {Routes, RouterModule} from '@angular/router';\n\nimport {Search} from './search';\n\n\nconst routes: Routes = [\n  {path: '', component: Search},\n];\n\n@NgModule({\n  imports: [CommonModule, HttpModule, JsonpModule, RouterModule.forChild(routes)],\n  declarations: [Search]\n})\nexport class SearchModule {}","","","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Body} from './body';\nimport {ContentType, RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates `Request` instances from provided values.\n * \n * The Request's interface is inspired by the Request constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#request-class),\n * but is considered a static value whose body can be accessed many times. There are other\n * differences in the implementation, but this is the most significant.\n * \n * `Request` instances are typically created by higher-level classes, like {\\@link Http} and\n * {\\@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n * One such example is when creating services that wrap higher-level services, like {\\@link Http},\n * where it may be useful to generate a `Request` with arbitrary headers and search params.\n * \n * ```typescript\n * import {Injectable, Injector} from '\\@angular/core';\n * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '\\@angular/http';\n * \n * \\@Injectable() \n * class AutoAuthenticator {\n *   constructor(public http:Http) {}\n *   request(url:string) {\n *     return this.http.request(new Request({\n *       method: RequestMethod.Get,\n *       url: url,\n *       search: 'password=123'\n *     }));\n *   }\n * }\n * \n * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n * var authenticator = injector.get(AutoAuthenticator);\n * authenticator.request('people.json').subscribe(res => {\n *   //URL should have included '?password=123'\n *   console.log('people', res.json());\n * });\n * ```\n * \n * \\@experimental\n */\nexport class Request extends Body {\n  /**\n   * Http method with which to perform the request.\n   */\n  method: RequestMethod;\n  /**\n   * {@link Headers} instance\n   */\n  headers: Headers;\n  /** Url of the remote resource */\n  url: string;\nprivate contentType: ContentType;\n  /** Enable use credentials */\n  withCredentials: boolean;\n  /** Buffer to store the response */\n  responseType: ResponseContentType;\n/**\n * @param {?} requestOptions\n */\nconstructor(requestOptions: RequestArgs) {\n    super();\n    // TODO: assert that url is present\n    const url = requestOptions.url;\n    this.url = requestOptions.url;\n    if (requestOptions.params) {\n      const params = requestOptions.params.toString();\n      if (params.length > 0) {\n        let prefix = '?';\n        if (this.url.indexOf('?') != -1) {\n          prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n        }\n        // TODO: just delete search-query-looking string in url?\n        this.url = url + prefix + params;\n      }\n    }\n    this._body = requestOptions.body;\n    this.method = normalizeMethodName(requestOptions.method);\n    // TODO(jeffbcross): implement behavior\n    // Defaults to 'omit', consistent with browser\n    this.headers = new Headers(requestOptions.headers);\n    this.contentType = this.detectContentType();\n    this.withCredentials = requestOptions.withCredentials;\n    this.responseType = requestOptions.responseType;\n  }\n/**\n * Returns the content type enum based on header options.\n * @return {?}\n */\ndetectContentType(): ContentType {\n    switch (this.headers.get('content-type')) {\n      case 'application/json':\n        return ContentType.JSON;\n      case 'application/x-www-form-urlencoded':\n        return ContentType.FORM;\n      case 'multipart/form-data':\n        return ContentType.FORM_DATA;\n      case 'text/plain':\n      case 'text/html':\n        return ContentType.TEXT;\n      case 'application/octet-stream':\n        return this._body instanceof ArrayBuffer ? ContentType.ARRAY_BUFFER : ContentType.BLOB;\n      default:\n        return this.detectContentTypeFromBody();\n    }\n  }\n/**\n * Returns the content type of request's body based on its type.\n * @return {?}\n */\ndetectContentTypeFromBody(): ContentType {\n    if (this._body == null) {\n      return ContentType.NONE;\n    } else if (this._body instanceof URLSearchParams) {\n      return ContentType.FORM;\n    } else if (this._body instanceof FormData) {\n      return ContentType.FORM_DATA;\n    } else if (this._body instanceof Blob) {\n      return ContentType.BLOB;\n    } else if (this._body instanceof ArrayBuffer) {\n      return ContentType.ARRAY_BUFFER;\n    } else if (this._body && typeof this._body === 'object') {\n      return ContentType.JSON;\n    } else {\n      return ContentType.TEXT;\n    }\n  }\n/**\n * Returns the request's body according to its type. If body is undefined, return\n * null.\n * @return {?}\n */\ngetBody(): any {\n    switch (this.contentType) {\n      case ContentType.JSON:\n        return this.text();\n      case ContentType.FORM:\n        return this.text();\n      case ContentType.FORM_DATA:\n        return this._body;\n      case ContentType.TEXT:\n        return this.text();\n      case ContentType.BLOB:\n        return this.blob();\n      case ContentType.ARRAY_BUFFER:\n        return this.arrayBuffer();\n      default:\n        return null;\n    }\n  }\n}\n\nfunction Request_tsickle_Closure_declarations() {\n/**\n * Http method with which to perform the request.\n * @type {?}\n */\nRequest.prototype.method;\n/**\n * {\\@link Headers} instance\n * @type {?}\n */\nRequest.prototype.headers;\n/**\n * Url of the remote resource\n * @type {?}\n */\nRequest.prototype.url;\n/**\n * Type of the request body *\n * @type {?}\n */\nRequest.prototype.contentType;\n/**\n * Enable use credentials\n * @type {?}\n */\nRequest.prototype.withCredentials;\n/**\n * Buffer to store the response\n * @type {?}\n */\nRequest.prototype.responseType;\n}\n\n\nconst /** @type {?} */ noop = function() {};\nconst /** @type {?} */ w = typeof window == 'object' ? window : noop;\nconst /** @type {?} */ FormData = ( /** @type {?} */((w as any)) /** TODO #9100 */)['FormData'] || noop;\nconst /** @type {?} */ Blob = ( /** @type {?} */((w as any)) /** TODO #9100 */)['Blob'] || noop;\nexport const /** @type {?} */ ArrayBuffer = ( /** @type {?} */((w as any)) /** TODO #9100 */)['ArrayBuffer'] || noop;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {RequestMethod, ResponseContentType} from './enums';\nimport {Headers} from './headers';\nimport {normalizeMethodName} from './http_utils';\nimport {RequestOptionsArgs} from './interfaces';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Creates a request options object to be optionally provided when instantiating a\n * {\\@link Request}.\n * \n * This class is based on the `RequestInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#requestinit).\n * \n * All values are null by default. Typical defaults can be found in the {\\@link BaseRequestOptions}\n * class, which sub-classes `RequestOptions`.\n * \n * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new RequestOptions({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * });\n * var req = new Request(options);\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class RequestOptions {\n  /**\n   * Http method with which to execute a {@link Request}.\n   * Acceptable methods are defined in the {@link RequestMethod} enum.\n   */\n  method: RequestMethod|string;\n  /**\n   * {@link Headers} to be attached to a {@link Request}.\n   */\n  headers: Headers;\n  /**\n   * Body to be used when creating a {@link Request}.\n   */\n  body: any;\n  /**\n   * Url with which to perform a {@link Request}.\n   */\n  url: string;\n  /**\n   * Search parameters to be included in a {@link Request}.\n   */\n  params: URLSearchParams;\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @return {?}\n */\nget search(): URLSearchParams { return this.params; }\n/**\n * @deprecated from 4.0.0. Use params instead.\n * @param {?} params\n * @return {?}\n */\nset search(params: URLSearchParams) { this.params = params; }\n  /**\n   * Enable use credentials for a {@link Request}.\n   */\n  withCredentials: boolean;\n  /*\n   * Select a buffer to store the response, such as ArrayBuffer, Blob, Json (or Document)\n   */\n  responseType: ResponseContentType;\n/**\n * @param {?=} __0\n */\nconstructor(\n      {method, headers, body, url, search, params, withCredentials,\n       responseType}: RequestOptionsArgs = {}) {\n    this.method = method != null ? normalizeMethodName(method) : null;\n    this.headers = headers != null ? headers : null;\n    this.body = body != null ? body : null;\n    this.url = url != null ? url : null;\n    this.params = this._mergeSearchParams(params || search);\n    this.withCredentials = withCredentials != null ? withCredentials : null;\n    this.responseType = responseType != null ? responseType : null;\n  }\n/**\n * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * Note that `headers` and `search` will override existing values completely if present in\n * the `options` object. If these values should be merged, it should be done prior to calling\n * `merge` on the `RequestOptions` instance.\n * \n * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n * \n * ```typescript\n * import {RequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new RequestOptions({\n *   method: RequestMethod.Post\n * });\n * var req = new Request(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: RequestOptionsArgs): RequestOptions {\n    return new RequestOptions({\n      method: options && options.method != null ? options.method : this.method,\n      headers: options && options.headers != null ? options.headers : new Headers(this.headers),\n      body: options && options.body != null ? options.body : this.body,\n      url: options && options.url != null ? options.url : this.url,\n      params: options && this._mergeSearchParams(options.params || options.search),\n      withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                                                                    this.withCredentials,\n      responseType: options && options.responseType != null ? options.responseType :\n                                                              this.responseType\n    });\n  }\n/**\n * @param {?} params\n * @return {?}\n */\nprivate _mergeSearchParams(params: string|URLSearchParams|\n                             {[key: string]: any | any[]}): URLSearchParams {\n    if (!params) return this.params;\n\n    if (params instanceof URLSearchParams) {\n      return params.clone();\n    }\n\n    if (typeof params === 'string') {\n      return new URLSearchParams(params);\n    }\n\n    return this._parseParams(params);\n  }\n/**\n * @param {?=} objParams\n * @return {?}\n */\nprivate _parseParams(objParams: {[key: string]: any | any[]} = {}): URLSearchParams {\n    const /** @type {?} */ params = new URLSearchParams();\n    Object.keys(objParams).forEach((key: string) => {\n      const /** @type {?} */ value: any|any[] = objParams[key];\n      if (Array.isArray(value)) {\n        value.forEach((item: any) => this._appendParam(key, item, params));\n      } else {\n        this._appendParam(key, value, params);\n      }\n    });\n    return params;\n  }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} params\n * @return {?}\n */\nprivate _appendParam(key: string, value: any, params: URLSearchParams): void {\n    if (typeof value !== 'string') {\n      value = JSON.stringify(value);\n    }\n    params.append(key, value);\n  }\n}\n\nfunction RequestOptions_tsickle_Closure_declarations() {\n/**\n * Http method with which to execute a {\\@link Request}.\n * Acceptable methods are defined in the {\\@link RequestMethod} enum.\n * @type {?}\n */\nRequestOptions.prototype.method;\n/**\n * {\\@link Headers} to be attached to a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.headers;\n/**\n * Body to be used when creating a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.body;\n/**\n * Url with which to perform a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.url;\n/**\n * Search parameters to be included in a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.params;\n/**\n * Enable use credentials for a {\\@link Request}.\n * @type {?}\n */\nRequestOptions.prototype.withCredentials;\n/** @type {?} */\nRequestOptions.prototype.responseType;\n}\n\n/**\n * Subclass of {\\@link RequestOptions}, with default values.\n * \n * Default values:\n *  * method: {\\@link RequestMethod RequestMethod.Get}\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link RequestOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create and send {\\@link Request Requests}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseRequestOptions {\n *   search: string = 'coreTeam=true';\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Request}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n * \n * ```\n * import {BaseRequestOptions, Request, RequestMethod} from '\\@angular/http';\n * \n * var options = new BaseRequestOptions();\n * var req = new Request(options.merge({\n *   method: RequestMethod.Post,\n *   url: 'https://google.com'\n * }));\n * console.log('req.method:', RequestMethod[req.method]); // Post\n * console.log('options.url:', options.url); // null\n * console.log('req.url:', req.url); // https://google.com\n * ```\n * \n * \\@experimental\n */\nexport class BaseRequestOptions extends RequestOptions {\nconstructor() { super({method: RequestMethod.Get, headers: new Headers()}); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseRequestOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseRequestOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseRequestOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nlet /** @type {?} */ _nextRequestId = 0;\nexport const /** @type {?} */ JSONP_HOME = '__ng_jsonp__';\nlet /** @type {?} */ _jsonpConnections: {[key: string]: any} = null;\n/**\n * @return {?}\n */\nfunction _getJsonpConnections(): {[key: string]: any} {\n  const /** @type {?} */ w: {[key: string]: any} = typeof window == 'object' ? window : {};\n  if (_jsonpConnections === null) {\n    _jsonpConnections = w[JSONP_HOME] = {};\n  }\n  return _jsonpConnections;\n}\nexport class BrowserJsonp {\n/**\n * @param {?} url\n * @return {?}\n */\nbuild(url: string): any {\n    const /** @type {?} */ node = document.createElement('script');\n    node.src = url;\n    return node;\n  }\n/**\n * @return {?}\n */\nnextRequestID(): string { return `__req${_nextRequestId++}`; }\n/**\n * @param {?} id\n * @return {?}\n */\nrequestCallback(id: string): string { return `${JSONP_HOME}.${id}.finished`; }\n/**\n * @param {?} id\n * @param {?} connection\n * @return {?}\n */\nexposeConnection(id: string, connection: any) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = connection;\n  }\n/**\n * @param {?} id\n * @return {?}\n */\nremoveConnection(id: string) {\n    const /** @type {?} */ connections = _getJsonpConnections();\n    connections[id] = null;\n  }\n/**\n * @param {?} node\n * @return {?}\n */\nsend(node: any) { document.body.appendChild( /** @type {?} */((<Node>(node)))); }\n/**\n * @param {?} node\n * @return {?}\n */\ncleanup(node: any) {\n    if (node.parentNode) {\n      node.parentNode.removeChild( /** @type {?} */((<Node>(node))));\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserJsonp_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserJsonp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserJsonp.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {Request} from './static_request';\nimport {URLSearchParams} from './url_search_params';\n/**\n * Abstract class from which real backends are derived.\n * \n * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n * {\\@link Request}.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class ConnectionBackend {\n/**\n * @abstract\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: any) {} }\n/**\n * Abstract class from which real connections are derived.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class Connection {\n  readyState: ReadyState;\n  request: Request;\n  response: any;  // TODO: generic of <Response>;\n}\n\nfunction Connection_tsickle_Closure_declarations() {\n/** @type {?} */\nConnection.prototype.readyState;\n/** @type {?} */\nConnection.prototype.request;\n/** @type {?} */\nConnection.prototype.response;\n}\n\n/**\n * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class XSRFStrategy {\n/**\n * @abstract\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request) {} }\n\n/**\n * Interface for options to construct a RequestOptions, based on\n * [RequestInit](https://fetch.spec.whatwg.org/#requestinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface RequestOptionsArgs {\n  url?: string;\n  method?: string|RequestMethod;\n  /** @deprecated from 4.0.0. Use params instead. */\n  search?: string|URLSearchParams|{[key: string]: any | any[]};\n  params?: string|URLSearchParams|{[key: string]: any | any[]};\n  headers?: Headers;\n  body?: any;\n  withCredentials?: boolean;\n  responseType?: ResponseContentType;\n}\n\n/**\n * Required structure when constructing new Request();\n */\nexport interface RequestArgs extends RequestOptionsArgs { url: string; }\n\n/**\n * Interface for options to construct a Response, based on\n * [ResponseInit](https://fetch.spec.whatwg.org/#responseinit) from the Fetch spec.\n *\n * @experimental\n */\nexport interface ResponseOptionsArgs {\n  body?: string|Object|FormData|ArrayBuffer|Blob;\n  status?: number;\n  statusText?: string;\n  headers?: Headers;\n  type?: ResponseType;\n  url?: string;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the http package.\n */\nexport {BrowserXhr,JSONPBackend,JSONPConnection,CookieXSRFStrategy,XHRBackend,XHRConnection,BaseRequestOptions,RequestOptions,BaseResponseOptions,ResponseOptions,ReadyState,RequestMethod,ResponseContentType,ResponseType,Headers,Http,Jsonp,HttpModule,JsonpModule,Connection,ConnectionBackend,RequestOptionsArgs,ResponseOptionsArgs,XSRFStrategy,Request,Response,QueryEncoder,URLSearchParams,VERSION} from './src/index';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {BrowserXhr} from './backends/browser_xhr';\nexport {JSONPBackend, JSONPConnection} from './backends/jsonp_backend';\nexport {CookieXSRFStrategy, XHRBackend, XHRConnection} from './backends/xhr_backend';\nexport {BaseRequestOptions, RequestOptions} from './base_request_options';\nexport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nexport {ReadyState, RequestMethod, ResponseContentType, ResponseType} from './enums';\nexport {Headers} from './headers';\nexport {Http, Jsonp} from './http';\nexport {HttpModule, JsonpModule} from './http_module';\nexport {Connection, ConnectionBackend, RequestOptionsArgs, ResponseOptionsArgs, XSRFStrategy} from './interfaces';\nexport {Request} from './static_request';\nexport {Response} from './static_response';\nexport {QueryEncoder, URLSearchParams} from './url_search_params';\nexport {VERSION} from './version';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\n\nimport {Version} from '@angular/core';\n/**\n * \\@stable\n */\nexport const VERSION = new Version('4.0.0');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * The http module provides services to perform http requests. To get started, see the {@link Http}\n * class.\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {BrowserJsonp} from './backends/browser_jsonp';\nimport {BrowserXhr} from './backends/browser_xhr';\nimport {JSONPBackend, JSONPBackend_} from './backends/jsonp_backend';\nimport {CookieXSRFStrategy, XHRBackend} from './backends/xhr_backend';\nimport {BaseRequestOptions, RequestOptions} from './base_request_options';\nimport {BaseResponseOptions, ResponseOptions} from './base_response_options';\nimport {Http, Jsonp} from './http';\nimport {XSRFStrategy} from './interfaces';\n/**\n * @return {?}\n */\nexport function _createDefaultCookieXSRFStrategy() {\n  return new CookieXSRFStrategy();\n}\n/**\n * @param {?} xhrBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions): Http {\n  return new Http(xhrBackend, requestOptions);\n}\n/**\n * @param {?} jsonpBackend\n * @param {?} requestOptions\n * @return {?}\n */\nexport function jsonpFactory(jsonpBackend: JSONPBackend, requestOptions: RequestOptions): Jsonp {\n  return new Jsonp(jsonpBackend, requestOptions);\n}\n/**\n * The module that includes http's providers\n * \n * \\@experimental\n */\nexport class HttpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions]},\n    BrowserXhr,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    XHRBackend,\n    {provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction HttpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nHttpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nHttpModule.ctorParameters;\n}\n\n/**\n * The module that includes jsonp's providers\n * \n * \\@experimental\n */\nexport class JsonpModule {\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n  providers: [\n    // TODO(pascal): use factory type annotations once supported in DI\n    // issue: https://github.com/angular/angular/issues/3183\n    {provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions]},\n    BrowserJsonp,\n    {provide: RequestOptions, useClass: BaseRequestOptions},\n    {provide: ResponseOptions, useClass: BaseResponseOptions},\n    {provide: JSONPBackend, useClass: JSONPBackend_},\n  ],\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction JsonpModule_tsickle_Closure_declarations() {\n/** @type {?} */\nJsonpModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJsonpModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {ɵgetDOM as getDOM} from '@angular/platform-browser';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {ResponseOptions} from '../base_response_options';\nimport {ContentType, ReadyState, RequestMethod, ResponseContentType, ResponseType} from '../enums';\nimport {Headers} from '../headers';\nimport {getResponseURL, isSuccess} from '../http_utils';\nimport {Connection, ConnectionBackend, XSRFStrategy} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\nimport {BrowserXhr} from './browser_xhr';\n\nconst /** @type {?} */ XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n * request.\n * \n * This class would typically not be created or interacted with directly inside applications, though\n * the {\\@link MockConnection} may be interacted with in tests.\n * \n * \\@experimental\n */\nexport class XHRConnection implements Connection {\n  request: Request;\n  /**\n   * Response {@link EventEmitter} which emits a single {@link Response} value on load event of\n   * `XMLHttpRequest`.\n   */\n  response: Observable<Response>;\n  readyState: ReadyState;\n/**\n * @param {?} req\n * @param {?} browserXHR\n * @param {?=} baseResponseOptions\n */\nconstructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions) {\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n      const _xhr: XMLHttpRequest = browserXHR.build();\n      _xhr.open(RequestMethod[req.method].toUpperCase(), req.url);\n      if (req.withCredentials != null) {\n        _xhr.withCredentials = req.withCredentials;\n      }\n      // load event handler\n      const onLoad = () => {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = _xhr.status === 1223 ? 204 : _xhr.status;\n\n        let body: any = null;\n\n        // HTTP 204 means no content\n        if (status !== 204) {\n          // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n          // response/responseType properties were introduced in ResourceLoader Level2 spec\n          // (supported by IE10)\n          body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\n          // Implicitly strip a potential XSSI prefix.\n          if (typeof body === 'string') {\n            body = body.replace(XSSI_PREFIX, '');\n          }\n        }\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = body ? 200 : 0;\n        }\n\n        const headers: Headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n        // IE 9 does not provide the way to get URL of response\n        const url = getResponseURL(_xhr) || req.url;\n        const statusText: string = _xhr.statusText || 'OK';\n\n        let responseOptions = new ResponseOptions({body, status, headers, statusText, url});\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        const response = new Response(responseOptions);\n        response.ok = isSuccess(status);\n        if (response.ok) {\n          responseObserver.next(response);\n          // TODO(gdi2290): defer complete if array buffer until done\n          responseObserver.complete();\n          return;\n        }\n        responseObserver.error(response);\n      };\n      // error event handler\n      const onError = (err: ErrorEvent) => {\n        let responseOptions = new ResponseOptions({\n          body: err,\n          type: ResponseType.Error,\n          status: _xhr.status,\n          statusText: _xhr.statusText,\n        });\n        if (baseResponseOptions != null) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      this.setDetectedContentType(req, _xhr);\n\n      if (req.headers == null) {\n        req.headers = new Headers();\n      }\n      if (!req.headers.has('Accept')) {\n        req.headers.append('Accept', 'application/json, text/plain, */*');\n      }\n      req.headers.forEach((values, name) => _xhr.setRequestHeader(name, values.join(',')));\n\n      // Select the correct buffer type to store the response\n      if (req.responseType != null && _xhr.responseType != null) {\n        switch (req.responseType) {\n          case ResponseContentType.ArrayBuffer:\n            _xhr.responseType = 'arraybuffer';\n            break;\n          case ResponseContentType.Json:\n            _xhr.responseType = 'json';\n            break;\n          case ResponseContentType.Text:\n            _xhr.responseType = 'text';\n            break;\n          case ResponseContentType.Blob:\n            _xhr.responseType = 'blob';\n            break;\n          default:\n            throw new Error('The selected responseType is not supported');\n        }\n      }\n\n      _xhr.addEventListener('load', onLoad);\n      _xhr.addEventListener('error', onError);\n\n      _xhr.send(this.request.getBody());\n\n      return () => {\n        _xhr.removeEventListener('load', onLoad);\n        _xhr.removeEventListener('error', onError);\n        _xhr.abort();\n      };\n    });\n  }\n/**\n * @param {?} req\n * @param {?} _xhr\n * @return {?}\n */\nsetDetectedContentType(req: any /** TODO Request */, _xhr: any /** XMLHttpRequest */) {\n    // Skip if a custom Content-Type header is provided\n    if (req.headers != null && req.headers.get('Content-Type') != null) {\n      return;\n    }\n\n    // Set the detected content type\n    switch (req.contentType) {\n      case ContentType.NONE:\n        break;\n      case ContentType.JSON:\n        _xhr.setRequestHeader('content-type', 'application/json');\n        break;\n      case ContentType.FORM:\n        _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        break;\n      case ContentType.TEXT:\n        _xhr.setRequestHeader('content-type', 'text/plain');\n        break;\n      case ContentType.BLOB:\n        const /** @type {?} */ blob = req.blob();\n        if (blob.type) {\n          _xhr.setRequestHeader('content-type', blob.type);\n        }\n        break;\n    }\n  }\n}\n\nfunction XHRConnection_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRConnection.prototype.request;\n/**\n * Response {\\@link EventEmitter} which emits a single {\\@link Response} value on load event of\n * `XMLHttpRequest`.\n * @type {?}\n */\nXHRConnection.prototype.response;\n/** @type {?} */\nXHRConnection.prototype.readyState;\n}\n\n/**\n * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n * using a cookie. See https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\n * for more information on XSRF.\n * \n * Applications can configure custom cookie and header names by binding an instance of this class\n * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n * details.\n * \n * \\@experimental\n */\nexport class CookieXSRFStrategy implements XSRFStrategy {\n/**\n * @param {?=} _cookieName\n * @param {?=} _headerName\n */\nconstructor(\nprivate _cookieName: string = 'XSRF-TOKEN',\nprivate _headerName: string = 'X-XSRF-TOKEN') {}\n/**\n * @param {?} req\n * @return {?}\n */\nconfigureRequest(req: Request): void {\n    const /** @type {?} */ xsrfToken = getDOM().getCookie(this._cookieName);\n    if (xsrfToken) {\n      req.headers.set(this._headerName, xsrfToken);\n    }\n  }\n}\n\nfunction CookieXSRFStrategy_tsickle_Closure_declarations() {\n/** @type {?} */\nCookieXSRFStrategy.prototype._cookieName;\n/** @type {?} */\nCookieXSRFStrategy.prototype._headerName;\n}\n\n/**\n * Creates {\\@link XHRConnection} instances.\n * \n * This class would typically not be used by end users, but could be\n * overridden if a different backend implementation should be used,\n * such as in a node backend.\n * \n * ### Example\n * \n * ```\n * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '\\@angular/http';\n * \\@Component({ \n *   viewProviders: [\n *     HTTP_PROVIDERS,\n *     {provide: Http, useFactory: (backend, options) => {\n *       return new Http(backend, options);\n *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n * })\n * class MyComponent {\n *   constructor(http:Http) {\n *     http.request('people.json').subscribe(res => this.people = res.json());\n *   }\n * }\n * ```\n * \\@experimental\n */\nexport class XHRBackend implements ConnectionBackend {\n/**\n * @param {?} _browserXHR\n * @param {?} _baseResponseOptions\n * @param {?} _xsrfStrategy\n */\nconstructor(\nprivate _browserXHR: BrowserXhr,\nprivate _baseResponseOptions: ResponseOptions,\nprivate _xsrfStrategy: XSRFStrategy) {}\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): XHRConnection {\n    this._xsrfStrategy.configureRequest(request);\n    return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserXhr, },\n{type: ResponseOptions, },\n{type: XSRFStrategy, },\n];\n}\n\nfunction XHRBackend_tsickle_Closure_declarations() {\n/** @type {?} */\nXHRBackend.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nXHRBackend.ctorParameters;\n/** @type {?} */\nXHRBackend.prototype._browserXHR;\n/** @type {?} */\nXHRBackend.prototype._baseResponseOptions;\n/** @type {?} */\nXHRBackend.prototype._xsrfStrategy;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\n\nimport {ResponseOptions} from '../base_response_options';\nimport {ReadyState, RequestMethod, ResponseType} from '../enums';\nimport {Connection, ConnectionBackend} from '../interfaces';\nimport {Request} from '../static_request';\nimport {Response} from '../static_response';\n\nimport {BrowserJsonp} from './browser_jsonp';\n\nconst /** @type {?} */ JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\nconst /** @type {?} */ JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n/**\n * Abstract base class for an in-flight JSONP request.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPConnection implements Connection {\n  /**\n   * The {@link ReadyState} of this request.\n   */\n  readyState: ReadyState;\n\n  /**\n   * The outgoing HTTP request.\n   */\n  request: Request;\n\n  /**\n   * An observable that completes with the response, when the request is finished.\n   */\n  response: Observable<Response>;\n/**\n * Callback called when the JSONP request completes, to notify the application\n * of the new data.\n * @abstract\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {}\n}\n\nfunction JSONPConnection_tsickle_Closure_declarations() {\n/**\n * The {\\@link ReadyState} of this request.\n * @type {?}\n */\nJSONPConnection.prototype.readyState;\n/**\n * The outgoing HTTP request.\n * @type {?}\n */\nJSONPConnection.prototype.request;\n/**\n * An observable that completes with the response, when the request is finished.\n * @type {?}\n */\nJSONPConnection.prototype.response;\n}\n\nexport class JSONPConnection_ extends JSONPConnection {\nprivate _id: string;\nprivate _script: Element;\nprivate _responseData: any;\nprivate _finished: boolean = false;\n/**\n * @param {?} req\n * @param {?} _dom\n * @param {?=} baseResponseOptions\n */\nconstructor(\n      req: Request,\nprivate _dom: BrowserJsonp,\nprivate baseResponseOptions?: ResponseOptions) {\n    super();\n    if (req.method !== RequestMethod.Get) {\n      throw new TypeError(JSONP_ERR_WRONG_METHOD);\n    }\n    this.request = req;\n    this.response = new Observable<Response>((responseObserver: Observer<Response>) => {\n\n      this.readyState = ReadyState.Loading;\n      const id = this._id = _dom.nextRequestID();\n\n      _dom.exposeConnection(id, this);\n\n      // Workaround Dart\n      // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n      const callback = _dom.requestCallback(this._id);\n      let url: string = req.url;\n      if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n        url = url.replace('=JSONP_CALLBACK&', `=${callback}&`);\n      } else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n        url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + `=${callback}`;\n      }\n\n      const script = this._script = _dom.build(url);\n\n      const onLoad = (event: Event) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        if (!this._finished) {\n          let responseOptions =\n              new ResponseOptions({body: JSONP_ERR_NO_CALLBACK, type: ResponseType.Error, url});\n          if (baseResponseOptions) {\n            responseOptions = baseResponseOptions.merge(responseOptions);\n          }\n          responseObserver.error(new Response(responseOptions));\n          return;\n        }\n\n        let responseOptions = new ResponseOptions({body: this._responseData, url});\n        if (this.baseResponseOptions) {\n          responseOptions = this.baseResponseOptions.merge(responseOptions);\n        }\n\n        responseObserver.next(new Response(responseOptions));\n        responseObserver.complete();\n      };\n\n      const onError = (error: Error) => {\n        if (this.readyState === ReadyState.Cancelled) return;\n        this.readyState = ReadyState.Done;\n        _dom.cleanup(script);\n        let responseOptions = new ResponseOptions({body: error.message, type: ResponseType.Error});\n        if (baseResponseOptions) {\n          responseOptions = baseResponseOptions.merge(responseOptions);\n        }\n        responseObserver.error(new Response(responseOptions));\n      };\n\n      script.addEventListener('load', onLoad);\n      script.addEventListener('error', onError);\n\n      _dom.send(script);\n\n      return () => {\n        this.readyState = ReadyState.Cancelled;\n        script.removeEventListener('load', onLoad);\n        script.removeEventListener('error', onError);\n        this._dom.cleanup(script);\n      };\n    });\n  }\n/**\n * @param {?=} data\n * @return {?}\n */\nfinished(data?: any) {\n    // Don't leak connections\n    this._finished = true;\n    this._dom.removeConnection(this._id);\n    if (this.readyState === ReadyState.Cancelled) return;\n    this._responseData = data;\n  }\n}\n\nfunction JSONPConnection__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPConnection_.prototype._id;\n/** @type {?} */\nJSONPConnection_.prototype._script;\n/** @type {?} */\nJSONPConnection_.prototype._responseData;\n/** @type {?} */\nJSONPConnection_.prototype._finished;\n/** @type {?} */\nJSONPConnection_.prototype._dom;\n/** @type {?} */\nJSONPConnection_.prototype.baseResponseOptions;\n}\n\n/**\n * A {\\@link ConnectionBackend} that uses the JSONP strategy of making requests.\n * \n * \\@experimental\n * @abstract\n */\nexport abstract class JSONPBackend extends ConnectionBackend {}\nexport class JSONPBackend_ extends JSONPBackend {\n/**\n * @param {?} _browserJSONP\n * @param {?} _baseResponseOptions\n */\nconstructor(private _browserJSONP: BrowserJsonp,\nprivate _baseResponseOptions: ResponseOptions) {\n    super();\n  }\n/**\n * @param {?} request\n * @return {?}\n */\ncreateConnection(request: Request): JSONPConnection {\n    return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: BrowserJsonp, },\n{type: ResponseOptions, },\n];\n}\n\nfunction JSONPBackend__tsickle_Closure_declarations() {\n/** @type {?} */\nJSONPBackend_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJSONPBackend_.ctorParameters;\n/** @type {?} */\nJSONPBackend_.prototype._browserJSONP;\n/** @type {?} */\nJSONPBackend_.prototype._baseResponseOptions;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\n\n\nimport {ResponseOptions} from './base_response_options';\nimport {Body} from './body';\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\n/**\n * Creates `Response` instances from provided values.\n * \n * Though this object isn't\n * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n * add data to a view.\n * \n * ### Example\n * \n * ```\n * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n * ```\n * \n * The Response's interface is inspired by the Response constructor defined in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n * can be accessed many times. There are other differences in the implementation, but this is the\n * most significant.\n * \n * \\@experimental\n */\nexport class Response extends Body {\n  /**\n   * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n   *\n   * Defaults to \"default\".\n   */\n  type: ResponseType;\n  /**\n   * True if the response's status is within 200-299\n   */\n  ok: boolean;\n  /**\n   * URL of response.\n   *\n   * Defaults to empty string.\n   */\n  url: string;\n  /**\n   * Status code returned by server.\n   *\n   * Defaults to 200.\n   */\n  status: number;\n  /**\n   * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n   * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n   *\n   * Defaults to \"OK\"\n   */\n  statusText: string;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many of the response body's bytes have been loaded, for example if the response is\n   * the result of a progress event.\n   */\n  bytesLoaded: number;\n  /**\n   * Non-standard property\n   *\n   * Denotes how many bytes are expected in the final response body.\n   */\n  totalBytes: number;\n  /**\n   * Headers object based on the `Headers` class in the [Fetch\n   * Spec](https://fetch.spec.whatwg.org/#headers-class).\n   */\n  headers: Headers;\n/**\n * @param {?} responseOptions\n */\nconstructor(responseOptions: ResponseOptions) {\n    super();\n    this._body = responseOptions.body;\n    this.status = responseOptions.status;\n    this.ok = (this.status >= 200 && this.status <= 299);\n    this.statusText = responseOptions.statusText;\n    this.headers = responseOptions.headers;\n    this.type = responseOptions.type;\n    this.url = responseOptions.url;\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    return `Response with status: ${this.status} ${this.statusText} for URL: ${this.url}`;\n  }\n}\n\nfunction Response_tsickle_Closure_declarations() {\n/**\n * One of \"basic\", \"cors\", \"default\", \"error\", or \"opaque\".\n * \n * Defaults to \"default\".\n * @type {?}\n */\nResponse.prototype.type;\n/**\n * True if the response's status is within 200-299\n * @type {?}\n */\nResponse.prototype.ok;\n/**\n * URL of response.\n * \n * Defaults to empty string.\n * @type {?}\n */\nResponse.prototype.url;\n/**\n * Status code returned by server.\n * \n * Defaults to 200.\n * @type {?}\n */\nResponse.prototype.status;\n/**\n * Text representing the corresponding reason phrase to the `status`, as defined in [ietf rfc 2616\n * section 6.1.1](https://tools.ietf.org/html/rfc2616#section-6.1.1)\n * \n * Defaults to \"OK\"\n * @type {?}\n */\nResponse.prototype.statusText;\n/**\n * Non-standard property\n * \n * Denotes how many of the response body's bytes have been loaded, for example if the response is\n * the result of a progress event.\n * @type {?}\n */\nResponse.prototype.bytesLoaded;\n/**\n * Non-standard property\n * \n * Denotes how many bytes are expected in the final response body.\n * @type {?}\n */\nResponse.prototype.totalBytes;\n/**\n * Headers object based on the `Headers` class in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#headers-class).\n * @type {?}\n */\nResponse.prototype.headers;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {stringToArrayBuffer} from './http_utils';\nimport {URLSearchParams} from './url_search_params';\n/**\n * HTTP request body used by both {\\@link Request} and {\\@link Response}\n * https://fetch.spec.whatwg.org/#body\n * @abstract\n */\nexport abstract class Body {\n/**\n * \\@internal\n */\nprotected _body: any;\n/**\n * Attempts to return body as parsed `JSON` object, or raises an exception.\n * @return {?}\n */\njson(): any {\n    if (typeof this._body === 'string') {\n      return JSON.parse( /** @type {?} */((<string>this._body)));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return JSON.parse(this.text());\n    }\n\n    return this._body;\n  }\n/**\n * Returns the body as a string, presuming `toString()` can be called on the response body.\n * @return {?}\n */\ntext(): string {\n    if (this._body instanceof URLSearchParams) {\n      return this._body.toString();\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return String.fromCharCode.apply(null, new Uint16Array( /** @type {?} */((<ArrayBuffer>this._body))));\n    }\n\n    if (this._body == null) {\n      return '';\n    }\n\n    if (typeof this._body === 'object') {\n      return JSON.stringify(this._body, null, 2);\n    }\n\n    return this._body.toString();\n  }\n/**\n * Return the body as an ArrayBuffer\n * @return {?}\n */\narrayBuffer(): ArrayBuffer {\n    if (this._body instanceof ArrayBuffer) {\n      return /** @type {?} */(( <ArrayBuffer>this._body));\n    }\n\n    return stringToArrayBuffer(this.text());\n  }\n/**\n * Returns the request's body as a Blob, assuming that body exists.\n * @return {?}\n */\nblob(): Blob {\n    if (this._body instanceof Blob) {\n      return /** @type {?} */(( <Blob>this._body));\n    }\n\n    if (this._body instanceof ArrayBuffer) {\n      return new Blob([this._body]);\n    }\n\n    throw new Error('The request body isn\\'t either a blob or an array buffer');\n  }\n}\n\nfunction Body_tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nBody.prototype._body;\n}\n\n","\n/**\n * @license \n * Copyright Google Inc. All Rights Reserved.\n * \n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n * @param {?=} rawParams\n * @return {?}\n */\nfunction paramParser(rawParams: string = ''): Map<string, string[]> {\n  const /** @type {?} */ map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const /** @type {?} */ params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const /** @type {?} */ eqIdx = param.indexOf('=');\n      const [key, val]: string[] =\n          eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)];\n      const /** @type {?} */ list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\n/**\n * \\@experimental \n * \n */\nexport class QueryEncoder {\n/**\n * @param {?} k\n * @return {?}\n */\nencodeKey(k: string): string { return standardEncoding(k); }\n/**\n * @param {?} v\n * @return {?}\n */\nencodeValue(v: string): string { return standardEncoding(v); }\n}\n/**\n * @param {?} v\n * @return {?}\n */\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n/**\n * Map-like representation of url search parameters, based on\n * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n * with several extensions for merging URLSearchParams objects:\n *   - setAll()\n *   - appendAll()\n *   - replaceAll()\n * \n * This class accepts an optional second parameter of ${\\@link QueryEncoder},\n * which is used to serialize parameters before making a request. By default,\n * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n * and then un-encodes certain characters that are allowed to be part of the query\n * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n * \n * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n * \n * If the set of allowed query characters is not acceptable for a particular backend,\n * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n * \n * ```\n * import {URLSearchParams, QueryEncoder} from '\\@angular/http';\n * class MyQueryEncoder extends QueryEncoder {\n *   encodeKey(k: string): string {\n *     return myEncodingFunction(k);\n *   }\n * \n *   encodeValue(v: string): string {\n *     return myEncodingFunction(v);\n *   }\n * }\n * \n * let params = new URLSearchParams('', new MyQueryEncoder());\n * ```\n * \\@experimental\n */\nexport class URLSearchParams {\n  paramsMap: Map<string, string[]>;\n/**\n * @param {?=} rawParams\n * @param {?=} queryEncoder\n */\nconstructor(\npublic rawParams: string = '',\nprivate queryEncoder: QueryEncoder = new QueryEncoder()) {\n    this.paramsMap = paramParser(rawParams);\n  }\n/**\n * @return {?}\n */\nclone(): URLSearchParams {\n    const /** @type {?} */ clone = new URLSearchParams('', this.queryEncoder);\n    clone.appendAll(this);\n    return clone;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\nhas(param: string): boolean { return this.paramsMap.has(param); }\n/**\n * @param {?} param\n * @return {?}\n */\nget(param: string): string {\n    const /** @type {?} */ storedParam = this.paramsMap.get(param);\n\n    return Array.isArray(storedParam) ? storedParam[0] : null;\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ngetAll(param: string): string[] { return this.paramsMap.get(param) || []; }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nset(param: string, val: string) {\n    if (val === void 0 || val === null) {\n      this.delete(param);\n      return;\n    }\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.length = 0;\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nsetAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      list.push(value[0]);\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} param\n * @param {?} val\n * @return {?}\n */\nappend(param: string, val: string): void {\n    if (val === void 0 || val === null) return;\n    const /** @type {?} */ list = this.paramsMap.get(param) || [];\n    list.push(val);\n    this.paramsMap.set(param, list);\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nappendAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @param {?} searchParams\n * @return {?}\n */\nreplaceAll(searchParams: URLSearchParams) {\n    searchParams.paramsMap.forEach((value, param) => {\n      const /** @type {?} */ list = this.paramsMap.get(param) || [];\n      list.length = 0;\n      for (let /** @type {?} */ i = 0; i < value.length; ++i) {\n        list.push(value[i]);\n      }\n      this.paramsMap.set(param, list);\n    });\n  }\n/**\n * @return {?}\n */\ntoString(): string {\n    const /** @type {?} */ paramsList: string[] = [];\n    this.paramsMap.forEach((values, k) => {\n      values.forEach(\n          v => paramsList.push(\n              this.queryEncoder.encodeKey(k) + '=' + this.queryEncoder.encodeValue(v)));\n    });\n    return paramsList.join('&');\n  }\n/**\n * @param {?} param\n * @return {?}\n */\ndelete (param: string): void { this.paramsMap.delete(param); }\n}\n\nfunction URLSearchParams_tsickle_Closure_declarations() {\n/** @type {?} */\nURLSearchParams.prototype.paramsMap;\n/** @type {?} */\nURLSearchParams.prototype.rawParams;\n/** @type {?} */\nURLSearchParams.prototype.queryEncoder;\n}\n\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {RequestMethod} from './enums';\n/**\n * @param {?} method\n * @return {?}\n */\nexport function normalizeMethodName(method: string | RequestMethod): RequestMethod {\n  if (typeof method !== 'string') return method;\n\n  switch (method.toUpperCase()) {\n    case 'GET':\n      return RequestMethod.Get;\n    case 'POST':\n      return RequestMethod.Post;\n    case 'PUT':\n      return RequestMethod.Put;\n    case 'DELETE':\n      return RequestMethod.Delete;\n    case 'OPTIONS':\n      return RequestMethod.Options;\n    case 'HEAD':\n      return RequestMethod.Head;\n    case 'PATCH':\n      return RequestMethod.Patch;\n  }\n  throw new Error(`Invalid request method. The method \"${method}\" is not supported.`);\n}\n\nexport const /** @type {?} */ isSuccess = (status: number): boolean => (status >= 200 && status < 300);\n/**\n * @param {?} xhr\n * @return {?}\n */\nexport function getResponseURL(xhr: any): string {\n  if ('responseURL' in xhr) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return;\n}\n/**\n * @param {?} input\n * @return {?}\n */\nexport function stringToArrayBuffer(input: String): ArrayBuffer {\n  const /** @type {?} */ view = new Uint16Array(input.length);\n  for (let /** @type {?} */ i = 0, /** @type {?} */ strLen = input.length; i < strLen; i++) {\n    view[i] = input.charCodeAt(i);\n  }\n  return view.buffer;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n\nimport {ResponseType} from './enums';\nimport {Headers} from './headers';\nimport {ResponseOptionsArgs} from './interfaces';\n/**\n * Creates a response options object to be optionally provided when instantiating a\n * {\\@link Response}.\n * \n * This class is based on the `ResponseInit` description in the [Fetch\n * Spec](https://fetch.spec.whatwg.org/#responseinit).\n * \n * All values are null by default. Typical defaults can be found in the\n * {\\@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n * \n * This class may be used in tests to build {\\@link Response Responses} for\n * mock responses (see {\\@link MockBackend}).\n * \n * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: '{\"name\":\"Jeff\"}'\n * });\n * var res = new Response(options);\n * \n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * ```\n * \n * \\@experimental\n */\nexport class ResponseOptions {\n  // TODO: FormData | Blob\n  /**\n   * String, Object, ArrayBuffer or Blob representing the body of the {@link Response}.\n   */\n  body: string|Object|ArrayBuffer|Blob;\n  /**\n   * Http {@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n   * associated with the response.\n   */\n  status: number;\n  /**\n   * Response {@link Headers headers}\n   */\n  headers: Headers;\n/**\n * \\@internal\n */\nstatusText: string;\n/**\n * \\@internal\n */\ntype: ResponseType;\n  url: string;\n/**\n * @param {?=} __0\n */\nconstructor({body, status, headers, statusText, type, url}: ResponseOptionsArgs = {}) {\n    this.body = body != null ? body : null;\n    this.status = status != null ? status : null;\n    this.headers = headers != null ? headers : null;\n    this.statusText = statusText != null ? statusText : null;\n    this.type = type != null ? type : null;\n    this.url = url != null ? url : null;\n  }\n/**\n * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n * override\n * existing values. This method will not change the values of the instance on which it is being\n * called.\n * \n * This may be useful when sharing a base `ResponseOptions` object inside tests,\n * where certain properties may change from test to test.\n * \n * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n * \n * ```typescript\n * import {ResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new ResponseOptions({\n *   body: {name: 'Jeff'}\n * });\n * var res = new Response(options.merge({\n *   url: 'https://google.com'\n * }));\n * console.log('options.url:', options.url); // null\n * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n * console.log('res.url:', res.url); // https://google.com\n * ```\n * @param {?=} options\n * @return {?}\n */\nmerge(options?: ResponseOptionsArgs): ResponseOptions {\n    return new ResponseOptions({\n      body: options && options.body != null ? options.body : this.body,\n      status: options && options.status != null ? options.status : this.status,\n      headers: options && options.headers != null ? options.headers : this.headers,\n      statusText: options && options.statusText != null ? options.statusText : this.statusText,\n      type: options && options.type != null ? options.type : this.type,\n      url: options && options.url != null ? options.url : this.url,\n    });\n  }\n}\n\nfunction ResponseOptions_tsickle_Closure_declarations() {\n/**\n * String, Object, ArrayBuffer or Blob representing the body of the {\\@link Response}.\n * @type {?}\n */\nResponseOptions.prototype.body;\n/**\n * Http {\\@link http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html status code}\n * associated with the response.\n * @type {?}\n */\nResponseOptions.prototype.status;\n/**\n * Response {\\@link Headers headers}\n * @type {?}\n */\nResponseOptions.prototype.headers;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.statusText;\n/**\n * \\@internal\n * @type {?}\n */\nResponseOptions.prototype.type;\n/** @type {?} */\nResponseOptions.prototype.url;\n}\n\n/**\n * Subclass of {\\@link ResponseOptions}, with default values.\n * \n * Default values:\n *  * status: 200\n *  * headers: empty {\\@link Headers} object\n * \n * This class could be extended and bound to the {\\@link ResponseOptions} class\n * when configuring an {\\@link Injector}, in order to override the default options\n * used by {\\@link Http} to create {\\@link Response Responses}.\n * \n * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n * \n * ```typescript\n * import {provide} from '\\@angular/core';\n * import {bootstrap} from '\\@angular/platform-browser/browser';\n * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n * '\\@angular/http';\n * import {App} from './myapp';\n * \n * class MyOptions extends BaseResponseOptions {\n *   headers:Headers = new Headers({network: 'github'});\n * }\n * \n * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n * ```\n * \n * The options could also be extended when manually creating a {\\@link Response}\n * object.\n * \n * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n * \n * ```\n * import {BaseResponseOptions, Response} from '\\@angular/http';\n * \n * var options = new BaseResponseOptions();\n * var res = new Response(options.merge({\n *   body: 'Angular',\n *   headers: new Headers({framework: 'angular'})\n * }));\n * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n * console.log('res.text():', res.text()); // Angular;\n * ```\n * \n * \\@experimental\n */\nexport class BaseResponseOptions extends ResponseOptions {\nconstructor() {\n    super({status: 200, statusText: 'Ok', type: ResponseType.Default, headers: new Headers()});\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BaseResponseOptions_tsickle_Closure_declarations() {\n/** @type {?} */\nBaseResponseOptions.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBaseResponseOptions.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nimport {Injectable} from '@angular/core';\n/**\n * A backend for http that uses the `XMLHttpRequest` browser API.\n * \n * Take care not to evaluate this in non-browser contexts.\n * \n * \\@experimental\n */\nexport class BrowserXhr {\nconstructor() {}\n/**\n * @return {?}\n */\nbuild(): any { return /** @type {?} */(( <any>(new XMLHttpRequest()))); }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction BrowserXhr_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserXhr.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserXhr.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component} from '@angular/core'\nimport {Http, URLSearchParams, Headers, RequestOptions} from '@angular/http';\nimport {map} from 'rxjs/operator/map';\n\n@Component({\n  selector: 'search',\n  template: `\n    <div>\n      <h2>Search</h2>\n      <input type=\"text\" placeholder=\"Search on Wikipedia\" #foo>\n      <button (click)=\"search(foo.value)\">Search</button>\n      <div *ngFor=\"let page of pages\">{{page}}</div>\n    </div>\n  `\n})\nexport class Search {\n  pages: Array<any> = [];\n\n  constructor(private http: Http) {}\n\n  search(text: string) {\n    if (text && text.length > 0) {\n      let wikiUrl = 'https://en.wikipedia.org/w/api.php';\n\n      let headers = new Headers({\n        'Content-Type': 'application/json'\n      });\n\n      let params = new URLSearchParams();\n      params.set('gapfrom', text);\n      params.set('gaplimit', '10');\n      params.set('generator', 'allpages');\n      params.set('action', 'query');\n      params.set('format', 'json');\n      params.set('origin', '*');\n\n      let options = new RequestOptions({\n        headers: headers,\n        search: params\n      });\n\n      map.call(this.http.get(wikiUrl, options), response => <string[]> response.json())\n        .subscribe(data => {\n          this.pages = [];\n          var raw = data['query']['pages'];\n          for (var key in raw) {\n            this.pages.push(raw[key].title);\n          }\n        });\n    }\n  }\n\n}\n"]}