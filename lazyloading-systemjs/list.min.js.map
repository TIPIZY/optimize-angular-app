{"version":3,"sources":["../../app/list/list.module.ts","../../src/pagination/pagination.module.ts","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/node_modules/@ng-bootstrap/ng-bootstrap/pagination/pagination.d.ts.NgbPagination.html","../../src/util/util.ts","../../src/pagination/pagination.ts","../../src/pagination/pagination-config.ts","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/app/list/list.ts.List.html","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/app/list/list.ts.List_Host.html","../../app/list/list.ts"],"names":["routes","path","component","list_1","List","ListModule","__decorate","core_1","NgModule","imports","pagination_module_1","NgbPaginationModule","router_1","RouterModule","forChild","declarations","providers","NgbPaginationConfig","_nAngularCoreAngularCoreEs5Js","CommonModule","_nAngularCommonAngularCommonEs5Js","NgbPagination","_nNgBootstrapNgBootstrapPaginationPaginationJs","_nNgBootstrapNgBootstrapPaginationPaginationConfigJs","forRoot","ngModule","decorators","type","args","exports","ctorParameters","l","import0","ɵted","ɵeld","v","en","$event","ad","ck","disabled","currVal_0","currVal_1","View_NgbPagination_2","View_NgbPagination_4","View_NgbPagination_6","ɵand","ɵdid","import1","NgIf","ViewContainerRef","TemplateRef","ngIf","page","$implicit","View_NgbPagination_3","View_NgbPagination_5","currVal_2","currVal_3","View_NgbPagination_8","View_NgbPagination_0","View_NgbPagination_1","NgForOf","IterableDiffers","ngForOf","View_NgbPagination_7","boundaryLinks","co","directionLinks","pages","currVal_4","currVal_5","View_NgbPagination_Host_0","RenderType_NgbPagination","import2","import3","import0_1","import1_1","import2_1","import3_1","encapsulation","styles_NgbPagination","exports_1","NgbPaginationNgFactory","ɵccf","ellipses","pageChange","value","parseInt","undefined","max","min","Math","isNaN","toInteger","isFinite","floor","isNumber","slice","text","replace","Component","EventEmitter","Input","Output","ChangeDetectionStrategy","getValueInRange","_nNgBootstrapNgBootstrapUtilUtilJs","config","this","pageCount","maxSize","pageSize","rotate","size","prototype","hasPrevious","hasNext","selectPage","pageNumber","_updatePages","ngOnChanges","changes","isEllipsis","_applyEllipses","start","end","unshift","push","_applyRotation","leftOffset","rightOffset","_applyPagination","ceil","_setPageInRange","newPageNo","prevPageNo","emit","newPage","collectionSize","length","i","_a","_b","selector","changeDetection","OnPush","host","role","template","propDecorators","Injectable","import4","View_List_Host_0","View_List_0","RenderType_List","styles_List","ListNgFactory","setters"],"mappings":"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","file":"list.min.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {NgbPaginationModule, NgbPaginationConfig} from '@ng-bootstrap/ng-bootstrap/pagination/pagination.module';\n\nimport {List} from './list';\n\n\nconst routes: Routes = [\n  {path: '', component: List},\n];\n\n@NgModule({\n  imports: [NgbPaginationModule, RouterModule.forChild(routes)],\n  declarations: [List],\n  providers: [NgbPaginationConfig]\n})\nexport class ListModule {}","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {NgbPagination} from './pagination';\nimport {NgbPaginationConfig} from './pagination-config';\n\nexport {NgbPagination} from './pagination';\nexport {NgbPaginationConfig} from './pagination-config';\n\n\nexport class NgbPaginationModule {\n  static forRoot(): ModuleWithProviders { return {ngModule: NgbPaginationModule, providers: [NgbPaginationConfig]}; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{declarations: [NgbPagination], exports: [NgbPagination], imports: [CommonModule]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","","export function toInteger(value: any): number {\n  return parseInt(`${value}`, 10);\n}\n\nexport function toString(value: any): string {\n  return (value !== undefined && value !== null) ? `${value}` : '';\n}\n\nexport function getValueInRange(value: number, max: number, min = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n\nexport function isNumber(value: any): boolean {\n  return !isNaN(toInteger(value));\n}\n\nexport function isInteger(value: any): boolean {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n\nexport function isDefined(value: any): boolean {\n  return value !== undefined && value !== null;\n}\n\nexport function padNumber(value: number) {\n  if (isNumber(value)) {\n    return `0${value}`.slice(-2);\n  } else {\n    return '';\n  }\n}\n\nexport function regExpEscape(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n","import {Component, EventEmitter, Input, Output, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\nimport {getValueInRange, isNumber} from '../util/util';\nimport {NgbPaginationConfig} from './pagination-config';\n\n/**\n * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!\n */\n\nexport class NgbPagination implements OnChanges {\n  pageCount = 0;\n  pages: number[] = [];\n\n  /**\n   * Whether to disable buttons from user input\n   */\n   disabled: boolean;\n\n  /**\n   *  Whether to show the \"First\" and \"Last\" page links\n   */\n   boundaryLinks: boolean;\n\n  /**\n   *  Whether to show the \"Next\" and \"Previous\" page links\n   */\n   directionLinks: boolean;\n\n  /**\n   *  Whether to show ellipsis symbols and first/last page numbers when maxSize > number of pages\n   */\n   ellipses: boolean;\n\n  /**\n   *  Whether to rotate pages when maxSize > number of pages.\n   *  Current page will be in the middle\n   */\n   rotate: boolean;\n\n  /**\n   *  Number of items in collection.\n   */\n   collectionSize: number;\n\n  /**\n   *  Maximum number of pages to display.\n   */\n   maxSize: number;\n\n  /**\n   *  Current page.\n   */\n   page = 0;\n\n  /**\n   *  Number of items per page.\n   */\n   pageSize: number;\n\n  /**\n   *  An event fired when the page is changed.\n   *  Event's payload equals to the newly selected page.\n   */\n   pageChange = new EventEmitter<number>(true);\n\n  /**\n   * Pagination display size: small or large\n   */\n   size: 'sm' | 'lg';\n\n  constructor(config: NgbPaginationConfig) {\n    this.disabled = config.disabled;\n    this.boundaryLinks = config.boundaryLinks;\n    this.directionLinks = config.directionLinks;\n    this.ellipses = config.ellipses;\n    this.maxSize = config.maxSize;\n    this.pageSize = config.pageSize;\n    this.rotate = config.rotate;\n    this.size = config.size;\n  }\n\n  hasPrevious(): boolean { return this.page > 1; }\n\n  hasNext(): boolean { return this.page < this.pageCount; }\n\n  selectPage(pageNumber: number): void { this._updatePages(pageNumber); }\n\n  ngOnChanges(changes: SimpleChanges): void { this._updatePages(this.page); }\n\n  /**\n   * @internal\n   */\n  isEllipsis(pageNumber): boolean { return pageNumber === -1; }\n\n  /**\n   * Appends ellipses and first/last page number to the displayed pages\n   */\n  private _applyEllipses(start: number, end: number) {\n    if (this.ellipses) {\n      if (start > 0) {\n        if (start > 1) {\n          this.pages.unshift(-1);\n        }\n        this.pages.unshift(1);\n      }\n      if (end < this.pageCount) {\n        if (end < (this.pageCount - 1)) {\n          this.pages.push(-1);\n        }\n        this.pages.push(this.pageCount);\n      }\n    }\n  }\n\n  /**\n   * Rotates page numbers based on maxSize items visible.\n   * Currently selected page stays in the middle:\n   *\n   * Ex. for selected page = 6:\n   * [5,*6*,7] for maxSize = 3\n   * [4,5,*6*,7] for maxSize = 4\n   */\n  private _applyRotation(): [number, number] {\n    let start = 0;\n    let end = this.pageCount;\n    let leftOffset = Math.floor(this.maxSize / 2);\n    let rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\n\n    if (this.page <= leftOffset) {\n      // very beginning, no rotation -> [0..maxSize]\n      end = this.maxSize;\n    } else if (this.pageCount - this.page < leftOffset) {\n      // very end, no rotation -> [len-maxSize..len]\n      start = this.pageCount - this.maxSize;\n    } else {\n      // rotate\n      start = this.page - leftOffset - 1;\n      end = this.page + rightOffset;\n    }\n\n    return [start, end];\n  }\n\n  /**\n   * Paginates page numbers based on maxSize items per page\n   */\n  private _applyPagination(): [number, number] {\n    let page = Math.ceil(this.page / this.maxSize) - 1;\n    let start = page * this.maxSize;\n    let end = start + this.maxSize;\n\n    return [start, end];\n  }\n\n  private _setPageInRange(newPageNo) {\n    const prevPageNo = this.page;\n    this.page = getValueInRange(newPageNo, this.pageCount, 1);\n\n    if (this.page !== prevPageNo) {\n      this.pageChange.emit(this.page);\n    }\n  }\n\n  private _updatePages(newPage: number) {\n    this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\n\n    if (!isNumber(this.pageCount)) {\n      this.pageCount = 0;\n    }\n\n    // fill-in model needed to render pages\n    this.pages.length = 0;\n    for (let i = 1; i <= this.pageCount; i++) {\n      this.pages.push(i);\n    }\n\n    // set page within 1..max range\n    this._setPageInRange(newPage);\n\n    // apply maxSize if necessary\n    if (this.maxSize > 0 && this.pageCount > this.maxSize) {\n      let start = 0;\n      let end = this.pageCount;\n\n      // either paginating or rotating page numbers\n      if (this.rotate) {\n        [start, end] = this._applyRotation();\n      } else {\n        [start, end] = this._applyPagination();\n      }\n\n      this.pages = this.pages.slice(start, end);\n\n      // adding ellipses\n      this._applyEllipses(start, end);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-pagination',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'role': 'navigation'},\n  template: `\n    <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\n      <li *ngIf=\"boundaryLinks\" class=\"page-item\"\n        [class.disabled]=\"!hasPrevious() || disabled\">\n        <a aria-label=\"First\" class=\"page-link\" href (click)=\"!!selectPage(1)\" [attr.tabindex]=\"(hasPrevious() ? null : '-1')\">\n          <span aria-hidden=\"true\">&laquo;&laquo;</span>\n        </a>\n      </li>\n\n      <li *ngIf=\"directionLinks\" class=\"page-item\"\n        [class.disabled]=\"!hasPrevious() || disabled\">\n        <a aria-label=\"Previous\" class=\"page-link\" href (click)=\"!!selectPage(page-1)\" [attr.tabindex]=\"(hasPrevious() ? null : '-1')\">\n          <span aria-hidden=\"true\">&laquo;</span>\n        </a>\n      </li>\n      <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\"\n        [class.disabled]=\"isEllipsis(pageNumber) || disabled\">\n        <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\">...</a>\n        <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"!!selectPage(pageNumber)\">\n          {{pageNumber}}\n          <span *ngIf=\"pageNumber === page\" class=\"sr-only\">(current)</span>\n        </a>\n      </li>\n      <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n        <a aria-label=\"Next\" class=\"page-link\" href (click)=\"!!selectPage(page+1)\" [attr.tabindex]=\"(hasNext() ? null : '-1')\">\n          <span aria-hidden=\"true\">&raquo;</span>\n        </a>\n      </li>\n\n      <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n        <a aria-label=\"Last\" class=\"page-link\" href (click)=\"!!selectPage(pageCount)\" [attr.tabindex]=\"(hasNext() ? null : '-1')\">\n          <span aria-hidden=\"true\">&raquo;&raquo;</span>\n        </a>\n      </li>\n    </ul>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbPaginationConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'boundaryLinks': [{ type: Input },],\n'directionLinks': [{ type: Input },],\n'ellipses': [{ type: Input },],\n'rotate': [{ type: Input },],\n'collectionSize': [{ type: Input },],\n'maxSize': [{ type: Input },],\n'page': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageChange': [{ type: Output },],\n'size': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\n\n/**\n * Configuration service for the NgbPagination component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the paginations used in the application.\n */\n\nexport class NgbPaginationConfig {\n  disabled = false;\n  boundaryLinks = false;\n  directionLinks = true;\n  ellipses = true;\n  maxSize = 0;\n  pageSize = 10;\n  rotate = false;\n  size: 'sm' | 'lg';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","","","import {Component} from '@angular/core'\n\n@Component({\n  selector: 'list',\n  template: `\n    <div>\n      <h2>Paginated list</h2>\n      <ngb-pagination [collectionSize]=\"70\" [(page)]=\"page\"></ngb-pagination>\n      <pre>Current page: {{page}}</pre>\n    </div>\n  `,\n})\nexport class List {\n  page: number = 1;\n}\n"]}