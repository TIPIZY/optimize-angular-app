{"version":3,"sources":["../../app/list/list.module.ts","../../src/pagination/pagination.module.ts","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/node_modules/@ng-bootstrap/ng-bootstrap/pagination/pagination.d.ts.NgbPagination.html","../../src/util/util.ts","../../src/pagination/pagination.ts","../../src/pagination/pagination-config.ts","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/app/list/list.ts.List.html","../dev/ng:/Users/mlaval/dev/github/playground/optimize-angular-app/app/list/list.ts.List_Host.html","../../app/list/list.ts"],"names":["routes","path","component","list_1","List","ListModule","__decorate","core_1","NgModule","imports","pagination_module_1","NgbPaginationModule","router_1","RouterModule","forChild","declarations","providers","NgbPaginationConfig","_nAngularCoreAngularCoreEs5Js","CommonModule","_nAngularCommonAngularCommonEs5Js","NgbPagination","_nNgBootstrapNgBootstrapPaginationPaginationJs","_nNgBootstrapNgBootstrapPaginationPaginationConfigJs","forRoot","ngModule","decorators","type","args","exports","ctorParameters","log","import0","ɵeld","view","eventName","$event","allowDefault","ɵted","check","disabled","currVal_0","currVal_1","View_NgbPagination_2","View_NgbPagination_4","View_NgbPagination_5","$implicit","View_NgbPagination_3","ɵand","ɵdid","import1","NgIf","ViewContainerRef","TemplateRef","ngIf","currVal_2","currVal_3","page","View_NgbPagination_6","View_NgbPagination_7","View_NgbPagination_0","View_NgbPagination_1","IterableDiffers","ngForOf","directionLinks","pages","currVal_4","boundaryLinks","currVal_5","View_NgbPagination_Host_0","RenderType_NgbPagination","import2","import3","exports_1","styles_NgbPagination","NgbPaginationNgFactory","import0_1","import1_1","import2_1","import3_1","ɵcrt","styles","value","parseInt","undefined","max","min","Math","isNaN","toInteger","isNumber","slice","text","replace","Component","EventEmitter","Input","Output","ChangeDetectionStrategy","getValueInRange","_nNgBootstrapNgBootstrapUtilUtilJs","config","this","pageCount","pageChange","ellipses","maxSize","pageSize","rotate","size","prototype","hasPrevious","hasNext","selectPage","pageNumber","_updatePages","ngOnChanges","changes","isEllipsis","_applyEllipses","start","end","unshift","push","_applyRotation","leftOffset","floor","rightOffset","_applyPagination","ceil","_setPageInRange","newPageNo","prevPageNo","emit","newPage","collectionSize","length","i","_a","_b","selector","changeDetection","OnPush","template","propDecorators","Injectable","import4","View_List_0","RenderType_List","styles_List","ListNgFactory"],"mappings":"wsBAOMA,IACHC,KAAM,GAAIC,UAAWC,EAAIC,OAQfC,EAAA,WAAb,QAAAA,MAAyB,MAAAA,MAAZA,EAAAC,GAAAC,EALJC,UACPC,SAAUC,EAAmBC,oBAAEC,EAAYC,aAACC,SAASd,IACrDe,cAAeZ,EAAIC,MACnBY,WAAYN,EAAmBO,wBAEpBZ,kBAAaA,sWChBlBG,EAAAU,EAAAV,sBACAW,EAAAC,EAAAD,0BAEAE,EAAAC,EAAAD,yBAGAA,cAAAC,EAAAD,gCAFAJ,EAAAM,EAAAN,+BAGAA,oBAAAM,EAAAN,mFAGR,QAAAN,MAQA,MAPSA,GAAOa,QAAd,WAAwC,OAAQC,SAAUd,EAAqBK,WAAYC,KACtFN,EAAUe,aACfC,KAAMnB,EAAUoB,OAAQb,cAAeM,GAAgBQ,SAAUR,GAAgBZ,SAAUU,OAGtFR,EAAcmB,eAAmE,WAAM,UAE9FnB,4eCfQ,mBAAAoB,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,MAAA,aAAA,UAAA,QAAA,cAEE,OAAA,OAAA,EAAA,WAAA,MAAA,KAAA,UAAA,SAAAC,EAAAC,EAAAC,UAAA,+BAAA,2BAAA,OAAAC,QAAAA,SAAA,QAAAN,MAAAC,EAAAM,KAAA,MAAA,qBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,cAAA,SAAA,KAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAA,SAAAP,MAAAC,EAAAM,KAAA,MAA6C,qBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,QAA7C,YAAA,KAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAqH,YAAAP,MAAAC,EAAAM,KAAA,MACnH,mBAAAP,MAAAC,EAAAM,KAAA,MAAA,iCAAA,KAAA,SAAAC,EAAAL,WAAAhC,gCAAAsC,iBAAyBC,8BAAqB,aAC9CC,SAAA,SAAA,KAAA,QAAAC,GAAAZ,wDACE,QAAA,gBALN,EAAA,aAEyE,KAAA,KAAvE,KACE,QAAAA,MAAAC,EAAAM,KAAA,MACA,mBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,MAAA,aAIJ,aAAA,QAAA,cAAA,OAAA,OAEE,EAAA,WAAA,MAAA,KAAA,UAAA,SAAAC,EAAAC,EAAAC,UAAA,+BAAA,kCAAA,OAAAC,iBAAA,QANoCN,MAAAC,EAAAM,KAAA,MAMpC,qBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,cAAA,SAAA,KAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAA,QAAAP,MAAAC,EAAAM,KAAA,MAAA,qBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,QAAA,YAAA,KAAA,KAAA,KAAA,KAAgD,QAAAF,MAAAC,EAAAM,KAAA,MAAA,eAAAP,MAAAC,EAAAM,KAAA,MAAA,mBAAAP,MAAAC,EAAAM,KAAA,MAAA,iBAAA,KAAA,SAAAC,EAAAL,WAAhDhC,gCAA6HsC,iBAC3HC,8BAAA,aAAAC,SAAA,SAAA,KAAuC,QAAAE,GAAAb,qBACvCA,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,MAAA,QAAA,cAAA,KAAA,KAAA,KAAA,KAAqC,QAAAF,MAAAC,EAAAM,KAAA,MACnC,UAAA,KAAA,SAAAC,EAAAL,cAJJ,QAAAW,GAAAd,iBADF,IAAAA,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,MAII,QAAA,cAAA,OAKF,KAAA,OAAA,KAAA,UAAA,SAAAC,EAAAC,EAAAC,gBAAAlC,4FACAmC,SAAA,QAR+EN,MAAAC,EAAAM,KAAA,MAQ/E,GAAA,OAAA,KAAA,SAAAC,EAAAL,SAAA,0BAAAY,kBAAAL,KAAA,QAAAM,GAAAhB,uDAAA,QAAA,gBAA0D,EAAA,WAA1D,EAA6F,aAAA,KAAA,KAAA,KAAA,QAAAA,MAAAC,EAAAM,KAAA,MAAA,mBAAAP,MAAAC,EAAAgB,KAAA,QAAA,KAAA,KAAA,EAAA,KAAAJ,KAAAb,MAAAC,EAAAiB,KAAA,KAAA,KAAA,EAAAC,EAAAC,MAAAnB,EAAAoB,iBAAApB,EAA7FqB,cAAAC,MAA6F,EAAA,iBAA7FvB,MAAAC,EAAAM,KAAA,MAAA,mBAAAP,MAAAC,EAAAgB,KAAA,QAAA,KAAA,KAAA,EAAA,KAHFH,KAAAd,MAAAC,EAAAiB,KAAA,KAAA,KAAA,EAAAC,EAAAC,MAAAnB,EAAAoB,iBAAApB,EAAAqB,cAAAC,MAAA,EAAA,SAAA,QAAAvB,MAAAC,EAAAM,KAAA,MAAA,iBAAA,SAAAC,EAAAL,WAAAhC,mCAAA4C,mBAAAS,oDAAAC,0BACwDtD,oCACtDuD,4CAAAjB,wBAAA,QAAAkB,GAAA3B,wDAAA,QAAA,gBACA,EAAA,aAAA,KAAA,KAAA,KAAA,QAAAA,MAAAC,EAAAM,KAAA,MAAA,mBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,MAAA,aAAA,SAAA,QADG,cAAH,OACA,OAHqD,EACrD,WADF,MAAA,KAKA,UAAA,SAAAC,EAAAC,EAAAC,UAAA,MAAAlC,yBAAA,kCAAA,OAAAmC,QAAAA,SAAuF,QAHrFN,MAAAC,EAAAM,KAAA,MAIA,qBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,cAAA,SAAA,KAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAA,QAAAP,MAAAC,EAAAM,KAAA,MAAA,qBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,QAAA,YAAA,KAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAA,WAAAP,MAAAC,EAAAM,KAAA,MAAA,mBAAAP,MAAAC,EAAAM,KAAA,MAAA,iBAAA,KAAA,SAAAC,EAAAL,WAAAhC,4BAAAsC,iBAAAC,0BAAA,aAAAC,SAAA,SAAA,KAAA,QAAAiB,GAAA5B,wDAA4C,QAAA,gBAA5C,EAAA,aAAA,KAAA,KAAA,KACE,QAAAA,MAAAC,EAAAM,KAAA,MAAA,mBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,MAAA,aAAyB,SACzB,QAAA,cAAsB,OAAW,OAAA,EAAA,WAHrC,MACE,KAAA,UAAA,SAAAC,EAAAC,EAAAC,8EAMF,OAAAC,QAAAA,SAAA,QANEN,MAAAC,EAAAM,KAAA,MAMF,qBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,cAAA,SAAA,KAAA,KAAA,KAAA,KACE,QAAAF,MAAAC,EAAAM,KAAA,MAAA,SAAAP,MAAAC,EAAAM,KAAA,MAAA,qBAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,QAAA,YAAA,KAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAA,WAAAP,MAAAC,EAAAM,KAAA,MAAA,mBAAAP,MAAAC,EAAAM,KAAA,MAAA,iCAAA,KAAA,SAAAC,EAAAL,WAAAhC,4BAAAsC,iBAAAC,uCAAAC,SAAA,SAAA,KAAA,QAAAkB,GAAA7B,wCAAA,aAAAA,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,GAAA,SAAA,KAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAA,eAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,GAAA,UAAA,EAAA,YAA4C,IAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAA,iBAAAP,MAAAC,EAAAgB,KAAA,QAAA,KAAA,KAAA,EAAA,KAA5Ca,KAAA9B,MAAAC,EAAAiB,KAAA,KAAA,KAAA,EAAAC,EAAAC,MAAAnB,EAAwHoB,iBAAApB,EACtHqB,cAAAC,MAAA,EAAA,SAAyB,QAD3BvB,MAAAC,EAAAM,KAAA,MACgD,yBAAAP,MAAAC,EAAAgB,KAAA,QAAA,KAAA,KAAA,EAAA,KAC9CL,KAAAZ,MAAAC,EAAAiB,KAAA,KAAA,KAAA,EAAAC,EAAAC,MAAAnB,EAAAoB,iBAAApB,EAAAqB,cAAAC,MAAsB,EAAW,sIAHOtB,EAA5CoB,iBAA4CpB,EAA5CqB,YAAArB,EACE8B,kBAA8EC,SAE5E,EAAA,8FAjCZL,KAAA3B,MAAAC,EAAAiB,KAAA,KAAA,KAAA,EAAAC,EAAAC,MACInB,EAAKoB,iBAAApB,EACHqB,cAAAC,MAAA,EAAA,SAAA,QAAAvB,MAAAC,EAAAM,KAAA,MAAiE,2BAAAP,MAAAC,EAAAgB,KAAA,QAAA,KAAA,KAAA,EAAA,KAC/DW,KAAA5B,MAAAC,EAAAiB,KAAA,KAAA,KAAA,EAAAC,EAAAC,MAAAnB,EAAAoB,iBAAApB,EAAAqB,cAAAC,MAAA,EAAA,SAAA,QAAAvB,MAAAC,EAAAM,KAAA,MAAA,uBAAAP,MAAAC,EAAAM,KAAA,MAMK,aAAAP,MAAAC,EAAAM,KAAA,MAEL,WAAA,SAAAC,EAAAL,+CAAAQ,WAAAsB,uBAAAT,WAAAU,eAAAT,WAAAQ,wBAMKE,WACLC,uBAAAC,8FAAA,YAAA3B,KAAA,QAAA4B,GAAAtC,qBAIKA,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,oBAAA,KAAA,KAAA,KAAA2B,EACLU,KAAAvC,MAAAC,EAAAiB,KAAA,OAAA,KAAA,EAAAsB,EAAAlD,eAAAmD,EAAAvD,qBAAA,KAAA,QAAA,SAAAsB,EAAAL,iCAAA,YALAuC,GAAA,uBAAAb,MAKA5B,GAAAkB,EAAAqB,EAAAC,EAAAE,EAAAJ,EAAAK,CAAA,+BAOAC,GAFK,SAAAC,KAELA,GAAA,SAAAC,KAAAA,GAAA,SAAAC,KAKKA,4BAxBDN,EAAJ,2BAAAH,EAAAtC,EAAAgD,oBAOA,EAAIC,OAAJP,kFAYAL,6GC9BkBa,GACxB,MAAOC,UAAS,GAAGD,EAAS,eAGLA,GACvB,MAAkBE,UAAVF,GAAiC,OAAVA,EAAkB,GAAGA,EAAU,cAGhCA,EAAeG,EAAaC,GAC1D,MAD0D,UAAAA,IAAAA,EAAO,GAC1DC,KAAKF,IAAIE,KAAKD,IAAIJ,EAAOG,GAAMC,cAGfJ,GACvB,MAAwB,gBAAVA,cAGSA,GACvB,OAAQM,MAAMC,EAAUP,eAGAA,GACxB,MAAiBE,UAAVF,GAAiC,OAAVA,aAGNA,GACxB,MAAIQ,GAASR,IACJ,IAAIA,GAAQS,OAAM,GAElB,cAIkBC,GAC3B,MAAOA,GAAKC,QAAQ,2BAA4B,0eCjC1CC,EAAA5E,EAAA4E,UAAWC,EAAA7E,EAAA6E,aAAcC,EAAA9E,EAAA8E,MAAOC,EAAA/E,EAAA+E,OAAmBC,EAAAhF,EAAAgF,qCACnDC,EAAAC,EAAAD,gBAAiBT,EAAAU,EAAAV,sBACjBzE,EAAAM,EAAAN,wEAmEN,QAAAI,GAAYgF,GA5DZC,KAASC,UAAG,EACZD,KAAKrC,SAyCJqC,KAAI7C,KAAG,EAWP6C,KAAUE,WAAG,GAAIT,IAAqB,GAQrCO,KAAK9D,SAAW6D,EAAO7D,SACvB8D,KAAKnC,cAAgBkC,EAAOlC,cAC5BmC,KAAKtC,eAAiBqC,EAAOrC,eAC7BsC,KAAKG,SAAWJ,EAAOI,SACvBH,KAAKI,QAAUL,EAAOK,QACtBJ,KAAKK,SAAWN,EAAOM,SACvBL,KAAKM,OAASP,EAAOO,OACrBN,KAAKO,KAAOR,EAAOQ,KAqLvB,MAlLExF,GAAAyF,UAAWC,YAAX,WAAyB,MAAOT,MAAK7C,KAAO,GAE5CpC,EAAAyF,UAAOE,QAAP,WAAqB,MAAOV,MAAK7C,KAAO6C,KAAKC,WAE7ClF,EAAAyF,UAAUG,WAAV,SAAWC,GAA4BZ,KAAKa,aAAaD,IAEzD7F,EAAAyF,UAAWM,YAAX,SAAYC,GAAgCf,KAAKa,aAAab,KAAK7C,OAKnEpC,EAAAyF,UAAUQ,WAAV,SAAWJ,GAAuB,MAAOA,MAAe,GAKhD7F,EAAAyF,UAAcS,eAAtB,SAAuBC,EAAeC,GAChCnB,KAAKG,WACHe,EAAQ,IACNA,EAAQ,GACVlB,KAAKrC,MAAMyD,SAAQ,GAErBpB,KAAKrC,MAAMyD,QAAQ,IAEjBD,EAAMnB,KAAKC,YACTkB,EAAOnB,KAAKC,UAAY,GAC1BD,KAAKrC,MAAM0D,MAAK,GAElBrB,KAAKrC,MAAM0D,KAAKrB,KAAKC,cAanBlF,EAAAyF,UAAcc,eAAtB,WACE,GAAIJ,GAAQ,EACRC,EAAMnB,KAAKC,UACXsB,EAAatC,KAAKuC,MAAMxB,KAAKI,QAAU,GACvCqB,EAAczB,KAAKI,QAAU,IAAM,EAAImB,EAAa,EAAIA,CAc5D,OAZIvB,MAAK7C,MAAQoE,EAEfJ,EAAMnB,KAAKI,QACFJ,KAAKC,UAAYD,KAAK7C,KAAOoE,EAEtCL,EAAQlB,KAAKC,UAAYD,KAAKI,SAG9Bc,EAAQlB,KAAK7C,KAAOoE,EAAa,EACjCJ,EAAMnB,KAAK7C,KAAOsE,IAGZP,EAAOC,IAMTpG,EAAAyF,UAAgBkB,iBAAxB,WACE,GAAIvE,GAAO8B,KAAK0C,KAAK3B,KAAK7C,KAAO6C,KAAKI,SAAW,EAC7Cc,EAAQ/D,EAAO6C,KAAKI,QACpBe,EAAMD,EAAQlB,KAAKI,OAEvB,QAAQc,EAAOC,IAGTpG,EAAAyF,UAAeoB,gBAAvB,SAAwBC,GACtB,GAAMC,GAAa9B,KAAK7C,IACxB6C,MAAK7C,KAAO0C,EAAgBgC,EAAW7B,KAAKC,UAAW,GAEnDD,KAAK7C,OAAS2E,GAChB9B,KAAKE,WAAW6B,KAAK/B,KAAK7C,OAItBpC,EAAAyF,UAAYK,aAApB,SAAqBmB,GACnBhC,KAAKC,UAAYhB,KAAK0C,KAAK3B,KAAKiC,eAAiBjC,KAAKK,UAEjDjB,EAASY,KAAKC,aACjBD,KAAKC,UAAY,GAInBD,KAAKrC,MAAMuE,OAAS,CACpB,KAAK,GAAIC,GAAI,EAAGA,GAAKnC,KAAKC,UAAWkC,IACnCnC,KAAKrC,MAAM0D,KAAKc,EAOlB,IAHAnC,KAAK4B,gBAAgBI,GAGjBhC,KAAKI,QAAU,GAAKJ,KAAKC,UAAYD,KAAKI,QAAS,CACrD,GAAIc,GAAQ,EACRC,EAAMnB,KAAKC,SAGXD,MAAKM,QACP8B,EAAApC,KAAoCsB,iBAAnCJ,EAAAkB,EAAK,GAAEjB,EAAAiB,EAAG,KAEXC,EAAArC,KAAsC0B,mBAArCR,EAAAmB,EAAK,GAAElB,EAAAkB,EAAG,IAGbrC,KAAKrC,MAAQqC,KAAKrC,MAAM0B,MAAM6B,EAAOC,GAGrCnB,KAAKiB,eAAeC,EAAOC,SAE/BkB,GACKtH,EAAUK,aACfC,KAAMmE,EAAWlE,OACjBgH,SAAU,iBACVC,gBAAiB3C,EAAwB4C,OACzCC,SAAU,ygEA0CL1H,EAAcS,eAAmE,WAAM,QAC7FH,KAD6FV,KAGvFI,EAAc2H,gBACrBxG,WAAeb,KAAMqE,IACrB7B,gBAAoBxC,KAAMqE,IAC1BhC,iBAAqBrC,KAAMqE,IAC3BS,WAAe9E,KAAMqE,IACrBY,SAAajF,KAAMqE,IACnBuC,iBAAqB5G,KAAMqE,IAC3BU,UAAc/E,KAAMqE,IACpBvC,OAAW9B,KAAMqE,IACjBW,WAAehF,KAAMqE,IACrBQ,aAAiB7E,KAAMsE,IACvBY,OAAWlF,KAAMqE,KAEjB3E,sNClQQ4H,EAAA/H,EAAA+H,qEAQR,QAAAhI,KACEqF,KAAQ9D,UAAG,EACX8D,KAAanC,eAAG,EAChBmC,KAActC,gBAAG,EACjBsC,KAAQG,UAAG,EACXH,KAAOI,QAAG,EACVJ,KAAQK,SAAG,GACXL,KAAMM,QAAG,EAQX,MANO3F,GAAUS,aACfC,KAAMsH,IAGDhI,EAAca,eAAmE,WAAM,UAE9Fb,0uBCtBI,MAAKf,8BACH,qBAAI,OAAmBmC,QACvBA,6BAAAiC,4BAAAvC,MAAAC,EAAAiB,KAAA,OAAA,KAAA,EAAAuB,EAAAnD,eAAA6H,EAAAjI,sCAAA,EAAA,wBAAsC,EAAtC,UAAAuF,WAAA,iBAAAzE,MAAAC,EAAAM,KAAA,MAAA,eAAAP,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,SAAA,KAAA,KAAA,KAAA,KAAA,QAAAF,MAAAC,EAAAM,KAAA,MAAA,iBAAA,OAAAP,MAAAC,EAAAM,KAAA,MAAA,aAAAP,MAAAC,EAAAM,KAAA,MAAA,WAAA,SAAAC,EAAAL,WAAAhC,mBAAAuD,eAAAf,0BACAxC,gBAAK,SAAA,SAAA,SAAA,WAAAuD,cAA4BF,qCADjBxB,MAAAC,EAAAC,KAAA,EAAA,KAAA,KAAA,EAAA,UAAA,KAAA,KAAA,KAAAkH,EAAsBC,KAAArH,MAAAC,EAAAiB,KAAA,MAAA,KAAA,EAAAC,EAAA9C,QAAA,KAAtC,QAAgB,SAAAmC,EAAsBL,iCADtC,+BAEA,IAAAF,GAAAkB,EAAAqB,EAAAC,EAAA0E,EAAAG,EAAAD,EAAAE,CAAK,gDCJXzE,iBAAAC,0rBCYa1E,EAAA,WAVb,QAAAA,KAWEkG,KAAI7C,KAAW,EACjB,MAAArD,MAFaA,EAAAE,GAAAC,EAVHuF,WACR8C,SAAU,OACVG,SAAU,wLAQC3I,YAGbA","file":"list.min.js","sourcesContent":["import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {NgbPaginationModule, NgbPaginationConfig} from '@ng-bootstrap/ng-bootstrap/pagination/pagination.module';\n\nimport {List} from './list';\n\n\nconst routes: Routes = [\n  {path: '', component: List},\n];\n\n@NgModule({\n  imports: [NgbPaginationModule, RouterModule.forChild(routes)],\n  declarations: [List],\n  providers: [NgbPaginationConfig]\n})\nexport class ListModule {}","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nimport {NgbPagination} from './pagination';\nimport {NgbPaginationConfig} from './pagination-config';\n\nexport {NgbPagination} from './pagination';\nexport {NgbPaginationConfig} from './pagination-config';\n\n\nexport class NgbPaginationModule {\n  static forRoot(): ModuleWithProviders { return {ngModule: NgbPaginationModule, providers: [NgbPaginationConfig]}; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{declarations: [NgbPagination], exports: [NgbPagination], imports: [CommonModule]}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","","export function toInteger(value: any): number {\n  return parseInt(`${value}`, 10);\n}\n\nexport function toString(value: any): string {\n  return (value !== undefined && value !== null) ? `${value}` : '';\n}\n\nexport function getValueInRange(value: number, max: number, min = 0): number {\n  return Math.max(Math.min(value, max), min);\n}\n\nexport function isString(value: any): boolean {\n  return typeof value === 'string';\n}\n\nexport function isNumber(value: any): boolean {\n  return !isNaN(toInteger(value));\n}\n\nexport function isDefined(value: any): boolean {\n  return value !== undefined && value !== null;\n}\n\nexport function padNumber(value: number) {\n  if (isNumber(value)) {\n    return `0${value}`.slice(-2);\n  } else {\n    return '';\n  }\n}\n\nexport function regExpEscape(text) {\n  return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Component, EventEmitter, Input, Output, OnChanges, ChangeDetectionStrategy, SimpleChanges} from '@angular/core';\nimport {getValueInRange, isNumber} from '../util/util';\nimport {NgbPaginationConfig} from './pagination-config';\n\n/**\n * A directive that will take care of visualising a pagination bar and enable / disable buttons correctly!\n */\n\nexport class NgbPagination implements OnChanges {\n  pageCount = 0;\n  pages: number[] = [];\n\n  /**\n   * Whether to disable buttons from user input\n   */\n   disabled: boolean;\n\n  /**\n   *  Whether to show the \"First\" and \"Last\" page links\n   */\n   boundaryLinks: boolean;\n\n  /**\n   *  Whether to show the \"Next\" and \"Previous\" page links\n   */\n   directionLinks: boolean;\n\n  /**\n   *  Whether to show ellipsis symbols and first/last page numbers when maxSize > number of pages\n   */\n   ellipses: boolean;\n\n  /**\n   *  Whether to rotate pages when maxSize > number of pages.\n   *  Current page will be in the middle\n   */\n   rotate: boolean;\n\n  /**\n   *  Number of items in collection.\n   */\n   collectionSize: number;\n\n  /**\n   *  Maximum number of pages to display.\n   */\n   maxSize: number;\n\n  /**\n   *  Current page.\n   */\n   page = 0;\n\n  /**\n   *  Number of items per page.\n   */\n   pageSize: number;\n\n  /**\n   *  An event fired when the page is changed.\n   *  Event's payload equals to the newly selected page.\n   */\n   pageChange = new EventEmitter<number>(true);\n\n  /**\n   * Pagination display size: small or large\n   */\n   size: 'sm' | 'lg';\n\n  constructor(config: NgbPaginationConfig) {\n    this.disabled = config.disabled;\n    this.boundaryLinks = config.boundaryLinks;\n    this.directionLinks = config.directionLinks;\n    this.ellipses = config.ellipses;\n    this.maxSize = config.maxSize;\n    this.pageSize = config.pageSize;\n    this.rotate = config.rotate;\n    this.size = config.size;\n  }\n\n  hasPrevious(): boolean { return this.page > 1; }\n\n  hasNext(): boolean { return this.page < this.pageCount; }\n\n  selectPage(pageNumber: number): void { this._updatePages(pageNumber); }\n\n  ngOnChanges(changes: SimpleChanges): void { this._updatePages(this.page); }\n\n  /**\n   * @internal\n   */\n  isEllipsis(pageNumber): boolean { return pageNumber === -1; }\n\n  /**\n   * Appends ellipses and first/last page number to the displayed pages\n   */\n  private _applyEllipses(start: number, end: number) {\n    if (this.ellipses) {\n      if (start > 0) {\n        if (start > 1) {\n          this.pages.unshift(-1);\n        }\n        this.pages.unshift(1);\n      }\n      if (end < this.pageCount) {\n        if (end < (this.pageCount - 1)) {\n          this.pages.push(-1);\n        }\n        this.pages.push(this.pageCount);\n      }\n    }\n  }\n\n  /**\n   * Rotates page numbers based on maxSize items visible.\n   * Currently selected page stays in the middle:\n   *\n   * Ex. for selected page = 6:\n   * [5,*6*,7] for maxSize = 3\n   * [4,5,*6*,7] for maxSize = 4\n   */\n  private _applyRotation(): [number, number] {\n    let start = 0;\n    let end = this.pageCount;\n    let leftOffset = Math.floor(this.maxSize / 2);\n    let rightOffset = this.maxSize % 2 === 0 ? leftOffset - 1 : leftOffset;\n\n    if (this.page <= leftOffset) {\n      // very beginning, no rotation -> [0..maxSize]\n      end = this.maxSize;\n    } else if (this.pageCount - this.page < leftOffset) {\n      // very end, no rotation -> [len-maxSize..len]\n      start = this.pageCount - this.maxSize;\n    } else {\n      // rotate\n      start = this.page - leftOffset - 1;\n      end = this.page + rightOffset;\n    }\n\n    return [start, end];\n  }\n\n  /**\n   * Paginates page numbers based on maxSize items per page\n   */\n  private _applyPagination(): [number, number] {\n    let page = Math.ceil(this.page / this.maxSize) - 1;\n    let start = page * this.maxSize;\n    let end = start + this.maxSize;\n\n    return [start, end];\n  }\n\n  private _setPageInRange(newPageNo) {\n    const prevPageNo = this.page;\n    this.page = getValueInRange(newPageNo, this.pageCount, 1);\n\n    if (this.page !== prevPageNo) {\n      this.pageChange.emit(this.page);\n    }\n  }\n\n  private _updatePages(newPage: number) {\n    this.pageCount = Math.ceil(this.collectionSize / this.pageSize);\n\n    if (!isNumber(this.pageCount)) {\n      this.pageCount = 0;\n    }\n\n    // fill-in model needed to render pages\n    this.pages.length = 0;\n    for (let i = 1; i <= this.pageCount; i++) {\n      this.pages.push(i);\n    }\n\n    // set page within 1..max range\n    this._setPageInRange(newPage);\n\n    // apply maxSize if necessary\n    if (this.maxSize > 0 && this.pageCount > this.maxSize) {\n      let start = 0;\n      let end = this.pageCount;\n\n      // either paginating or rotating page numbers\n      if (this.rotate) {\n        [start, end] = this._applyRotation();\n      } else {\n        [start, end] = this._applyPagination();\n      }\n\n      this.pages = this.pages.slice(start, end);\n\n      // adding ellipses\n      this._applyEllipses(start, end);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n  selector: 'ngb-pagination',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <nav>\n      <ul [class]=\"'pagination' + (size ? ' pagination-' + size : '')\">\n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" \n          [class.disabled]=\"!hasPrevious() || disabled\">\n          <a aria-label=\"First\" class=\"page-link\" href (click)=\"!!selectPage(1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>                \n        </li>\n      \n        <li *ngIf=\"directionLinks\" class=\"page-item\" \n          [class.disabled]=\"!hasPrevious() || disabled\">\n          <a aria-label=\"Previous\" class=\"page-link\" href (click)=\"!!selectPage(page-1)\" [attr.tabindex]=\"hasPrevious() ? null : '-1'\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">Previous</span>\n          </a>\n        </li>\n        <li *ngFor=\"let pageNumber of pages\" class=\"page-item\" [class.active]=\"pageNumber === page\" \n          [class.disabled]=\"isEllipsis(pageNumber) || disabled\">\n          <a *ngIf=\"isEllipsis(pageNumber)\" class=\"page-link\">...</a>\n          <a *ngIf=\"!isEllipsis(pageNumber)\" class=\"page-link\" href (click)=\"!!selectPage(pageNumber)\">{{pageNumber}}</a>\n        </li>\n        <li *ngIf=\"directionLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n          <a aria-label=\"Next\" class=\"page-link\" href (click)=\"!!selectPage(page+1)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li *ngIf=\"boundaryLinks\" class=\"page-item\" [class.disabled]=\"!hasNext() || disabled\">\n          <a aria-label=\"Last\" class=\"page-link\" href (click)=\"!!selectPage(pageCount)\" [attr.tabindex]=\"hasNext() ? null : '-1'\">\n            <span aria-hidden=\"true\">&raquo;&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>                \n        </li>        \n      </ul>\n    </nav>\n  `\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgbPaginationConfig, },\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'disabled': [{ type: Input },],\n'boundaryLinks': [{ type: Input },],\n'directionLinks': [{ type: Input },],\n'ellipses': [{ type: Input },],\n'rotate': [{ type: Input },],\n'collectionSize': [{ type: Input },],\n'maxSize': [{ type: Input },],\n'page': [{ type: Input },],\n'pageSize': [{ type: Input },],\n'pageChange': [{ type: Output },],\n'size': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\n\n/**\n * Configuration service for the NgbPagination component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the paginations used in the application.\n */\n\nexport class NgbPaginationConfig {\n  disabled = false;\n  boundaryLinks = false;\n  directionLinks = true;\n  ellipses = true;\n  maxSize = 0;\n  pageSize = 10;\n  rotate = false;\n  size: 'sm' | 'lg';\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","","","import {Component} from '@angular/core'\n\n@Component({\n  selector: 'list',\n  template: `\n    <div>\n      <h2>Paginated list</h2>\n      <ngb-pagination [collectionSize]=\"70\" [(page)]=\"page\"></ngb-pagination>\n      <pre>Current page: {{page}}</pre>\n    </div>\n  `,\n})\nexport class List {\n  page: number = 1;\n}\n"]}