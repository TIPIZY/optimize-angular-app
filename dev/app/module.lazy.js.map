{"version":3,"file":"module.lazy.js","sourceRoot":"","sources":["../../../app/module.lazy.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAUM,SAAS,GAAW;gBACxB,EAAC,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,iBAAO,EAAC;gBAC9B,EAAC,IAAI,EAAE,MAAM,EAAE,YAAY,EAAE,iCAAiC,EAAC;gBAC/D,EAAC,IAAI,EAAE,WAAW,EAAE,YAAY,EAAE,gDAAgD,EAAC;gBACnF,EAAC,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,uCAAuC,EAAC;aACxE,CAAC;YAGW,sBAAsB;gBADnC;oBAEE,qBAAgB,GAAa,EAAE,CAAC;gBAUlC,CAAC;gBARC,wCAAO,GAAP,UAAQ,KAAY,EAAE,IAAc;oBAClC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,CAAC,CAAC;wBACzB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;wBACvC,MAAM,CAAC,IAAI,EAAE,CAAC;oBAChB,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,uBAAU,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;oBAC7B,CAAC;gBACH,CAAC;gBACH,6BAAC;YAAD,CAAC,AAXD,IAWC;YAXY,sBAAsB;gBADlC,iBAAU,EAAE;eACA,sBAAsB,CAWlC;;YAQY,aAAa;gBAA1B;gBAA4B,CAAC;gBAAD,oBAAC;YAAD,CAAC,AAA7B,IAA6B;YAAhB,aAAa;gBANzB,eAAQ,CAAC;oBACR,OAAO,EAAE,CAAC,gCAAa,EAAE,qBAAY,CAAC,OAAO,CAAC,SAAS,EAAE,EAAC,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,sBAAsB,EAAC,CAAC,EAAE,8BAAa,CAAC;oBACrI,YAAY,EAAE,CAAC,SAAG,CAAC;oBACnB,SAAS,EAAE,CAAC,SAAG,CAAC;oBAChB,SAAS,EAAE,CAAC,sBAAsB,CAAC;iBACpC,CAAC;eACW,aAAa,CAAG;;QAAA,CAAC","sourcesContent":["import {NgModule, Injectable} from '@angular/core';\nimport {BrowserModule} from '@angular/platform-browser';\nimport {RouterModule, Routes, PreloadingStrategy, Route} from '@angular/router';\nimport 'rxjs/add/observable/of';\nimport { Observable } from 'rxjs/Observable';\n\nimport {App} from './app';\nimport {WelcomeModule} from './welcome/welcome.module';\nimport {Welcome} from './welcome/welcome';\n\nconst appRoutes: Routes = [\n  {path: '', component: Welcome},\n  {path: 'list', loadChildren: 'app/list/list.module#ListModule'},\n  {path: 'subscribe', loadChildren: 'app/subscribe/subscribe.module#SubscribeModule'},\n  {path: 'search', loadChildren: 'app/search/search.module#SearchModule'}\n];\n\n@Injectable()\nexport class PreloadSelectedModules implements PreloadingStrategy {\n  preloadedModules: string[] = [];\n\n  preload(route: Route, load: Function): Observable<any> {\n    if (route.path == 'list') {\n      this.preloadedModules.push(route.path);\n      return load();\n    } else {\n      return Observable.of(null);\n    }\n  }\n}\n\n@NgModule({\n  imports: [BrowserModule, RouterModule.forRoot(appRoutes, {useHash: true, preloadingStrategy: PreloadSelectedModules}), WelcomeModule],\n  declarations: [App],\n  bootstrap: [App],\n  providers: [PreloadSelectedModules]\n})\nexport class AppLazyModule {}"]}