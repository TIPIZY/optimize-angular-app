/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
System.register(['@angular/forms/src/directives/ng_control_status', '@angular/core/src/linker/view_utils'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var import0, import2;
    var Wrapper_NgControlStatus, Wrapper_NgControlStatusGroup;
    return {
        setters:[
            function (import0_1) {
                import0 = import0_1;
            },
            function (import2_1) {
                import2 = import2_1;
            }],
        execute: function() {
            Wrapper_NgControlStatus = (function () {
                function Wrapper_NgControlStatus(p0) {
                    this._changed = false;
                    this.context = new import0.NgControlStatus(p0);
                    this._expr_0 = undefined;
                    this._expr_1 = undefined;
                    this._expr_2 = undefined;
                    this._expr_3 = undefined;
                    this._expr_4 = undefined;
                    this._expr_5 = undefined;
                    this._expr_6 = undefined;
                }
                Wrapper_NgControlStatus.prototype.ngOnDetach = function (view, componentView, el) {
                };
                Wrapper_NgControlStatus.prototype.ngOnDestroy = function () {
                };
                Wrapper_NgControlStatus.prototype.ngDoCheck = function (view, el) {
                    var changed = this._changed;
                    this._changed = false;
                    return changed;
                };
                Wrapper_NgControlStatus.prototype.checkHost = function (view, componentView, el) {
                    var currVal_0 = this.context.ngClassUntouched;
                    import2.checkRenderClass(view, el, 'ng-untouched', this._expr_0, (this._expr_0 = currVal_0), false);
                    var currVal_1 = this.context.ngClassTouched;
                    import2.checkRenderClass(view, el, 'ng-touched', this._expr_1, (this._expr_1 = currVal_1), false);
                    var currVal_2 = this.context.ngClassPristine;
                    import2.checkRenderClass(view, el, 'ng-pristine', this._expr_2, (this._expr_2 = currVal_2), false);
                    var currVal_3 = this.context.ngClassDirty;
                    import2.checkRenderClass(view, el, 'ng-dirty', this._expr_3, (this._expr_3 = currVal_3), false);
                    var currVal_4 = this.context.ngClassValid;
                    import2.checkRenderClass(view, el, 'ng-valid', this._expr_4, (this._expr_4 = currVal_4), false);
                    var currVal_5 = this.context.ngClassInvalid;
                    import2.checkRenderClass(view, el, 'ng-invalid', this._expr_5, (this._expr_5 = currVal_5), false);
                    var currVal_6 = this.context.ngClassPending;
                    import2.checkRenderClass(view, el, 'ng-pending', this._expr_6, (this._expr_6 = currVal_6), false);
                };
                Wrapper_NgControlStatus.prototype.handleEvent = function (eventName, $event) {
                    var result = true;
                    return result;
                };
                Wrapper_NgControlStatus.prototype.subscribe = function (view, _eventHandler) {
                    this._eventHandler = _eventHandler;
                };
                return Wrapper_NgControlStatus;
            }());
            exports_1("Wrapper_NgControlStatus", Wrapper_NgControlStatus);
            Wrapper_NgControlStatusGroup = (function () {
                function Wrapper_NgControlStatusGroup(p0) {
                    this._changed = false;
                    this.context = new import0.NgControlStatusGroup(p0);
                    this._expr_0 = undefined;
                    this._expr_1 = undefined;
                    this._expr_2 = undefined;
                    this._expr_3 = undefined;
                    this._expr_4 = undefined;
                    this._expr_5 = undefined;
                    this._expr_6 = undefined;
                }
                Wrapper_NgControlStatusGroup.prototype.ngOnDetach = function (view, componentView, el) {
                };
                Wrapper_NgControlStatusGroup.prototype.ngOnDestroy = function () {
                };
                Wrapper_NgControlStatusGroup.prototype.ngDoCheck = function (view, el) {
                    var changed = this._changed;
                    this._changed = false;
                    return changed;
                };
                Wrapper_NgControlStatusGroup.prototype.checkHost = function (view, componentView, el) {
                    var currVal_0 = this.context.ngClassUntouched;
                    import2.checkRenderClass(view, el, 'ng-untouched', this._expr_0, (this._expr_0 = currVal_0), false);
                    var currVal_1 = this.context.ngClassTouched;
                    import2.checkRenderClass(view, el, 'ng-touched', this._expr_1, (this._expr_1 = currVal_1), false);
                    var currVal_2 = this.context.ngClassPristine;
                    import2.checkRenderClass(view, el, 'ng-pristine', this._expr_2, (this._expr_2 = currVal_2), false);
                    var currVal_3 = this.context.ngClassDirty;
                    import2.checkRenderClass(view, el, 'ng-dirty', this._expr_3, (this._expr_3 = currVal_3), false);
                    var currVal_4 = this.context.ngClassValid;
                    import2.checkRenderClass(view, el, 'ng-valid', this._expr_4, (this._expr_4 = currVal_4), false);
                    var currVal_5 = this.context.ngClassInvalid;
                    import2.checkRenderClass(view, el, 'ng-invalid', this._expr_5, (this._expr_5 = currVal_5), false);
                    var currVal_6 = this.context.ngClassPending;
                    import2.checkRenderClass(view, el, 'ng-pending', this._expr_6, (this._expr_6 = currVal_6), false);
                };
                Wrapper_NgControlStatusGroup.prototype.handleEvent = function (eventName, $event) {
                    var result = true;
                    return result;
                };
                Wrapper_NgControlStatusGroup.prototype.subscribe = function (view, _eventHandler) {
                    this._eventHandler = _eventHandler;
                };
                return Wrapper_NgControlStatusGroup;
            }());
            exports_1("Wrapper_NgControlStatusGroup", Wrapper_NgControlStatusGroup);
        }
    }
});
//# sourceMappingURL=ng_control_status.ngfactory.js.map