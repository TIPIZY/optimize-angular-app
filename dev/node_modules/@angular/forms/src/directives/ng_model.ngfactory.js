/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
System.register(['@angular/forms/src/directives/ng_model', '@angular/core/src/linker/view_utils'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var import0, import2;
    var Wrapper_NgModel;
    return {
        setters:[
            function (import0_1) {
                import0 = import0_1;
            },
            function (import2_1) {
                import2 = import2_1;
            }],
        execute: function() {
            Wrapper_NgModel = (function () {
                function Wrapper_NgModel(p0, p1, p2, p3) {
                    this._changed = false;
                    this._changes = {};
                    this.context = new import0.NgModel(p0, p1, p2, p3);
                    this._expr_0 = undefined;
                    this._expr_1 = undefined;
                    this._expr_2 = undefined;
                    this._expr_3 = undefined;
                }
                Wrapper_NgModel.prototype.ngOnDetach = function (view, componentView, el) {
                };
                Wrapper_NgModel.prototype.ngOnDestroy = function () {
                    this.context.ngOnDestroy();
                    (this.subscription0 && this.subscription0.unsubscribe());
                };
                Wrapper_NgModel.prototype.check_name = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_0, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.name = currValue;
                        this._expr_0 = currValue;
                        this._changes['name'] = change;
                    }
                };
                Wrapper_NgModel.prototype.check_isDisabled = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_1, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.isDisabled = currValue;
                        this._expr_1 = currValue;
                        this._changes['isDisabled'] = change;
                    }
                };
                Wrapper_NgModel.prototype.check_model = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_2, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.model = currValue;
                        this._expr_2 = currValue;
                        this._changes['model'] = change;
                    }
                };
                Wrapper_NgModel.prototype.check_options = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_3, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.options = currValue;
                        this._expr_3 = currValue;
                        this._changes['options'] = change;
                    }
                };
                Wrapper_NgModel.prototype.ngDoCheck = function (view, el) {
                    var changed = this._changed;
                    this._changed = false;
                    if (!view.throwOnChange) {
                        if (changed) {
                            this.context.ngOnChanges(this._changes);
                            this._changes = {};
                        }
                    }
                    return changed;
                };
                Wrapper_NgModel.prototype.checkHost = function (view, componentView, el) {
                };
                Wrapper_NgModel.prototype.handleEvent = function (eventName, $event) {
                    var result = true;
                    if ((eventName == 'compositionstart')) {
                        var pd_sub_0 = (this.context.compositionStart() !== false);
                        result = (pd_sub_0 && result);
                    }
                    if ((eventName == 'compositionend')) {
                        var pd_sub_1 = (this.context.compositionEnd() !== false);
                        result = (pd_sub_1 && result);
                    }
                    return result;
                };
                Wrapper_NgModel.prototype.subscribe = function (view, _eventHandler, emit0) {
                    this._eventHandler = _eventHandler;
                    if (emit0) {
                        (this.subscription0 = this.context.update.subscribe(_eventHandler.bind(view, 'ngModelChange')));
                    }
                };
                return Wrapper_NgModel;
            }());
            exports_1("Wrapper_NgModel", Wrapper_NgModel);
        }
    }
});
//# sourceMappingURL=ng_model.ngfactory.js.map