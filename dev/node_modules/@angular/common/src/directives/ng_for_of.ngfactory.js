/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
/* tslint:disable */
System.register(['@angular/common/src/directives/ng_for_of', '@angular/core/src/linker/view_utils'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var import0, import2;
    var Wrapper_NgForOf, Wrapper_NgFor;
    return {
        setters:[
            function (import0_1) {
                import0 = import0_1;
            },
            function (import2_1) {
                import2 = import2_1;
            }],
        execute: function() {
            Wrapper_NgForOf = (function () {
                function Wrapper_NgForOf(p0, p1, p2, p3) {
                    this._changed = false;
                    this._changes = {};
                    this.context = new import0.NgForOf(p0, p1, p2, p3);
                    this._expr_0 = undefined;
                    this._expr_1 = undefined;
                    this._expr_2 = undefined;
                }
                Wrapper_NgForOf.prototype.ngOnDetach = function (view, componentView, el) {
                };
                Wrapper_NgForOf.prototype.ngOnDestroy = function () {
                };
                Wrapper_NgForOf.prototype.check_ngForOf = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_0, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.ngForOf = currValue;
                        this._expr_0 = currValue;
                        this._changes['ngForOf'] = change;
                    }
                };
                Wrapper_NgForOf.prototype.check_ngForTrackBy = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_1, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.ngForTrackBy = currValue;
                        this._expr_1 = currValue;
                        this._changes['ngForTrackBy'] = change;
                    }
                };
                Wrapper_NgForOf.prototype.check_ngForTemplate = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_2, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.ngForTemplate = currValue;
                        this._expr_2 = currValue;
                        this._changes['ngForTemplate'] = change;
                    }
                };
                Wrapper_NgForOf.prototype.ngDoCheck = function (view, el) {
                    var changed = this._changed;
                    this._changed = false;
                    if (!view.throwOnChange) {
                        if (changed) {
                            this.context.ngOnChanges(this._changes);
                            this._changes = {};
                        }
                        this.context.ngDoCheck();
                    }
                    return changed;
                };
                Wrapper_NgForOf.prototype.checkHost = function (view, componentView, el) {
                };
                Wrapper_NgForOf.prototype.handleEvent = function (eventName, $event) {
                    var result = true;
                    return result;
                };
                Wrapper_NgForOf.prototype.subscribe = function (view, _eventHandler) {
                    this._eventHandler = _eventHandler;
                };
                return Wrapper_NgForOf;
            }());
            exports_1("Wrapper_NgForOf", Wrapper_NgForOf);
            Wrapper_NgFor = (function () {
                function Wrapper_NgFor(p0, p1, p2, p3) {
                    this._changed = false;
                    this._changes = {};
                    this.context = new import0.NgFor(p0, p1, p2, p3);
                    this._expr_0 = undefined;
                    this._expr_1 = undefined;
                    this._expr_2 = undefined;
                }
                Wrapper_NgFor.prototype.ngOnDetach = function (view, componentView, el) {
                };
                Wrapper_NgFor.prototype.ngOnDestroy = function () {
                };
                Wrapper_NgFor.prototype.check_ngForOf = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_0, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.ngForOf = currValue;
                        this._expr_0 = currValue;
                        this._changes['ngForOf'] = change;
                    }
                };
                Wrapper_NgFor.prototype.check_ngForTrackBy = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_1, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.ngForTrackBy = currValue;
                        this._expr_1 = currValue;
                        this._changes['ngForTrackBy'] = change;
                    }
                };
                Wrapper_NgFor.prototype.check_ngForTemplate = function (view, currValue, forceUpdate) {
                    var change = import2.checkBindingChange(view, this._expr_2, currValue, forceUpdate);
                    if (change) {
                        this._changed = true;
                        this.context.ngForTemplate = currValue;
                        this._expr_2 = currValue;
                        this._changes['ngForTemplate'] = change;
                    }
                };
                Wrapper_NgFor.prototype.ngDoCheck = function (view, el) {
                    var changed = this._changed;
                    this._changed = false;
                    if (!view.throwOnChange) {
                        if (changed) {
                            this.context.ngOnChanges(this._changes);
                            this._changes = {};
                        }
                        this.context.ngDoCheck();
                    }
                    return changed;
                };
                Wrapper_NgFor.prototype.checkHost = function (view, componentView, el) {
                };
                Wrapper_NgFor.prototype.handleEvent = function (eventName, $event) {
                    var result = true;
                    return result;
                };
                Wrapper_NgFor.prototype.subscribe = function (view, _eventHandler) {
                    this._eventHandler = _eventHandler;
                };
                return Wrapper_NgFor;
            }());
            exports_1("Wrapper_NgFor", Wrapper_NgFor);
        }
    }
});
//# sourceMappingURL=ng_for_of.ngfactory.js.map