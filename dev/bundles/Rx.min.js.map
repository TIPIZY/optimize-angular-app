{"version":3,"sources":["../../../node_modules/rxjs/src/observable/BoundCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindCallback.ts","../../../node_modules/rxjs/src/add/observable/bindCallback.ts","../../../node_modules/rxjs/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/add/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/observable/combineLatest.ts","../../../node_modules/rxjs/src/add/observable/combineLatest.ts","../../../node_modules/rxjs/src/observable/concat.ts","../../../node_modules/rxjs/src/add/observable/concat.ts","../../../node_modules/rxjs/src/observable/DeferObservable.ts","../../../node_modules/rxjs/src/observable/defer.ts","../../../node_modules/rxjs/src/add/observable/defer.ts","../../../node_modules/rxjs/src/observable/empty.ts","../../../node_modules/rxjs/src/add/observable/empty.ts","../../../node_modules/rxjs/src/observable/ForkJoinObservable.ts","../../../node_modules/rxjs/src/observable/forkJoin.ts","../../../node_modules/rxjs/src/add/observable/forkJoin.ts","../../../node_modules/rxjs/src/observable/from.ts","../../../node_modules/rxjs/src/add/observable/from.ts","../../../node_modules/rxjs/src/observable/FromEventObservable.ts","../../../node_modules/rxjs/src/observable/fromEvent.ts","../../../node_modules/rxjs/src/add/observable/fromEvent.ts","../../../node_modules/rxjs/src/observable/FromEventPatternObservable.ts","../../../node_modules/rxjs/src/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/add/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/observable/fromPromise.ts","../../../node_modules/rxjs/src/add/observable/fromPromise.ts","../../../node_modules/rxjs/src/observable/GenerateObservable.ts","../../../node_modules/rxjs/src/add/observable/generate.ts","../../../node_modules/rxjs/src/observable/IfObservable.ts","../../../node_modules/rxjs/src/observable/if.ts","../../../node_modules/rxjs/src/add/observable/if.ts","../../../node_modules/rxjs/src/observable/IntervalObservable.ts","../../../node_modules/rxjs/src/observable/interval.ts","../../../node_modules/rxjs/src/add/observable/interval.ts","../../../node_modules/rxjs/src/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/race.ts","../../../node_modules/rxjs/src/observable/NeverObservable.ts","../../../node_modules/rxjs/src/observable/never.ts","../../../node_modules/rxjs/src/add/observable/never.ts","../../../node_modules/rxjs/src/observable/of.ts","../../../node_modules/rxjs/src/add/observable/of.ts","../../../node_modules/rxjs/src/add/observable/onErrorResumeNext.ts","../../../node_modules/rxjs/src/observable/PairsObservable.ts","../../../node_modules/rxjs/src/observable/pairs.ts","../../../node_modules/rxjs/src/add/observable/pairs.ts","../../../node_modules/rxjs/src/observable/RangeObservable.ts","../../../node_modules/rxjs/src/observable/range.ts","../../../node_modules/rxjs/src/add/observable/range.ts","../../../node_modules/rxjs/src/observable/UsingObservable.ts","../../../node_modules/rxjs/src/observable/using.ts","../../../node_modules/rxjs/src/add/observable/using.ts","../../../node_modules/rxjs/src/observable/ErrorObservable.ts","../../../node_modules/rxjs/src/observable/throw.ts","../../../node_modules/rxjs/src/add/observable/throw.ts","../../../node_modules/rxjs/src/observable/TimerObservable.ts","../../../node_modules/rxjs/src/observable/timer.ts","../../../node_modules/rxjs/src/add/observable/timer.ts","../../../node_modules/rxjs/src/observable/zip.ts","../../../node_modules/rxjs/src/add/observable/zip.ts","../../../node_modules/rxjs/src/observable/dom/ajax.ts","../../../node_modules/rxjs/src/add/observable/dom/ajax.ts","../../../node_modules/rxjs/src/util/assign.ts","../../../node_modules/rxjs/src/observable/dom/WebSocketSubject.ts","../../../node_modules/rxjs/src/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/add/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/operator/buffer.ts","../../../node_modules/rxjs/src/add/operator/buffer.ts","../../../node_modules/rxjs/src/operator/bufferCount.ts","../../../node_modules/rxjs/src/add/operator/bufferCount.ts","../../../node_modules/rxjs/src/operator/bufferTime.ts","../../../node_modules/rxjs/src/add/operator/bufferTime.ts","../../../node_modules/rxjs/src/operator/bufferToggle.ts","../../../node_modules/rxjs/src/add/operator/bufferToggle.ts","../../../node_modules/rxjs/src/operator/bufferWhen.ts","../../../node_modules/rxjs/src/add/operator/bufferWhen.ts","../../../node_modules/rxjs/src/operator/catch.ts","../../../node_modules/rxjs/src/add/operator/catch.ts","../../../node_modules/rxjs/src/operator/combineAll.ts","../../../node_modules/rxjs/src/add/operator/combineAll.ts","../../../node_modules/rxjs/src/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/concat.ts","../../../node_modules/rxjs/src/operator/concatAll.ts","../../../node_modules/rxjs/src/add/operator/concatAll.ts","../../../node_modules/rxjs/src/operator/concatMap.ts","../../../node_modules/rxjs/src/add/operator/concatMap.ts","../../../node_modules/rxjs/src/operator/concatMapTo.ts","../../../node_modules/rxjs/src/add/operator/concatMapTo.ts","../../../node_modules/rxjs/src/operator/count.ts","../../../node_modules/rxjs/src/add/operator/count.ts","../../../node_modules/rxjs/src/operator/dematerialize.ts","../../../node_modules/rxjs/src/add/operator/dematerialize.ts","../../../node_modules/rxjs/src/operator/debounce.ts","../../../node_modules/rxjs/src/add/operator/debounce.ts","../../../node_modules/rxjs/src/operator/debounceTime.ts","../../../node_modules/rxjs/src/add/operator/debounceTime.ts","../../../node_modules/rxjs/src/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/add/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/operator/delay.ts","../../../node_modules/rxjs/src/add/operator/delay.ts","../../../node_modules/rxjs/src/operator/delayWhen.ts","../../../node_modules/rxjs/src/add/operator/delayWhen.ts","../../../node_modules/rxjs/src/util/Set.ts","../../../node_modules/rxjs/src/operator/distinct.ts","../../../node_modules/rxjs/src/add/operator/distinct.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/operator/do.ts","../../../node_modules/rxjs/src/add/operator/do.ts","../../../node_modules/rxjs/src/operator/exhaust.ts","../../../node_modules/rxjs/src/add/operator/exhaust.ts","../../../node_modules/rxjs/src/operator/exhaustMap.ts","../../../node_modules/rxjs/src/add/operator/exhaustMap.ts","../../../node_modules/rxjs/src/operator/expand.ts","../../../node_modules/rxjs/src/add/operator/expand.ts","../../../node_modules/rxjs/src/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/filter.ts","../../../node_modules/rxjs/src/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/find.ts","../../../node_modules/rxjs/src/operator/find.ts","../../../node_modules/rxjs/src/operator/findIndex.ts","../../../node_modules/rxjs/src/add/operator/findIndex.ts","../../../node_modules/rxjs/src/operator/first.ts","../../../node_modules/rxjs/src/add/operator/first.ts","../../../node_modules/rxjs/src/util/MapPolyfill.ts","../../../node_modules/rxjs/src/util/Map.ts","../../../node_modules/rxjs/src/util/FastMap.ts","../../../node_modules/rxjs/src/operator/groupBy.ts","../../../node_modules/rxjs/src/add/operator/groupBy.ts","../../../node_modules/rxjs/src/util/noop.ts","../../../node_modules/rxjs/src/operator/ignoreElements.ts","../../../node_modules/rxjs/src/add/operator/ignoreElements.ts","../../../node_modules/rxjs/src/operator/isEmpty.ts","../../../node_modules/rxjs/src/add/operator/isEmpty.ts","../../../node_modules/rxjs/src/operator/audit.ts","../../../node_modules/rxjs/src/add/operator/audit.ts","../../../node_modules/rxjs/src/operator/auditTime.ts","../../../node_modules/rxjs/src/add/operator/auditTime.ts","../../../node_modules/rxjs/src/operator/last.ts","../../../node_modules/rxjs/src/add/operator/last.ts","../../../node_modules/rxjs/src/operator/let.ts","../../../node_modules/rxjs/src/add/operator/let.ts","../../../node_modules/rxjs/src/operator/every.ts","../../../node_modules/rxjs/src/add/operator/every.ts","../../../node_modules/rxjs/src/add/operator/map.ts","../../../node_modules/rxjs/src/operator/mapTo.ts","../../../node_modules/rxjs/src/add/operator/mapTo.ts","../../../node_modules/rxjs/src/operator/materialize.ts","../../../node_modules/rxjs/src/add/operator/materialize.ts","../../../node_modules/rxjs/src/operator/max.ts","../../../node_modules/rxjs/src/add/operator/max.ts","../../../node_modules/rxjs/src/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/mergeMap.ts","../../../node_modules/rxjs/src/add/operator/mergeMap.ts","../../../node_modules/rxjs/src/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/add/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/operator/mergeScan.ts","../../../node_modules/rxjs/src/add/operator/mergeScan.ts","../../../node_modules/rxjs/src/operator/min.ts","../../../node_modules/rxjs/src/add/operator/min.ts","../../../node_modules/rxjs/src/add/operator/multicast.ts","../../../node_modules/rxjs/src/add/operator/observeOn.ts","../../../node_modules/rxjs/src/observable/PromiseObservable.ts","../../../node_modules/rxjs/src/observable/IteratorObservable.ts","../../../node_modules/rxjs/src/observable/ArrayLikeObservable.ts","../../../node_modules/rxjs/src/observable/FromObservable.ts","../../../node_modules/rxjs/src/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/add/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/operator/pairwise.ts","../../../node_modules/rxjs/src/add/operator/pairwise.ts","../../../node_modules/rxjs/src/util/not.ts","../../../node_modules/rxjs/src/operator/filter.ts","../../../node_modules/rxjs/src/operator/partition.ts","../../../node_modules/rxjs/src/add/operator/partition.ts","../../../node_modules/rxjs/src/operator/pluck.ts","../../../node_modules/rxjs/src/add/operator/pluck.ts","../../../node_modules/rxjs/src/operator/publish.ts","../../../node_modules/rxjs/src/add/operator/publish.ts","../../../node_modules/rxjs/src/operator/publishBehavior.ts","../../../node_modules/rxjs/src/add/operator/publishBehavior.ts","../../../node_modules/rxjs/src/operator/publishReplay.ts","../../../node_modules/rxjs/src/add/operator/publishReplay.ts","../../../node_modules/rxjs/src/operator/publishLast.ts","../../../node_modules/rxjs/src/add/operator/publishLast.ts","../../../node_modules/rxjs/src/operator/race.ts","../../../node_modules/rxjs/src/add/operator/race.ts","../../../node_modules/rxjs/src/operator/reduce.ts","../../../node_modules/rxjs/src/add/operator/reduce.ts","../../../node_modules/rxjs/src/operator/repeat.ts","../../../node_modules/rxjs/src/add/operator/repeat.ts","../../../node_modules/rxjs/src/operator/repeatWhen.ts","../../../node_modules/rxjs/src/add/operator/repeatWhen.ts","../../../node_modules/rxjs/src/operator/retry.ts","../../../node_modules/rxjs/src/add/operator/retry.ts","../../../node_modules/rxjs/src/operator/retryWhen.ts","../../../node_modules/rxjs/src/add/operator/retryWhen.ts","../../../node_modules/rxjs/src/operator/sample.ts","../../../node_modules/rxjs/src/add/operator/sample.ts","../../../node_modules/rxjs/src/operator/sampleTime.ts","../../../node_modules/rxjs/src/add/operator/sampleTime.ts","../../../node_modules/rxjs/src/operator/scan.ts","../../../node_modules/rxjs/src/add/operator/scan.ts","../../../node_modules/rxjs/src/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/add/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/operator/multicast.ts","../../../node_modules/rxjs/src/operator/share.ts","../../../node_modules/rxjs/src/add/operator/share.ts","../../../node_modules/rxjs/src/operator/single.ts","../../../node_modules/rxjs/src/add/operator/single.ts","../../../node_modules/rxjs/src/operator/skip.ts","../../../node_modules/rxjs/src/add/operator/skip.ts","../../../node_modules/rxjs/src/operator/skipUntil.ts","../../../node_modules/rxjs/src/add/operator/skipUntil.ts","../../../node_modules/rxjs/src/operator/skipWhile.ts","../../../node_modules/rxjs/src/add/operator/skipWhile.ts","../../../node_modules/rxjs/src/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/concat.ts","../../../node_modules/rxjs/src/operator/startWith.ts","../../../node_modules/rxjs/src/add/operator/startWith.ts","../../../node_modules/rxjs/src/observable/SubscribeOnObservable.ts","../../../node_modules/rxjs/src/operator/subscribeOn.ts","../../../node_modules/rxjs/src/add/operator/subscribeOn.ts","../../../node_modules/rxjs/src/operator/switch.ts","../../../node_modules/rxjs/src/add/operator/switch.ts","../../../node_modules/rxjs/src/operator/switchMap.ts","../../../node_modules/rxjs/src/add/operator/switchMap.ts","../../../node_modules/rxjs/src/operator/switchMapTo.ts","../../../node_modules/rxjs/src/add/operator/switchMapTo.ts","../../../node_modules/rxjs/src/operator/take.ts","../../../node_modules/rxjs/src/add/operator/take.ts","../../../node_modules/rxjs/src/operator/takeLast.ts","../../../node_modules/rxjs/src/add/operator/takeLast.ts","../../../node_modules/rxjs/src/operator/takeUntil.ts","../../../node_modules/rxjs/src/add/operator/takeUntil.ts","../../../node_modules/rxjs/src/operator/takeWhile.ts","../../../node_modules/rxjs/src/add/operator/takeWhile.ts","../../../node_modules/rxjs/src/operator/throttle.ts","../../../node_modules/rxjs/src/add/operator/throttle.ts","../../../node_modules/rxjs/src/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timeout.ts","../../../node_modules/rxjs/src/add/operator/timeout.ts","../../../node_modules/rxjs/src/util/isDate.ts","../../../node_modules/rxjs/src/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timestamp.ts","../../../node_modules/rxjs/src/operator/toArray.ts","../../../node_modules/rxjs/src/add/operator/toArray.ts","../../../node_modules/rxjs/src/operator/toPromise.ts","../../../node_modules/rxjs/src/add/operator/toPromise.ts","../../../node_modules/rxjs/src/operator/window.ts","../../../node_modules/rxjs/src/add/operator/window.ts","../../../node_modules/rxjs/src/operator/windowCount.ts","../../../node_modules/rxjs/src/add/operator/windowCount.ts","../../../node_modules/rxjs/src/util/isNumeric.ts","../../../node_modules/rxjs/src/operator/windowTime.ts","../../../node_modules/rxjs/src/add/operator/windowTime.ts","../../../node_modules/rxjs/src/operator/windowToggle.ts","../../../node_modules/rxjs/src/add/operator/windowToggle.ts","../../../node_modules/rxjs/src/operator/windowWhen.ts","../../../node_modules/rxjs/src/add/operator/windowWhen.ts","../../../node_modules/rxjs/src/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/zip.ts","../../../node_modules/rxjs/src/observable/ScalarObservable.ts","../../../node_modules/rxjs/src/observable/EmptyObservable.ts","../../../node_modules/rxjs/src/util/isScheduler.ts","../../../node_modules/rxjs/src/observable/ArrayObservable.ts","../../../node_modules/rxjs/src/OuterSubscriber.ts","../../../node_modules/rxjs/src/util/isArrayLike.ts","../../../node_modules/rxjs/src/util/isPromise.ts","../../../node_modules/rxjs/src/InnerSubscriber.ts","../../../node_modules/rxjs/src/util/subscribeToResult.ts","../../../node_modules/rxjs/src/operator/zip.ts","../../../node_modules/rxjs/src/operator/zipAll.ts","../../../node_modules/rxjs/src/add/operator/zipAll.ts","../../../node_modules/rxjs/src/AsyncSubject.ts","../../../node_modules/rxjs/src/operator/observeOn.ts","../../../node_modules/rxjs/src/ReplaySubject.ts","../../../node_modules/rxjs/src/BehaviorSubject.ts","../../../node_modules/rxjs/src/observable/ConnectableObservable.ts","../../../node_modules/rxjs/src/util/EmptyError.ts","../../../node_modules/rxjs/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/rxjs/src/util/TimeoutError.ts","../../../node_modules/rxjs/src/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timestamp.ts","../../../node_modules/rxjs/src/Notification.ts","../../../node_modules/rxjs/src/testing/ColdObservable.ts","../../../node_modules/rxjs/src/util/ObjectUnsubscribedError.ts","../../../node_modules/rxjs/src/SubjectSubscription.ts","../../../node_modules/rxjs/src/Subject.ts","../../../node_modules/rxjs/src/testing/SubscriptionLoggable.ts","../../../node_modules/rxjs/src/util/applyMixins.ts","../../../node_modules/rxjs/src/testing/HotObservable.ts","../../../node_modules/rxjs/src/testing/SubscriptionLog.ts","../../../node_modules/rxjs/src/testing/TestScheduler.ts","../../../node_modules/rxjs/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/rxjs/src/util/toSubscriber.ts","../../../node_modules/rxjs/src/Observable.ts","../../../node_modules/rxjs/src/Observer.ts","../../../node_modules/rxjs/src/Subscriber.ts","../../../node_modules/rxjs/src/operator/map.ts","../../../node_modules/rxjs/src/observable/dom/AjaxObservable.ts","../../../node_modules/rxjs/src/util/Immediate.ts","../../../node_modules/rxjs/src/scheduler/AsapAction.ts","../../../node_modules/rxjs/src/scheduler/AsapScheduler.ts","../../../node_modules/rxjs/src/scheduler/asap.ts","../../../node_modules/rxjs/src/scheduler/async.ts","../../../node_modules/rxjs/src/scheduler/QueueAction.ts","../../../node_modules/rxjs/src/scheduler/QueueScheduler.ts","../../../node_modules/rxjs/src/scheduler/queue.ts","../../../node_modules/rxjs/src/util/isArray.ts","../../../node_modules/rxjs/src/util/isObject.ts","../../../node_modules/rxjs/src/util/isFunction.ts","../../../node_modules/rxjs/src/util/tryCatch.ts","../../../node_modules/rxjs/src/util/errorObject.ts","../../../node_modules/rxjs/src/util/UnsubscriptionError.ts","../../../node_modules/rxjs/src/Subscription.ts","../../../node_modules/rxjs/src/scheduler/Action.ts","../../../node_modules/rxjs/src/scheduler/AsyncAction.ts","../../../node_modules/rxjs/src/util/AnimationFrame.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameAction.ts","../../../node_modules/rxjs/src/Scheduler.ts","../../../node_modules/rxjs/src/scheduler/AsyncScheduler.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/rxjs/src/scheduler/animationFrame.ts","../../../node_modules/rxjs/src/symbol/rxSubscriber.ts","../../../node_modules/rxjs/src/symbol/iterator.ts","../../../node_modules/rxjs/src/util/root.ts","../../../node_modules/rxjs/src/symbol/observable.ts","../../../node_modules/rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","Object","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","binaryType","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","subscriberClass","BufferSkipCountSubscriber","BufferCountSubscriber","buffers","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","remove","spliceIndex","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","err2","_unsubscribeAndRecycle","catch_1","catch","combineAll","combineAll_1","slice","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","Set","distinct","keySelector","flushes","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinctUntilChanged_1","distinctUntilChanged","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_keys","get","set","delete","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","subjectSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","accumulator","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","hasError","done","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isArrayLike_1","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isPromise","isArrayLike","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","mapper","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","windowTime","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","hasSeed","ReduceSubscriber","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","TimeoutError","errorInstance","TimeoutSubscriber","scheduleTimeout","dispatchTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","val","parseFloat","windowTimeSpan","windowCreationInterval","maxWindowSize","WindowTimeOperator","dispatchWindowTimeSpanOnly","closeWindow","dispatchWindowCreation","timeSpanState","dispatchWindowClose","WindowTimeSubscriber","CountedSubject","_numberOfNextedValues","numberOfNextedValues","window_2","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","isObject_1","isObject","msg","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","thrownError","EMPTY","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","ObjectUnsubscribedError_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObjectUnsubscribedError","SubjectSubscription","eventsCount","spliceCount","_value","getValue","ConnectableObservable","_refCount","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","RefCountOperator","writable","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","subscriberIndex","rxSubscriber_1","rxSubscriber","copy","_trySubscribe","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","_execute","AsyncAction","toSubscriber","Observer_1","toSubscriber_1","observerOrNext","sink","destinationOrNext","SafeSubscriber","_parent","_parents","_parentSubscriber","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxPatch","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","withCredentials","prop","AjaxSubscriber","post","put","patch","getJSON","FormData","serializeBody","xhr","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","responseText","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","QueueScheduler","QueueAction_1","QueueScheduler_1","tryCatcher","tryCatchTarget","UnsubscriptionError","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","_subscriptions","hasErrors","trial","sub","teardown","_addParent","tmp","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","$$rxSubscriber","symbolIteratorPonyfill","$$iterator","global","getSymbolObservable","$$observable","TestScheduler_1","animationFrame_1"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create(callbackFunc: (callback: () => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<void>;\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done.\n   *\n   * The output of `bindCallback` is a function that takes the same parameters\n   * as `func`, except the last one (the callback). When the output function\n   * is called with arguments, it will return an Observable. If `func` function\n   * calls its callback with one argument, the Observable will emit that value.\n   * If on the other hand callback is called with multiple values, resulting\n   * Observable will emit an array with these arguments.\n   *\n   * It is very important to remember, that input function `func` is not called\n   * when output function is, but rather when Observable returned by output\n   * function is subscribed. This means if `func` makes AJAX request, that request\n   * will be made every time someone subscribes to resulting Observable, but not before.\n   *\n   * Optionally, selector function can be passed to `bindObservable`. That function\n   * takes the same arguments as callback, and returns value\n   * that will be emitted by Observable instead of callback parameters themselves.\n   * Even though by default multiple arguments passed to callback appear in the stream as array,\n   * selector function will be called with arguments directly, just as callback would.\n   * This means you can imagine default selector (when one is not provided explicitly)\n   * as function that aggregates all its arguments into array, or simply returns first argument,\n   * if there is only one.\n   *\n   * Last optional parameter - {@link Scheduler} - can be used to control when call\n   * to `func` happens after someone subscribes to Observable, as well as when results\n   * passed to callback will be emitted. By default subscription to Observable calls `func`\n   * synchronously, but using `Scheduler.async` as last parameter will defer call to input function,\n   * just like wrapping that call in `setTimeout` with time `0` would. So if you use async Scheduler\n   * and call `subscribe` on output Observable, all function calls that are currently executing,\n   * will end before `func` is invoked.\n   *\n   * When it comes to emitting results passed to callback, by default they are emitted\n   * immediately after `func` invokes callback. In particular, if callback is called synchronously,\n   * then subscription to resulting Observable will call `next` function synchronously as well.\n   * If you want to defer that call, using `Scheduler.async` will, again, do the job.\n   * This means that by using `Scheduler.async` you can, in a sense, ensure that `func`\n   * always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n   *\n   * Note that Observable created by output function will always emit only one value\n   * and then complete right after. Even if `func` calls callback multiple times, values from\n   * second and following calls will never appear in the stream. If you need to\n   * listen for multiple calls, you probably want to use {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * If `func` depends on some context (`this` property), that context will be set\n   * to the same context that output function has at call time. In particular, if `func`\n   * is called as method of some object, in order to preserve proper behaviour,\n   * it is recommended to set context of output function to that object as well,\n   * provided `func` is not already bound.\n   *\n   * If input function calls its callback in \"node style\" (i.e. first argument to callback is\n   * optional error parameter signaling whether call failed or not), {@link bindNodeCallback}\n   * provides convenient error handling and probably is a better choice.\n   * `bindCallback` will treat such functions without any difference and error parameter\n   * (whether passed or not) will always be interpreted as regular callback argument.\n   *\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Receive array of arguments passed to callback</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 5\n   *   console.log(b); // 'some string'\n   *   console.log(c); // {someProperty: 'someValue'}\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction);\n   * boundSomeFunction().subscribe(values => {\n   *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n   * });\n   *\n   *\n   * @example <caption>Use bindCallback with selector function</caption>\n   * someFunction((a, b, c) => {\n   *   console.log(a); // 'a'\n   *   console.log(b); // 'b'\n   *   console.log(c); // 'c'\n   * });\n   *\n   * const boundSomeFunction = Rx.Observable.bindCallback(someFunction, (a, b, c) => a + b + c);\n   * boundSomeFunction().subscribe(value => {\n   *   console.log(value) // 'abc'\n   * });\n   *\n   *\n   * @example <caption>Compare behaviour with and without async Scheduler</caption>\n   * function iCallMyCallbackSynchronously(cb) {\n   *   cb();\n   * }\n   *\n   * const boundSyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously);\n   * const boundAsyncFn = Rx.Observable.bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n   *\n   * boundSyncFn().subscribe(() => console.log('I was sync!'));\n   * boundAsyncFn().subscribe(() => console.log('I was async!'));\n   * console.log('This happened...');\n   *\n   * // Logs:\n   * // I was sync!\n   * // This happened...\n   * // I was async!\n   *\n   *\n   * @example <caption>Use bindCallback on object method</caption>\n   * const boundMethod = Rx.Observable.bindCallback(someObject.methodWithCallback);\n   * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n   * .subscribe(subscriber);\n   *\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T>, context: any }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return function(this: any, ...args: any[]): Observable<T> {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, this, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private context: any,\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber, context: this.context });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber, context } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(context, args.concat(handler));\n    if (result === errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   *\n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): SubscribableOrPromise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, R>(v1: SubscribableOrPromise<T>, project: (v1: T) => R): Observable<R>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console everytime a click\n   * // occurs on the document.\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *\n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *\n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create(error: any, scheduler?: IScheduler): ErrorObservable {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: any, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n  binaryType?: 'blob' | 'arraybuffer';\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let socket$ = Observable.webSocket('ws://localhost:8081');\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   *\n   * let socket$ = Observable.webSocket({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * socket$.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   *\n   * socket$.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n      if (this.binaryType) {\n        this.socket.binaryType = this.binaryType;\n      }\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  private subscriberClass: any;\n\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n    if (!startBufferEvery || bufferSize === startBufferEvery) {\n      this.subscriberClass = BufferCountSubscriber;\n    } else {\n      this.subscriberClass = BufferSkipCountSubscriber;\n    }\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): TeardownLogic {\n    return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const buffer = this.buffer;\n\n    buffer.push(value);\n\n    if (buffer.length == this.bufferSize) {\n      this.destination.next(buffer);\n      this.buffer = [];\n    }\n  }\n\n  protected _complete(): void {\n    const buffer = this.buffer;\n    if (buffer.length > 0) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSkipCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const { bufferSize, startBufferEvery, buffers, count } = this;\n\n    this.count++;\n    if (count % startBufferEvery === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        this.destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete(): void {\n    const { buffers, destination } = this;\n\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n *\n * @example <caption>Continues with a different Observable when there's an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n;\n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n * \t   if (n === 4) {\n * \t     throw 'four!';\n *     }\n * \t   return n;\n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n *\n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => {\n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n;\n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} An observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<T | R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nclass CatchOperator<T, R> implements Operator<T, T | R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, T | R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this._unsubscribeAndRecycle();\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  observables.unshift(this);\n\n  return this.lift.call(new ArrayObservable(observables), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<T>): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Action } from '../scheduler/Action';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\ninterface DelayState<T> {\n  source: DelaySubscriber<T>;\n  destination: PartialObserver<T>;\n  scheduler: IScheduler;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<DelayMessage<T>> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch<T>(this: Action<DelayState<T>>, state: DelayState<T>): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule<DelayState<T>>(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<T>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(public readonly time: number,\n              public readonly notification: Notification<T>) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, true, thisArg));\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} An Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.anme)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} An Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - The condition any source emitted item has to satisfy.\n * @return {Observable} An Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n *\n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable} An Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {ObservableInput} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} An Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return this.lift.call(mergeStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n *\n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n *\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return {Observable<R>} An Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [Symbol_iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [Symbol_iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[Symbol_iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[Symbol_iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *\n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *\n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[Symbol_observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[Symbol_observable]().subscribe(subscriber);\n    } else {\n      return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate, thisArg),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} A new Observable of property values from the source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: selector<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(this: Observable<T>, bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: IScheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables.\n * @param {...Observables} ...observables Sources used to race for which Observable emits first.\n * @return {Observable} An Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  return this.lift.call(raceStatic<T>(this, ...observables));\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed: T[]): Observable<T[]>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ReduceOperator(accumulator, seed, hasSeed));\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index?: number) => R, private seed?: R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private acc: T | R;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T, index?: number) => R,\n              seed: R,\n              private hasSeed: boolean) {\n    super(destination);\n    this.acc = seed;\n\n    if (!this.hasSeed) {\n      this.index++;\n    }\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value, this.index++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n    super._unsubscribeAndRecycle();\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n    return this;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      source.subscribe(this._unsubscribeAndRecycle());\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this._unsubscribeAndRecycle();\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ScanOperator(accumulator, seed, hasSeed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R,\n              private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  if (typeof selector === 'function') {\n    return this.lift(new MulticastOperator(subjectFactory, selector));\n  }\n\n  const connectable: any = Object.create(this, connectableObservableDescriptor);\n  connectable.source = this;\n  connectable.subjectFactory = subjectFactory;\n\n  return <ConnectableObservable<T>> connectable;\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport class MulticastOperator<T> implements Operator<T, T> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n\n    if (this.predicate) {\n      this.tryNext(value, index);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T, index: number): void {\n    try {\n      if (this.predicate(value, index, this.source)) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, count: number): Observable<T> {\n  return this.lift(new SkipOperator(count));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscribable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\nexport function mergeAll<T>(this: Observable<T>, concurrent?: number): T;\nexport function mergeAll<T, R>(this: Observable<T>, concurrent?: number): Subscribable<R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(concurrent));\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return this.lift.call(concatStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  let scheduler: IScheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  let scheduler = <IScheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} scheduler - The IScheduler to perform subscription actions on.\n * @return {Observable<T>} The source Observable modified so that its subscriptions happen on the specified IScheduler.\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new SubscribeOnOperator<T>(scheduler, delay));\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new SwitchOperator());\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\n\n/**\n * @param {number} due\n * @param {Scheduler} [scheduler]\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n\n  private action: Action<TimeoutSubscriber<T>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T>(subscriber: TimeoutSubscriber<T>): void {\n    subscriber.error(subscriber.errorInstance);\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutSubscriber<T>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutSubscriber<T>>> this.scheduler.schedule(\n        TimeoutSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.errorInstance = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private action: Action<TimeoutWithSubscriber<T, R>> = null;\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout<T, R>(subscriber: TimeoutWithSubscriber<T, R>): void {\n    const { withObservable } = subscriber;\n    (<any> subscriber)._unsubscribeAndRecycle();\n    subscriber.add(subscribeToResult(subscriber, withObservable));\n  }\n\n  private scheduleTimeout(): void {\n    const { action } = this;\n    if (action) {\n      // Recycle the action if we've already scheduled one. All the production\n      // Scheduler Actions mutate their state/delay time and return themeselves.\n      // VirtualActions are immutable, so they create and return a clone. In this\n      // case, we need to set the action reference to the most recent VirtualAction,\n      // to ensure that's the one we clone from next time.\n      this.action = (<Action<TimeoutWithSubscriber<T, R>>> action.schedule(this, this.waitFor));\n    } else {\n      this.add(this.action = (<Action<TimeoutWithSubscriber<T, R>>> this.scheduler.schedule(\n        TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this\n      )));\n    }\n  }\n\n  protected _next(value: T): void {\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n    super._next(value);\n  }\n\n  protected _unsubscribe() {\n    this.action = null;\n    this.scheduler = null;\n    this.withObservable = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { root } from '../util/root';\n\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>): Promise<T>;\nexport function toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts an Observable sequence to a ES2015 compliant promise.\n *\n * @example\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Rejected Promise\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .throw(new Error('woops'))\n *   .toPromise();\n *\n * source\n *   .then((value) => console.log('Value: %s', value))\n *   .catch((err) => console.log('Error: %s', err));\n * // => Error: Error: woops\n *\n * // Setting via the config\n * Rx.config.Promise = RSVP.Promise;\n *\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Setting via the method\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise(RSVP.Promise);\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * @param PromiseCtor promise The constructor of the promise. If not provided,\n * it will look for a constructor first in Rx.config.Promise then fall back to\n * the native Promise constructor if available.\n * @return {Promise<T>} An ES2015 compatible promise with the last value from\n * the observable sequence.\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(this: Observable<T>, PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: typeof toPromise;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Same as example above but with maxWindowCount instead of take</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000, 2) // each window has still at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {number} [maxWindowSize=Number.POSITIVE_INFINITY] Max number of\n * values each window can emit before completion.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number,\n                              maxWindowSize: number,\n                              scheduler?: IScheduler): Observable<Observable<T>>;\n\nexport function windowTime<T>(this: Observable<T>,\n                              windowTimeSpan: number): Observable<Observable<T>> {\n\n  let scheduler: IScheduler = async;\n  let windowCreationInterval: number = null;\n  let maxWindowSize: number = Number.POSITIVE_INFINITY;\n\n  if (isScheduler(arguments[3])) {\n    scheduler = arguments[3];\n  }\n\n  if (isScheduler(arguments[2])) {\n    scheduler = arguments[2];\n  } else if (isNumeric(arguments[2])) {\n    maxWindowSize = arguments[2];\n  }\n\n  if (isScheduler(arguments[1])) {\n    scheduler = arguments[1];\n  } else if (isNumeric(arguments[1])) {\n    windowCreationInterval = arguments[1];\n  }\n\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: CountedSubject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: CountedSubject<T>;\n  context: CloseWindowContext<T>;\n}\n\nclass CountedSubject<T> extends Subject<T> {\n  private _numberOfNextedValues: number = 0;\n\n  next(value?: T): void {\n    this._numberOfNextedValues++;\n    super.next(value);\n  }\n\n  get numberOfNextedValues(): number {\n    return this._numberOfNextedValues;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: CountedSubject<T>[] = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number | null,\n              private maxWindowSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n        if (window.numberOfNextedValues >= this.maxWindowSize) {\n          this.closeWindow(window);\n        }\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): CountedSubject<T> {\n    const window = new CountedSubject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: CountedSubject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  } else if (isArrayLike(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    const iterator = <any>result[Symbol_iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    const obs = result[Symbol_observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return this.lift.call(zipStatic<R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic } from '../Subscription';\nimport { Action } from '../scheduler/Action';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    this.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: (<any> ConnectableObservable.prototype)._subscribe },\n  getSubject: { value: (<any> ConnectableObservable.prototype).getSubject },\n  connect: { value: (<any> ConnectableObservable.prototype).connect },\n  refCount: { value: (<any> ConnectableObservable.prototype).refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return this.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\n  constructor(private scheduler: IScheduler) {\n  }\n\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\n    return source.subscribe(new TimestampSubscriber(observer, this.scheduler));\n  }\n}\n\nclass TimestampSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const now = this.scheduler.now();\n\n    this.destination.next(new Timestamp(value, now));\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  patch(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxPatch(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PATCH', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.patch = ajaxPatch;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout, responseType and withCredentials can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      if ('withCredentials' in xhr) {\n        xhr.withCredentials = !!request.withCredentials;\n      }\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link async} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * @example <caption>Schedule div height animation</caption>\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n *\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const iterator = symbolIteratorPonyfill(root);\n\n/**\n * @deprecated use iterator instead\n */\nexport const $$iterator = iterator;\n","declare let global: NodeJS.Global;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\n/**\n * window: browser in DOM main thread\n * self: browser in WebWorker\n * global: Node.js/other\n */\nexport let root: any;\nif (typeof window == 'object' && window.window === window) {\n  root = window;\n} else if (typeof self == 'object' && self.self === self) {\n  root = self;\n} else if (typeof global == 'object' && global.global === global) {\n  root = global;\n} else {\n  // Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n  // This is needed when used with angular/tsickle which inserts a goog.module statement.\n  // Wrap in IIFE\n  (function () {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  })();\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { rxSubscriber } from './symbol/rxSubscriber';\nimport { iterator } from './symbol/iterator';\nimport { observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}