{"version":3,"sources":["../../../node_modules/rxjs/src/observable/BoundCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindCallback.ts","../../../node_modules/rxjs/src/add/observable/bindCallback.ts","../../../node_modules/rxjs/src/observable/BoundNodeCallbackObservable.ts","../../../node_modules/rxjs/src/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/add/observable/bindNodeCallback.ts","../../../node_modules/rxjs/src/observable/combineLatest.ts","../../../node_modules/rxjs/src/add/observable/combineLatest.ts","../../../node_modules/rxjs/src/observable/concat.ts","../../../node_modules/rxjs/src/add/observable/concat.ts","../../../node_modules/rxjs/src/observable/DeferObservable.ts","../../../node_modules/rxjs/src/observable/defer.ts","../../../node_modules/rxjs/src/add/observable/defer.ts","../../../node_modules/rxjs/src/observable/empty.ts","../../../node_modules/rxjs/src/add/observable/empty.ts","../../../node_modules/rxjs/src/observable/ForkJoinObservable.ts","../../../node_modules/rxjs/src/observable/forkJoin.ts","../../../node_modules/rxjs/src/add/observable/forkJoin.ts","../../../node_modules/rxjs/src/observable/from.ts","../../../node_modules/rxjs/src/add/observable/from.ts","../../../node_modules/rxjs/src/observable/FromEventObservable.ts","../../../node_modules/rxjs/src/observable/fromEvent.ts","../../../node_modules/rxjs/src/add/observable/fromEvent.ts","../../../node_modules/rxjs/src/observable/FromEventPatternObservable.ts","../../../node_modules/rxjs/src/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/add/observable/fromEventPattern.ts","../../../node_modules/rxjs/src/observable/fromPromise.ts","../../../node_modules/rxjs/src/add/observable/fromPromise.ts","../../../node_modules/rxjs/src/observable/GenerateObservable.ts","../../../node_modules/rxjs/src/add/observable/generate.ts","../../../node_modules/rxjs/src/observable/IfObservable.ts","../../../node_modules/rxjs/src/observable/if.ts","../../../node_modules/rxjs/src/add/observable/if.ts","../../../node_modules/rxjs/src/observable/IntervalObservable.ts","../../../node_modules/rxjs/src/observable/interval.ts","../../../node_modules/rxjs/src/add/observable/interval.ts","../../../node_modules/rxjs/src/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/merge.ts","../../../node_modules/rxjs/src/add/observable/race.ts","../../../node_modules/rxjs/src/observable/NeverObservable.ts","../../../node_modules/rxjs/src/observable/never.ts","../../../node_modules/rxjs/src/add/observable/never.ts","../../../node_modules/rxjs/src/observable/of.ts","../../../node_modules/rxjs/src/add/observable/of.ts","../../../node_modules/rxjs/src/add/observable/onErrorResumeNext.ts","../../../node_modules/rxjs/src/observable/PairsObservable.ts","../../../node_modules/rxjs/src/observable/pairs.ts","../../../node_modules/rxjs/src/add/observable/pairs.ts","../../../node_modules/rxjs/src/observable/RangeObservable.ts","../../../node_modules/rxjs/src/observable/range.ts","../../../node_modules/rxjs/src/add/observable/range.ts","../../../node_modules/rxjs/src/observable/UsingObservable.ts","../../../node_modules/rxjs/src/observable/using.ts","../../../node_modules/rxjs/src/add/observable/using.ts","../../../node_modules/rxjs/src/observable/ErrorObservable.ts","../../../node_modules/rxjs/src/observable/throw.ts","../../../node_modules/rxjs/src/add/observable/throw.ts","../../../node_modules/rxjs/src/observable/TimerObservable.ts","../../../node_modules/rxjs/src/observable/timer.ts","../../../node_modules/rxjs/src/add/observable/timer.ts","../../../node_modules/rxjs/src/observable/zip.ts","../../../node_modules/rxjs/src/add/observable/zip.ts","../../../node_modules/rxjs/src/observable/dom/ajax.ts","../../../node_modules/rxjs/src/add/observable/dom/ajax.ts","../../../node_modules/rxjs/src/util/assign.ts","../../../node_modules/rxjs/src/observable/dom/WebSocketSubject.ts","../../../node_modules/rxjs/src/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/add/observable/dom/webSocket.ts","../../../node_modules/rxjs/src/operator/buffer.ts","../../../node_modules/rxjs/src/add/operator/buffer.ts","../../../node_modules/rxjs/src/operator/bufferCount.ts","../../../node_modules/rxjs/src/add/operator/bufferCount.ts","../../../node_modules/rxjs/src/operator/bufferTime.ts","../../../node_modules/rxjs/src/add/operator/bufferTime.ts","../../../node_modules/rxjs/src/operator/bufferToggle.ts","../../../node_modules/rxjs/src/add/operator/bufferToggle.ts","../../../node_modules/rxjs/src/operator/bufferWhen.ts","../../../node_modules/rxjs/src/add/operator/bufferWhen.ts","../../../node_modules/rxjs/src/operator/catch.ts","../../../node_modules/rxjs/src/add/operator/catch.ts","../../../node_modules/rxjs/src/operator/combineAll.ts","../../../node_modules/rxjs/src/add/operator/combineAll.ts","../../../node_modules/rxjs/src/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/combineLatest.ts","../../../node_modules/rxjs/src/add/operator/concat.ts","../../../node_modules/rxjs/src/operator/concatAll.ts","../../../node_modules/rxjs/src/add/operator/concatAll.ts","../../../node_modules/rxjs/src/operator/concatMap.ts","../../../node_modules/rxjs/src/add/operator/concatMap.ts","../../../node_modules/rxjs/src/operator/concatMapTo.ts","../../../node_modules/rxjs/src/add/operator/concatMapTo.ts","../../../node_modules/rxjs/src/operator/count.ts","../../../node_modules/rxjs/src/add/operator/count.ts","../../../node_modules/rxjs/src/operator/dematerialize.ts","../../../node_modules/rxjs/src/add/operator/dematerialize.ts","../../../node_modules/rxjs/src/operator/debounce.ts","../../../node_modules/rxjs/src/add/operator/debounce.ts","../../../node_modules/rxjs/src/operator/debounceTime.ts","../../../node_modules/rxjs/src/add/operator/debounceTime.ts","../../../node_modules/rxjs/src/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/add/operator/defaultIfEmpty.ts","../../../node_modules/rxjs/src/operator/delay.ts","../../../node_modules/rxjs/src/add/operator/delay.ts","../../../node_modules/rxjs/src/operator/delayWhen.ts","../../../node_modules/rxjs/src/add/operator/delayWhen.ts","../../../node_modules/rxjs/src/util/Set.ts","../../../node_modules/rxjs/src/operator/distinct.ts","../../../node_modules/rxjs/src/add/operator/distinct.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilChanged.ts","../../../node_modules/rxjs/src/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/add/operator/distinctUntilKeyChanged.ts","../../../node_modules/rxjs/src/operator/do.ts","../../../node_modules/rxjs/src/add/operator/do.ts","../../../node_modules/rxjs/src/operator/exhaust.ts","../../../node_modules/rxjs/src/add/operator/exhaust.ts","../../../node_modules/rxjs/src/operator/exhaustMap.ts","../../../node_modules/rxjs/src/add/operator/exhaustMap.ts","../../../node_modules/rxjs/src/operator/expand.ts","../../../node_modules/rxjs/src/add/operator/expand.ts","../../../node_modules/rxjs/src/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/elementAt.ts","../../../node_modules/rxjs/src/add/operator/filter.ts","../../../node_modules/rxjs/src/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/finally.ts","../../../node_modules/rxjs/src/add/operator/find.ts","../../../node_modules/rxjs/src/operator/find.ts","../../../node_modules/rxjs/src/operator/findIndex.ts","../../../node_modules/rxjs/src/add/operator/findIndex.ts","../../../node_modules/rxjs/src/operator/first.ts","../../../node_modules/rxjs/src/add/operator/first.ts","../../../node_modules/rxjs/src/util/MapPolyfill.ts","../../../node_modules/rxjs/src/util/Map.ts","../../../node_modules/rxjs/src/util/FastMap.ts","../../../node_modules/rxjs/src/operator/groupBy.ts","../../../node_modules/rxjs/src/add/operator/groupBy.ts","../../../node_modules/rxjs/src/util/noop.ts","../../../node_modules/rxjs/src/operator/ignoreElements.ts","../../../node_modules/rxjs/src/add/operator/ignoreElements.ts","../../../node_modules/rxjs/src/operator/isEmpty.ts","../../../node_modules/rxjs/src/add/operator/isEmpty.ts","../../../node_modules/rxjs/src/operator/audit.ts","../../../node_modules/rxjs/src/add/operator/audit.ts","../../../node_modules/rxjs/src/operator/auditTime.ts","../../../node_modules/rxjs/src/add/operator/auditTime.ts","../../../node_modules/rxjs/src/operator/last.ts","../../../node_modules/rxjs/src/add/operator/last.ts","../../../node_modules/rxjs/src/operator/let.ts","../../../node_modules/rxjs/src/add/operator/let.ts","../../../node_modules/rxjs/src/operator/every.ts","../../../node_modules/rxjs/src/add/operator/every.ts","../../../node_modules/rxjs/src/add/operator/map.ts","../../../node_modules/rxjs/src/operator/mapTo.ts","../../../node_modules/rxjs/src/add/operator/mapTo.ts","../../../node_modules/rxjs/src/operator/materialize.ts","../../../node_modules/rxjs/src/add/operator/materialize.ts","../../../node_modules/rxjs/src/operator/max.ts","../../../node_modules/rxjs/src/add/operator/max.ts","../../../node_modules/rxjs/src/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/merge.ts","../../../node_modules/rxjs/src/add/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/mergeMap.ts","../../../node_modules/rxjs/src/add/operator/mergeMap.ts","../../../node_modules/rxjs/src/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/add/operator/mergeMapTo.ts","../../../node_modules/rxjs/src/operator/mergeScan.ts","../../../node_modules/rxjs/src/add/operator/mergeScan.ts","../../../node_modules/rxjs/src/operator/min.ts","../../../node_modules/rxjs/src/add/operator/min.ts","../../../node_modules/rxjs/src/add/operator/multicast.ts","../../../node_modules/rxjs/src/add/operator/observeOn.ts","../../../node_modules/rxjs/src/observable/PromiseObservable.ts","../../../node_modules/rxjs/src/observable/IteratorObservable.ts","../../../node_modules/rxjs/src/observable/ArrayLikeObservable.ts","../../../node_modules/rxjs/src/observable/FromObservable.ts","../../../node_modules/rxjs/src/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/add/operator/onErrorResumeNext.ts","../../../node_modules/rxjs/src/operator/pairwise.ts","../../../node_modules/rxjs/src/add/operator/pairwise.ts","../../../node_modules/rxjs/src/util/not.ts","../../../node_modules/rxjs/src/operator/filter.ts","../../../node_modules/rxjs/src/operator/partition.ts","../../../node_modules/rxjs/src/add/operator/partition.ts","../../../node_modules/rxjs/src/operator/pluck.ts","../../../node_modules/rxjs/src/add/operator/pluck.ts","../../../node_modules/rxjs/src/operator/publish.ts","../../../node_modules/rxjs/src/add/operator/publish.ts","../../../node_modules/rxjs/src/operator/publishBehavior.ts","../../../node_modules/rxjs/src/add/operator/publishBehavior.ts","../../../node_modules/rxjs/src/operator/publishReplay.ts","../../../node_modules/rxjs/src/add/operator/publishReplay.ts","../../../node_modules/rxjs/src/operator/publishLast.ts","../../../node_modules/rxjs/src/add/operator/publishLast.ts","../../../node_modules/rxjs/src/operator/race.ts","../../../node_modules/rxjs/src/add/operator/race.ts","../../../node_modules/rxjs/src/operator/reduce.ts","../../../node_modules/rxjs/src/add/operator/reduce.ts","../../../node_modules/rxjs/src/operator/repeat.ts","../../../node_modules/rxjs/src/add/operator/repeat.ts","../../../node_modules/rxjs/src/operator/repeatWhen.ts","../../../node_modules/rxjs/src/add/operator/repeatWhen.ts","../../../node_modules/rxjs/src/operator/retry.ts","../../../node_modules/rxjs/src/add/operator/retry.ts","../../../node_modules/rxjs/src/operator/retryWhen.ts","../../../node_modules/rxjs/src/add/operator/retryWhen.ts","../../../node_modules/rxjs/src/operator/sample.ts","../../../node_modules/rxjs/src/add/operator/sample.ts","../../../node_modules/rxjs/src/operator/sampleTime.ts","../../../node_modules/rxjs/src/add/operator/sampleTime.ts","../../../node_modules/rxjs/src/operator/scan.ts","../../../node_modules/rxjs/src/add/operator/scan.ts","../../../node_modules/rxjs/src/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/add/operator/sequenceEqual.ts","../../../node_modules/rxjs/src/operator/multicast.ts","../../../node_modules/rxjs/src/operator/share.ts","../../../node_modules/rxjs/src/add/operator/share.ts","../../../node_modules/rxjs/src/operator/single.ts","../../../node_modules/rxjs/src/add/operator/single.ts","../../../node_modules/rxjs/src/operator/skip.ts","../../../node_modules/rxjs/src/add/operator/skip.ts","../../../node_modules/rxjs/src/operator/skipUntil.ts","../../../node_modules/rxjs/src/add/operator/skipUntil.ts","../../../node_modules/rxjs/src/operator/skipWhile.ts","../../../node_modules/rxjs/src/add/operator/skipWhile.ts","../../../node_modules/rxjs/src/operator/mergeAll.ts","../../../node_modules/rxjs/src/operator/concat.ts","../../../node_modules/rxjs/src/operator/startWith.ts","../../../node_modules/rxjs/src/add/operator/startWith.ts","../../../node_modules/rxjs/src/util/isNumeric.ts","../../../node_modules/rxjs/src/observable/SubscribeOnObservable.ts","../../../node_modules/rxjs/src/operator/subscribeOn.ts","../../../node_modules/rxjs/src/add/operator/subscribeOn.ts","../../../node_modules/rxjs/src/operator/switch.ts","../../../node_modules/rxjs/src/add/operator/switch.ts","../../../node_modules/rxjs/src/operator/switchMap.ts","../../../node_modules/rxjs/src/add/operator/switchMap.ts","../../../node_modules/rxjs/src/operator/switchMapTo.ts","../../../node_modules/rxjs/src/add/operator/switchMapTo.ts","../../../node_modules/rxjs/src/operator/take.ts","../../../node_modules/rxjs/src/add/operator/take.ts","../../../node_modules/rxjs/src/operator/takeLast.ts","../../../node_modules/rxjs/src/add/operator/takeLast.ts","../../../node_modules/rxjs/src/operator/takeUntil.ts","../../../node_modules/rxjs/src/add/operator/takeUntil.ts","../../../node_modules/rxjs/src/operator/takeWhile.ts","../../../node_modules/rxjs/src/add/operator/takeWhile.ts","../../../node_modules/rxjs/src/operator/throttle.ts","../../../node_modules/rxjs/src/add/operator/throttle.ts","../../../node_modules/rxjs/src/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/throttleTime.ts","../../../node_modules/rxjs/src/add/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timeout.ts","../../../node_modules/rxjs/src/add/operator/timeout.ts","../../../node_modules/rxjs/src/util/isDate.ts","../../../node_modules/rxjs/src/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timeoutWith.ts","../../../node_modules/rxjs/src/add/operator/timestamp.ts","../../../node_modules/rxjs/src/operator/toArray.ts","../../../node_modules/rxjs/src/add/operator/toArray.ts","../../../node_modules/rxjs/src/operator/toPromise.ts","../../../node_modules/rxjs/src/add/operator/toPromise.ts","../../../node_modules/rxjs/src/operator/window.ts","../../../node_modules/rxjs/src/add/operator/window.ts","../../../node_modules/rxjs/src/operator/windowCount.ts","../../../node_modules/rxjs/src/add/operator/windowCount.ts","../../../node_modules/rxjs/src/operator/windowTime.ts","../../../node_modules/rxjs/src/add/operator/windowTime.ts","../../../node_modules/rxjs/src/operator/windowToggle.ts","../../../node_modules/rxjs/src/add/operator/windowToggle.ts","../../../node_modules/rxjs/src/operator/windowWhen.ts","../../../node_modules/rxjs/src/add/operator/windowWhen.ts","../../../node_modules/rxjs/src/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/withLatestFrom.ts","../../../node_modules/rxjs/src/add/operator/zip.ts","../../../node_modules/rxjs/src/observable/ScalarObservable.ts","../../../node_modules/rxjs/src/observable/EmptyObservable.ts","../../../node_modules/rxjs/src/util/isScheduler.ts","../../../node_modules/rxjs/src/observable/ArrayObservable.ts","../../../node_modules/rxjs/src/OuterSubscriber.ts","../../../node_modules/rxjs/src/util/isPromise.ts","../../../node_modules/rxjs/src/InnerSubscriber.ts","../../../node_modules/rxjs/src/util/subscribeToResult.ts","../../../node_modules/rxjs/src/operator/zip.ts","../../../node_modules/rxjs/src/operator/zipAll.ts","../../../node_modules/rxjs/src/add/operator/zipAll.ts","../../../node_modules/rxjs/src/AsyncSubject.ts","../../../node_modules/rxjs/src/operator/observeOn.ts","../../../node_modules/rxjs/src/ReplaySubject.ts","../../../node_modules/rxjs/src/BehaviorSubject.ts","../../../node_modules/rxjs/src/observable/ConnectableObservable.ts","../../../node_modules/rxjs/src/util/EmptyError.ts","../../../node_modules/rxjs/src/util/ArgumentOutOfRangeError.ts","../../../node_modules/rxjs/src/util/TimeoutError.ts","../../../node_modules/rxjs/src/operator/timeInterval.ts","../../../node_modules/rxjs/src/operator/timestamp.ts","../../../node_modules/rxjs/src/Notification.ts","../../../node_modules/rxjs/src/testing/ColdObservable.ts","../../../node_modules/rxjs/src/util/ObjectUnsubscribedError.ts","../../../node_modules/rxjs/src/SubjectSubscription.ts","../../../node_modules/rxjs/src/Subject.ts","../../../node_modules/rxjs/src/testing/SubscriptionLoggable.ts","../../../node_modules/rxjs/src/util/applyMixins.ts","../../../node_modules/rxjs/src/testing/HotObservable.ts","../../../node_modules/rxjs/src/testing/SubscriptionLog.ts","../../../node_modules/rxjs/src/testing/TestScheduler.ts","../../../node_modules/rxjs/src/scheduler/VirtualTimeScheduler.ts","../../../node_modules/rxjs/src/util/toSubscriber.ts","../../../node_modules/rxjs/src/Observable.ts","../../../node_modules/rxjs/src/Observer.ts","../../../node_modules/rxjs/src/Subscriber.ts","../../../node_modules/rxjs/src/operator/map.ts","../../../node_modules/rxjs/src/observable/dom/AjaxObservable.ts","../../../node_modules/rxjs/src/util/Immediate.ts","../../../node_modules/rxjs/src/scheduler/AsapAction.ts","../../../node_modules/rxjs/src/scheduler/AsapScheduler.ts","../../../node_modules/rxjs/src/scheduler/asap.ts","../../../node_modules/rxjs/src/scheduler/async.ts","../../../node_modules/rxjs/src/scheduler/QueueAction.ts","../../../node_modules/rxjs/src/scheduler/QueueScheduler.ts","../../../node_modules/rxjs/src/scheduler/queue.ts","../../../node_modules/rxjs/src/util/isArray.ts","../../../node_modules/rxjs/src/util/isObject.ts","../../../node_modules/rxjs/src/util/isFunction.ts","../../../node_modules/rxjs/src/util/tryCatch.ts","../../../node_modules/rxjs/src/util/errorObject.ts","../../../node_modules/rxjs/src/util/UnsubscriptionError.ts","../../../node_modules/rxjs/src/Subscription.ts","../../../node_modules/rxjs/src/scheduler/Action.ts","../../../node_modules/rxjs/src/scheduler/AsyncAction.ts","../../../node_modules/rxjs/src/util/AnimationFrame.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameAction.ts","../../../node_modules/rxjs/src/Scheduler.ts","../../../node_modules/rxjs/src/scheduler/AsyncScheduler.ts","../../../node_modules/rxjs/src/scheduler/AnimationFrameScheduler.ts","../../../node_modules/rxjs/src/scheduler/animationFrame.ts","../../../node_modules/rxjs/src/symbol/rxSubscriber.ts","../../../node_modules/rxjs/src/symbol/iterator.ts","../../../node_modules/rxjs/src/util/root.ts","../../../node_modules/rxjs/src/symbol/observable.ts","../../../node_modules/rxjs/src/Rx.ts"],"names":["dispatchNext","arg","value","subject","next","complete","dispatchError","err","error","Observable_1","$__require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundCallbackObservable","_super","callbackFunc","selector","args","scheduler","call","this","__extends","create","func","undefined","_i","arguments","length","prototype","_subscribe","subscriber","schedule","dispatch","source","AsyncSubject","handler","handlerFn","innerArgs","result_1","tryCatch","apply","errorObject","e","result","concat","subscribe","state","self","result_2","add","Observable","exports","BoundCallbackObservable_1","bindCallback","bindCallback_1","_a","shift","BoundNodeCallbackObservable","BoundNodeCallbackObservable_1","bindNodeCallback","bindNodeCallback_1","combineLatest","observables","project","isScheduler_1","isScheduler","pop","isArray_1","isArray","ArrayObservable_1","ArrayObservable","lift","combineLatest_1","CombineLatestOperator","concat_1","concatStatic","subscribeToResult_1","OuterSubscriber_1","DeferObservable","observableFactory","DeferSubscriber","destination","factory","tryDefer","_callFactory","_error","subscribeToResult","OuterSubscriber","DeferObservable_1","defer","defer_1","EmptyObservable_1","empty","EmptyObservable","empty_1","ForkJoinObservable","sources","resultSelector","ForkJoinSubscriber","completed","haveValues","len","total","values","Array","i","innerSubscription","outerIndex","notifyNext","outerValue","innerValue","innerIndex","innerSub","_hasValue","notifyComplete","ForkJoinObservable_1","forkJoin","forkJoin_1","FromObservable_1","from","FromObservable","from_1","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","isFunction_1","Subscription_1","Object","FromEventObservable","eventName","options","target","isFunction","setupSubscription","unsubscribe","source_1","source_2","TypeError","source_3","Subscription","FromEventObservable_1","fromEvent","fromEvent_1","FromEventPatternObservable","addHandler","removeHandler","_this","_callSelector","retValue","_callAddHandler","errorSubscriber","FromEventPatternObservable_1","fromEventPattern","fromEventPattern_1","PromiseObservable_1","fromPromise","PromiseObservable","fromPromise_1","selfSelector","GenerateObservable","initialState","condition","iterate","initialStateOrOptions","resultSelectorOrObservable","conditionResult","closed","needIterate","GenerateObservable_1","generate","IfObservable","thenSource","elseSource","IfSubscriber","tryIf","_complete","IfObservable_1","_if","if_1","if","isNumeric_1","async_1","IntervalObservable","period","async","isNumeric","index","IntervalObservable_1","interval","interval_1","merge_1","merge","mergeStatic","race_1","race","raceStatic","noop_1","NeverObservable","noop","NeverObservable_1","never","never_1","of","of_1","onErrorResumeNext_1","onErrorResumeNext","onErrorResumeNextStatic","obj","keys","key","PairsObservable","idx","PairsObservable_1","pairs","pairs_1","RangeObservable","start","count","_count","RangeObservable_1","range","range_1","UsingObservable","resourceFactory","resource","UsingSubscriber","tryUse","UsingObservable_1","using","using_1","ErrorObservable","ErrorObservable_1","_throw","throw_1","throw","isDate_1","TimerObservable","dueTime","Number","isDate","now","initialDelay","action","TimerObservable_1","timer","timer_1","zip_1","zip","zipStatic","AjaxObservable_1","ajax","AjaxObservable","ajax_1","assignImpl","k","hasOwnProperty","getAssign","root","assign","root_1","Subject_1","Subscriber_1","ReplaySubject_1","assign_1","WebSocketSubject","urlConfigOrSource","WebSocketCtor","WebSocket","_output","Subject","url","Error","ReplaySubject","JSON","parse","data","operator","sock","_resetState","socket","multiplex","subMsg","unsubMsg","messageFilter","observer","subscription","x","_connectSocket","protocol","readyState","close","onopen","openObserver","queue","Subscriber","send","closingObserver","code","reason","onerror","onclose","closeObserver","wasClean","onmessage","observers","AnonymousSubject","WebSocketSubject_1","webSocket","webSocket_1","buffer","closingNotifier","BufferOperator","BufferSubscriber","_next","push","buffer_1","bufferCount","bufferSize","startBufferEvery","BufferCountOperator","BufferCountSubscriber","buffers","startOn","splice","bufferCount_1","bufferTime","bufferTimeSpan","bufferCreationInterval","maxBufferSize","POSITIVE_INFINITY","BufferTimeOperator","dispatchBufferTimeSpanOnly","prevContext","context","closeContext","openContext","closeAction","dispatchBufferCreation","dispatchBufferClose","BufferTimeSubscriber","Context","contexts","timespanOnly","timeSpanOnlyState","closeState","creationState","filledBufferContext","onBufferFull","_unsubscribe","remove","spliceIndex","indexOf","bufferTime_1","bufferToggle","openings","closingSelector","BufferToggleOperator","BufferToggleSubscriber","closeBuffer","openBuffer","trySubscribe","bufferToggle_1","bufferWhen","BufferWhenOperator","BufferWhenSubscriber","subscribing","closingSubscription","bufferWhen_1","_catch","CatchOperator","caught","CatchSubscriber","isStopped","err2","catch_1","catch","combineAll","combineAll_1","slice","unshift","none","CombineLatestSubscriber","active","observable","toRespond","unused","oldVal","_tryProject","concatAll","mergeAll_1","MergeAllOperator","concatAll_1","concatMap","mergeMap_1","MergeMapOperator","concatMap_1","concatMapTo","innerObservable","mergeMapTo_1","MergeMapToOperator","concatMapTo_1","predicate","CountOperator","CountSubscriber","_tryPredicate","count_1","dematerialize","DeMaterializeOperator","DeMaterializeSubscriber","observe","dematerialize_1","debounce","durationSelector","DebounceOperator","DebounceSubscriber","hasValue","durationSubscription","_tryNext","emitValue","duration","debounce_1","debounceTime","DebounceTimeOperator","debouncedNext","DebounceTimeSubscriber","debouncedSubscription","lastValue","clearDebounce","debounceTime_1","defaultIfEmpty","defaultValue","DefaultIfEmptyOperator","DefaultIfEmptySubscriber","isEmpty","defaultIfEmpty_1","delay","absoluteDelay","delayFor","Math","abs","DelayOperator","Notification_1","DelaySubscriber","errored","time","notification","delay_1","max","_schedule","scheduleNotification","message","DelayMessage","Notification","createNext","createComplete","delayWhen","delayDurationSelector","subscriptionDelay","SubscriptionDelayObservable","DelayWhenOperator","DelayWhenSubscriber","delayNotifierSubscriptions","removeSubscription","tryComplete","notifyError","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelaySubscriber","parent","sourceSubscribed","subscribeToSource","delayWhen_1","minimalSetImpl","MinimalSet","_values","has","defineProperty","clear","Set","distinct","keySelector","flushes","DistinctOperator","Set_1","DistinctSubscriber","_useKeySelector","_finalizeNext","distinct_1","distinctUntilChanged_1","distinctUntilChanged","compare","DistinctUntilChangedOperator","DistinctUntilChangedSubscriber","hasKey","y","Boolean","distinctUntilKeyChanged","distinctUntilKeyChanged_1","_do","nextOrObserver","DoOperator","DoSubscriber","safeSubscriber","syncErrorThrowable","syncErrorThrown","syncErrorValue","do_1","do","exhaust","SwitchFirstOperator","SwitchFirstSubscriber","hasCompleted","hasSubscription","exhaust_1","exhaustMap","SwitchFirstMapOperator","SwitchFirstMapSubscriber","tryNext","trySelectResult","exhaustMap_1","expand","concurrent","ExpandOperator","ExpandSubscriber","subscribeToProjection","expand_1","elementAt","ElementAtOperator","ArgumentOutOfRangeError_1","ArgumentOutOfRangeError","ElementAtSubscriber","elementAt_1","filter_1","filter","_finally","callback","FinallyOperator","FinallySubscriber","finally_1","finally","find_1","find","thisArg","FindValueOperator","yieldIndex","FindValueSubscriber","findIndex","findIndex_1","first","FirstOperator","EmptyError_1","FirstSubscriber","_emitted","_emit","_tryResultSelector","_emitFinal","EmptyError","first_1","MapPolyfill","size","_keys","get","set","delete","forEach","cb","MapPolyfill_1","Map","FastMap","groupBy","elementSelector","subjectSelector","GroupByOperator","Map_1","FastMap_1","GroupBySubscriber","groups","attemptedToUnsubscribe","_group","element","group","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","groupSubject","refCountSubscription","InnerRefCountSubscription","groupBy_1","ignoreElements","IgnoreElementsOperator","IgnoreElementsSubscriber","ignoreElements_1","IsEmptyOperator","IsEmptySubscriber","isEmpty_1","audit","AuditOperator","AuditSubscriber","throttled","clearThrottle","audit_1","auditTime","AuditTimeOperator","AuditTimeSubscriber","auditTime_1","last","LastOperator","LastSubscriber","last_1","letProto","let_1","let","letBind","every","EveryOperator","EverySubscriber","everyValueMatch","every_1","map_1","map","mapTo","MapToOperator","MapToSubscriber","mapTo_1","materialize","MaterializeOperator","MaterializeSubscriber","createError","materialize_1","comparer","reduce_1","ReduceOperator","max_1","mergeAll","mergeMap","MergeMapSubscriber","_innerSub","ish","_notifyResultSelector","flatMap","mergeMapTo","MergeMapToSubscriber","flatMapTo","mergeScan","accumulator","seed","MergeScanOperator","MergeScanSubscriber","acc","mergeScan_1","min","min_1","multicast_1","multicast","observeOn_1","observeOn","promise","_isScalar","then","setTimeout","getIterator","iterator_1","$$iterator","StringIterator","ArrayIterator","toLength","o","isNaN","numberIsFinite","sign","floor","maxSafeInteger","isFinite","valueAsNumber","IteratorObservable","iterator","hasError","done","return","str","charAt","arr","pow","ScalarObservable_1","ArrayLikeObservable","arrayLike","ScalarObservable","isPromise_1","IteratorObservable_1","ArrayLikeObservable_1","observable_1","isArrayLike","$$observable","isPromise","ObserveOnSubscriber","nextSources","OnErrorResumeNextOperator","OnErrorResumeNextSubscriber","subscribeToNextSource","pairwise","PairwiseOperator","PairwiseSubscriber","hasPrev","prev","pairwise_1","not","pred","notPred","FilterOperator","FilterSubscriber","partition","not_1","partition_1","pluck","properties","plucker","props","mapper","currentProp","p","pluck_1","publish","publish_1","publishBehavior","BehaviorSubject_1","BehaviorSubject","publishBehavior_1","publishReplay","windowTime","publishReplay_1","publishLast","publishLast_1","RaceOperator","RaceSubscriber","hasFirst","subscriptions","reduce","hasSeed","ReduceSubscriber","_tryReduce","repeat","RepeatOperator","RepeatSubscriber","repeat_1","repeatWhen","notifier","RepeatWhenOperator","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","temporarilyUnsubscribe","notifications","repeatWhen_1","retry","RetryOperator","RetrySubscriber","retry_1","retryWhen","RetryWhenOperator","RetryWhenSubscriber","errors","retryWhen_1","sample","SampleOperator","sampleSubscriber","SampleSubscriber","sample_1","sampleTime","SampleTimeOperator","dispatchNotification","SampleTimeSubscriber","sampleTime_1","scan","ScanOperator","ScanSubscriber","_seed","scan_1","sequenceEqual","compareTo","comparor","SequenceEqualOperator","SequenceEqualSubscriber","_b","_oneComplete","SequenceEqualCompareToSubscriber","emit","checkValues","_c","a","b","areEqual","nextB","sequenceEqual_1","subjectOrSubjectFactory","subjectFactory","MulticastOperator","connectable","ConnectableObservable_1","connectableObservableDescriptor","shareSubjectFactory","share","refCount","share_1","single","SingleOperator","SingleSubscriber","seenValue","applySingleValue","singleValue","single_1","skip","SkipOperator","SkipSubscriber","skip_1","skipUntil","SkipUntilOperator","SkipUntilSubscriber","isInnerStopped","skipUntil_1","skipWhile","SkipWhileOperator","SkipWhileSubscriber","skipping","tryCallPredicate","skipWhile_1","MergeAllSubscriber","startWith","array","startWith_1","val","parseFloat","asap_1","SubscribeOnObservable","delayTime","asap","subscribeOn","SubscribeOnOperator","SubscribeOnObservable_1","subscribeOn_1","_switch","SwitchOperator","SwitchSubscriber","unsubscribeInner","switch_1","switch","switchMap","SwitchMapOperator","SwitchMapSubscriber","_tryNotifyNext","switchMap_1","switchMapTo","SwitchMapToOperator","SwitchMapToSubscriber","inner","tryResultSelector","switchMapTo_1","take","TakeOperator","TakeSubscriber","take_1","takeLast","TakeLastOperator","TakeLastSubscriber","ring","takeLast_1","takeUntil","TakeUntilOperator","TakeUntilSubscriber","takeUntil_1","takeWhile","TakeWhileOperator","TakeWhileSubscriber","nextOrComplete","predicateResult","takeWhile_1","throttle","ThrottleOperator","ThrottleSubscriber","tryDurationSelector","emitAndThrottle","throttle_1","throttleTime","ThrottleTimeOperator","ThrottleTimeSubscriber","throttleTime_1","timeInterval_1","timeInterval","timeout","due","absoluteTimeout","waitFor","TimeoutOperator","TimeoutError_1","TimeoutError","errorInstance","TimeoutSubscriber","_previousIndex","_hasCompleted","scheduleTimeout","dispatchTimeout","currentIndex","previousIndex","notifyTimeout","timeout_1","Date","timeoutWith","withObservable","TimeoutWithOperator","TimeoutWithSubscriber","timeoutSubscription","handleTimeout","timeoutState","timeoutWith_1","timestamp_1","timestamp","toArray","ToArrayOperator","ToArraySubscriber","toArray_1","toPromise","PromiseCtor","Rx","config","Promise","resolve","reject","toPromise_1","window","windowBoundaries","WindowOperator","windowSubscriber","WindowSubscriber","sourceSubscription","openWindow","prevWindow","newWindow","window_1","windowCount","windowSize","startWindowEvery","WindowCountOperator","WindowCountSubscriber","windows","c","windowCount_1","windowTimeSpan","windowCreationInterval","WindowTimeOperator","dispatchWindowTimeSpanOnly","closeWindow","dispatchWindowCreation","timeSpanState","dispatchWindowClose","WindowTimeSubscriber","window_2","windowTime_1","windowToggle","WindowToggleOperator","WindowToggleSubscriber","openSubscription","windowToggle_1","windowWhen","unsubscribeClosingNotification","closingNotification","windowWhen_1","withLatestFrom","WithLatestFromOperator","WithLatestFromSubscriber","found","withLatestFrom_1","zipProto","InnerSubscriber","outerSubscriber","InnerSubscriber_1","item","obs","isObject_1","isObject","msg","ZipOperator","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","nextResult","isComplete","zipAll","zipAll_1","hasNext","thrownError","EMPTY","ObserveOnOperator","scheduleMessage","ObserveOnMessage","queue_1","ObjectUnsubscribedError_1","SubjectSubscription_1","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","ObjectUnsubscribedError","SubjectSubscription","eventsCount","spliceCount","_value","getValue","ConnectableObservable","_refCount","getSubject","_subject","connect","connection","_connection","ConnectableSubscriber","RefCountOperator","writable","SubjectSubscriber","refCounter","RefCountSubscriber","sharedConnection","name","stack","TimeIntervalOperator","TimeInterval","TimeIntervalSubscriber","lastTime","span","TimestampOperator","Timestamp","TimestampSubscriber","kind","accept","toObservable","undefinedValueNotification","completeNotification","SubscriptionLoggable_1","applyMixins_1","ColdObservable","messages","logSubscribedFrame","logUnsubscribedFrame","scheduleMessages","messagesLength","frame","applyMixins","SubscriptionLoggable","subscriberIndex","rxSubscriber_1","$$rxSubscriber","copy","_trySubscribe","asObservable","SubscriptionLog_1","SubscriptionLog","subscriptionLogs","oldSubscriptionLog","subscribedFrame","derivedCtor","baseCtors","baseCtor","propertyKeys","getOwnPropertyNames","j","len2","name_1","HotObservable","setup","unsubscribedFrame","ColdObservable_1","HotObservable_1","VirtualTimeScheduler_1","defaultMaxFrame","TestScheduler","assertDeepEqual","VirtualAction","hotObservables","coldObservables","flushTests","createTime","marbles","frameTimeFactor","createColdObservable","parseMarbles","cold","createHotObservable","materializeInnerObservable","outerFrame","expectObservable","unsubscriptionMarbles","actual","flushTest","ready","unsubscriptionFrame","parseMarblesAsSubscriptions","toBe","errorValue","expected","expectSubscriptions","actualSubscriptionLogs","marblesArray","flush","readyFlushTests","test","groupStart","subscriptionFrame","materializeInnerObservables","testMessages","subIndex","frameOffset","VirtualTimeScheduler","AsyncAction_1","AsyncScheduler_1","SchedulerAction","maxFrames","actions","execute","AsyncScheduler","work","id","requestAsyncId","sort","sortActions","recycleAsyncId","AsyncAction","toSubscriber","Observer_1","toSubscriber_1","observerOrNext","sink","destinationOrNext","SafeSubscriber","_parent","bind","_context","__tryOrSetError","__tryOrUnsub","fn","MapOperator","MapSubscriber","getCORSRequest","XMLHttpRequest","xhr","withCredentials","XDomainRequest","getXMLHttpRequest","progId","progIds","ActiveXObject","ajaxGet","headers","method","ajaxPost","body","ajaxDelete","ajaxPut","ajaxGetJSON","responseType","response","urlOrRequest","request","createXHR","crossDomain","prop","AjaxSubscriber","post","put","getJSON","FormData","serializeBody","AjaxResponse","user","password","setupEvents","open","setHeaders","contentType","splitIndex","substring","encodeURI","join","stringify","setRequestHeader","xhrTimeout","progressSubscriber","AjaxTimeoutError","xhrReadyStateChange","status_1","status","responseText","AjaxError","ontimeout","upload","xhrProgress_1","onprogress","xhrError_1","onreadystatechange","abort","originalEvent","responseXML","ImmediateDefinition","setImmediate","clearImmediate","nextHandle","tasksByHandle","currentlyRunningATask","canUseProcessNextTick","createProcessNextTickSetImmediate","canUsePostMessage","createPostMessageSetImmediate","canUseMessageChannel","createMessageChannelSetImmediate","canUseReadyStateChange","createReadyStateChangeSetImmediate","createSetTimeoutSetImmediate","ci","handle","instance","identify","process","MessageChannel","document","createElement","postMessage","importScripts","postMessageIsAsynchronous_1","oldOnMessage","partiallyApplied","Function","addFromSetImmediateArguments","nextTick","runIfPresent","messagePrefix","random","onGlobalMessage","globalMessageHandler","event","task","channel","port1","port2","doc","html","documentElement","script","removeChild","appendChild","Immediate","Immediate_1","AsapAction","scheduled","AsapScheduler","AsapAction_1","AsapScheduler_1","QueueAction","_execute","QueueScheduler","QueueAction_1","QueueScheduler_1","tryCatcher","tryCatchTarget","UnsubscriptionError","flattenUnsubscriptionErrors","errs","UnsubscriptionError_1","hasErrors","_subscriptions","trial","sub","teardown","childSub","ChildSubscription","subscriptionIndex","Action","Action_1","pending","setInterval","clearInterval","RequestAnimationFrameDefinition","requestAnimationFrame","cancelAnimationFrame","mozRequestAnimationFrame","mozCancelAnimationFrame","webkitRequestAnimationFrame","webkitCancelAnimationFrame","msRequestAnimationFrame","msCancelAnimationFrame","oRequestAnimationFrame","oCancelAnimationFrame","clearTimeout","AnimationFrame","AnimationFrame_1","AnimationFrameAction","Scheduler","Scheduler_1","AnimationFrameScheduler","AnimationFrameAction_1","AnimationFrameScheduler_1","animationFrame","Symbol","for","symbolIteratorPonyfill","global","getSymbolObservable","TestScheduler_1","animationFrame_1","rxSubscriber"],"mappings":"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","file":"Rx.min.js","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<R>(callbackFunc: (callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (...args: any[]) => any) => any, selector: (...args: any[]) => R, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a callback API to a function that returns an Observable.\n   *\n   * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n   * it will return a function `g` that when called as `g(x)` will output an\n   * Observable.</span>\n   *\n   * `bindCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The output of `bindCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable where the\n   * results will be delivered to.\n   *\n   * @example <caption>Convert jQuery's getJSON to an Observable API</caption>\n   * // Suppose we have jQuery.getJSON('/my/url', callback)\n   * var getJSONAsObservable = Rx.Observable.bindCallback(jQuery.getJSON);\n   * var result = getJSONAsObservable('/my/url');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindNodeCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the callback would deliver.\n   * @static true\n   * @name bindCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              private scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n          } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(BoundCallbackObservable.dispatch, 0, { source: this, subscriber });\n    }\n  }\n\n  static dispatch<T>(state: { source: BoundCallbackObservable<T>, subscriber: Subscriber<T> }) {\n    const self = (<Subscription><any>this);\n    const { source, subscriber } = state;\n    const { callbackFunc, args, scheduler } = source;\n    let subject = source.subject;\n\n    if (!subject) {\n      subject = source.subject = new AsyncSubject<T>();\n\n      const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n        const source = (<any>handlerFn).source;\n        const { selector, subject } = source;\n        if (selector) {\n          const result = tryCatch(selector).apply(this, innerArgs);\n          if (result === errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n          } else {\n            self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n          }\n        } else {\n          const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n          self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n        }\n      };\n      // use named function to pass values in without closure\n      (<any>handler).source = source;\n\n      const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n      if (result === errorObject) {\n        subject.error(errorObject.e);\n      }\n    }\n\n    self.add(subject.subscribe(subscriber));\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundCallbackObservable  } from './BoundCallbackObservable';\n\nexport const bindCallback = BoundCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindCallback as staticBindCallback } from '../../observable/bindCallback';\n\nObservable.bindCallback = staticBindCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindCallback: typeof staticBindCallback;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { AsyncSubject } from '../AsyncSubject';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class BoundNodeCallbackObservable<T> extends Observable<T> {\n  subject: AsyncSubject<T>;\n\n  /* tslint:disable:max-line-length */\n  static create<R>(callbackFunc: (callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): () => Observable<R>;\n  static create<T, R>(callbackFunc: (v1: T, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T) => Observable<R>;\n  static create<T, T2, R>(callbackFunc: (v1: T, v2: T2, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2) => Observable<R>;\n  static create<T, T2, T3, R>(callbackFunc: (v1: T, v2: T2, v3: T3, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3) => Observable<R>;\n  static create<T, T2, T3, T4, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4) => Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(callbackFunc: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6, callback: (err: any, result: R) => any) => any, selector?: void, scheduler?: IScheduler): (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => Observable<R>;\n  static create<T>(callbackFunc: Function, selector?: void, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  static create<T>(callbackFunc: Function, selector?: (...args: any[]) => T, scheduler?: IScheduler): (...args: any[]) => Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error, while remaining\n   * arguments are the callback result. The output of `bindNodeCallback` is a\n   * function that takes the same parameters as `func`, except the last one (the\n   * callback). When the output function is called with arguments, it will\n   * return an Observable where the results will be delivered to.\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n  static create<T>(func: Function,\n                   selector: Function | void = undefined,\n                   scheduler?: IScheduler): (...args: any[]) => Observable<T> {\n    return (...args: any[]): Observable<T> => {\n      return new BoundNodeCallbackObservable<T>(func, <any>selector, args, scheduler);\n    };\n  }\n\n  constructor(private callbackFunc: Function,\n              private selector: Function,\n              private args: any[],\n              public scheduler: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T | T[]>): Subscription {\n    const callbackFunc = this.callbackFunc;\n    const args = this.args;\n    const scheduler = this.scheduler;\n    let subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject<T>();\n        const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n          const source = (<any>handlerFn).source;\n          const { selector, subject } = source;\n          const err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            const result = tryCatch(selector).apply(this, innerArgs);\n            if (result === errorObject) {\n              subject.error(errorObject.e);\n            } else {\n              subject.next(result);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length === 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        };\n        // use named function instance to avoid closure.\n        (<any>handler).source = this;\n\n        const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n        if (result === errorObject) {\n          subject.error(errorObject.e);\n        }\n      }\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, { source: this, subscriber });\n    }\n  }\n}\n\ninterface DispatchState<T> {\n  source: BoundNodeCallbackObservable<T>;\n  subscriber: Subscriber<T>;\n}\n\nfunction dispatch<T>(this: Action<DispatchState<T>>, state: DispatchState<T>) {\n  const self = (<Subscription> this);\n  const { source, subscriber } = state;\n  // XXX: cast to `any` to access to the private field in `source`.\n  const { callbackFunc, args, scheduler } = source as any;\n  let subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject<T>();\n\n    const handler = function handlerFn(this: any, ...innerArgs: any[]) {\n      const source = (<any>handlerFn).source;\n      const { selector, subject } = source;\n      const err = innerArgs.shift();\n\n      if (err) {\n        subject.error(err);\n      } else if (selector) {\n        const result = tryCatch(selector).apply(this, innerArgs);\n        if (result === errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, { err: errorObject.e, subject }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, { value: result, subject }));\n        }\n      } else {\n        const value = innerArgs.length === 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n      }\n    };\n    // use named function to pass values in without closure\n    (<any>handler).source = source;\n\n    const result = tryCatch(callbackFunc).apply(this, args.concat(handler));\n    if (result === errorObject) {\n      subject.error(errorObject.e);\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import {  BoundNodeCallbackObservable  } from './BoundNodeCallbackObservable';\n\nexport const bindNodeCallback = BoundNodeCallbackObservable.create;","import { Observable } from '../../Observable';\nimport { bindNodeCallback as staticBindNodeCallback } from '../../observable/bindNodeCallback';\n\nObservable.bindNodeCallback = staticBindNodeCallback;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let bindNodeCallback: typeof staticBindNodeCallback;\n  }\n}","import {  Observable, ObservableInput  } from '../Observable';\nimport {  IScheduler  } from '../Scheduler';\nimport {  isScheduler  } from '../util/isScheduler';\nimport {  isArray  } from '../util/isArray';\nimport {  ArrayObservable  } from './ArrayObservable';\nimport {  CombineLatestOperator  } from '../operator/combineLatest';\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T, R>(v1: ObservableInput<T>, project: (v1: T) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: IScheduler): Observable<R>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: IScheduler): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R, scheduler?: IScheduler): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | IScheduler>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | IScheduler>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | IScheduler>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable, in order, and\n * collecting an array of each of the most recent values any time any of the\n * input Observables emits, then either taking that array and passing it as\n * arguments to an optional `project` function and emitting the return value of\n * that, or just emitting the array of recent values directly if there is no\n * `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} observable1 An input Observable to combine with the\n * source Observable.\n * @param {Observable} observable2 An input Observable to combine with the\n * source Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    IScheduler>): Observable<R> {\n  let project: (...values: Array<any>) => R =  null;\n  let scheduler: IScheduler = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <IScheduler>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator<T, R>(project));\n}","import { Observable } from '../../Observable';\nimport { combineLatest as combineLatestStatic } from '../../observable/combineLatest';\n\nObservable.combineLatest = combineLatestStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let combineLatest: typeof combineLatestStatic;\n  }\n}","import {  concatStatic  } from '../operator/concat';\n\nexport const concat = concatStatic;","import { Observable } from '../../Observable';\nimport { concat as concatStatic } from '../../observable/concat';\n\nObservable.concat = concatStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let concat: typeof concatStatic;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class DeferObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that, on subscribe, calls an Observable factory to\n   * make an Observable for each new Observer.\n   *\n   * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n   * is subscribed.\n   * </span>\n   *\n   * <img src=\"./img/defer.png\" width=\"100%\">\n   *\n   * `defer` allows you to create the Observable only when the Observer\n   * subscribes, and create a fresh Observable for each Observer. It waits until\n   * an Observer subscribes to it, and then it generates an Observable,\n   * typically with an Observable factory function. It does this afresh for each\n   * subscriber, so although each subscriber may think it is subscribing to the\n   * same Observable, in fact each subscriber gets its own individual\n   * Observable.\n   *\n   * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n   * var clicksOrInterval = Rx.Observable.defer(function () {\n   *   if (Math.random() > 0.5) {\n   *     return Rx.Observable.fromEvent(document, 'click');\n   *   } else {\n   *     return Rx.Observable.interval(1000);\n   *   }\n   * });\n   * clicksOrInterval.subscribe(x => console.log(x));\n   * \n   * // Results in the following behavior:\n   * // If the result of Math.random() is greater than 0.5 it will listen\n   * // for clicks anywhere on the \"document\"; when document is clicked it\n   * // will log a MouseEvent object to the console. If the result is less\n   * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n   *\n   * @see {@link create}\n   *\n   * @param {function(): Observable|Promise} observableFactory The Observable\n   * factory function to invoke for each Observer that subscribes to the output\n   * Observable. May also return a Promise, which will be converted on the fly\n   * to an Observable.\n   * @return {Observable} An Observable whose Observers' subscriptions trigger\n   * an invocation of the given Observable factory function.\n   * @static true\n   * @name defer\n   * @owner Observable\n   */\n  static create<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n    return new DeferObservable(observableFactory);\n  }\n\n  constructor(private observableFactory: () => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return new DeferSubscriber(subscriber, this.observableFactory);\n  }\n}\n\nclass DeferSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private factory: () => SubscribableOrPromise<T> | void) {\n    super(destination);\n    this.tryDefer();\n  }\n\n  private tryDefer(): void {\n    try {\n      this._callFactory();\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private _callFactory(): void {\n    const result = this.factory();\n    if (result) {\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","import {  DeferObservable  } from './DeferObservable';\n\nexport const defer = DeferObservable.create;","import { Observable } from '../../Observable';\nimport { defer as staticDefer } from '../../observable/defer';\n\nObservable.defer = staticDefer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let defer: typeof staticDefer;\n  }\n}","import {  EmptyObservable  } from './EmptyObservable';\n\nexport const empty = EmptyObservable.create;","import { Observable } from '../../Observable';\nimport { empty as staticEmpty } from '../../observable/empty';\n\nObservable.empty = staticEmpty;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let empty: typeof staticEmpty;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isArray } from '../util/isArray';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ForkJoinObservable<T> extends Observable<T> {\n  constructor(private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super();\n  }\n\n  /* tslint:disable:max-line-length */\n  static create<T, T2>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>): Observable<[T, T2]>;\n  static create<T, T2, T3>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>): Observable<[T, T2, T3]>;\n  static create<T, T2, T3, T4>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>): Observable<[T, T2, T3, T4]>;\n  static create<T, T2, T3, T4, T5>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>): Observable<[T, T2, T3, T4, T5]>;\n  static create<T, T2, T3, T4, T5, T6>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n  static create<T, T2, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\n  static create<T, T2, T3, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n  static create<T, T2, T3, T4, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n  static create<T, T2, T3, T4, T5, T6, R>(v1: SubscribableOrPromise<T>, v2: SubscribableOrPromise<T2>, v3: SubscribableOrPromise<T3>, v4: SubscribableOrPromise<T4>, v5: SubscribableOrPromise<T5>, v6: SubscribableOrPromise<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n  static create<T>(sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(sources: SubscribableOrPromise<any>[]): Observable<R>;\n  static create<T, R>(sources: SubscribableOrPromise<T>[], project: (...values: Array<T>) => R): Observable<R>;\n  static create<R>(sources: SubscribableOrPromise<any>[], project: (...values: Array<any>) => R): Observable<R>;\n  static create<T>(...sources: SubscribableOrPromise<T>[]): Observable<T[]>;\n  static create<R>(...sources: SubscribableOrPromise<any>[]): Observable<R>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * @param sources\n   * @return {any}\n   * @static true\n   * @name forkJoin\n   * @owner Observable\n   */\n  static create<T>(...sources: Array<SubscribableOrPromise<any> |\n                                  Array<SubscribableOrPromise<any>> |\n                                  ((...values: Array<any>) => any)>): Observable<T> {\n    if (sources === null || arguments.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    let resultSelector: (...values: Array<any>) => any = null;\n    if (typeof sources[sources.length - 1] === 'function') {\n      resultSelector = <(...values: Array<any>) => any>sources.pop();\n    }\n\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `forkJoin([obs1, obs2, obs3], resultSelector)`\n    if (sources.length === 1 && isArray(sources[0])) {\n      sources = <Array<SubscribableOrPromise<any>>>sources[0];\n    }\n\n    if (sources.length === 0) {\n      return new EmptyObservable<T>();\n    }\n\n    return new ForkJoinObservable(<Array<SubscribableOrPromise<any>>>sources, resultSelector);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    return new ForkJoinSubscriber(subscriber, this.sources, this.resultSelector);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private total: number;\n  private values: any[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<T>,\n              private sources: Array<SubscribableOrPromise<any>>,\n              private resultSelector?: (...values: Array<any>) => T) {\n    super(destination);\n\n    const len = sources.length;\n    this.total = len;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        (<any> innerSubscription).outerIndex = i;\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(<any>innerSub)._hasValue) {\n      (<any>innerSub)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const destination = this.destination;\n    const { haveValues, resultSelector, values } = this;\n    const len = values.length;\n\n    if (!(<any>innerSub)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      const value = resultSelector ? resultSelector.apply(this, values) : values;\n      destination.next(value);\n    }\n\n    destination.complete();\n  }\n}","import {  ForkJoinObservable  } from './ForkJoinObservable';\n\nexport const forkJoin = ForkJoinObservable.create;","import { Observable } from '../../Observable';\nimport { forkJoin as staticForkJoin } from '../../observable/forkJoin';\n\nObservable.forkJoin = staticForkJoin;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let forkJoin: typeof staticForkJoin;\n  }\n}","import {  FromObservable  } from './FromObservable';\n\nexport const from = FromObservable.create;","import { Observable } from '../../Observable';\nimport { from as staticFrom } from '../../observable/from';\n\nObservable.from = staticFrom;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let from: typeof staticFrom;\n  }\n}","import { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\nconst toString: Function = Object.prototype.toString;\n\nexport type NodeStyleEventEmitter = {\n  addListener: (eventName: string, handler: Function) => void;\n  removeListener: (eventName: string, handler: Function) => void;\n};\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nexport type JQueryStyleEventEmitter = {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n};\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isNodeList(sourceObj: any): sourceObj is NodeList {\n  return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\n\nfunction isHTMLCollection(sourceObj: any): sourceObj is HTMLCollection {\n  return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is EventTarget {\n  return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n\nexport type EventTargetLike = EventTarget | NodeStyleEventEmitter | JQueryStyleEventEmitter | NodeList | HTMLCollection;\n\nexport type EventListenerOptions = {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n} | boolean;\n\nexport type SelectorMethodSignature<T> = (...args: Array<any>) => T;\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventObservable<T> extends Observable<T> {\n\n  /* tslint:disable:max-line-length */\n  static create<T>(target: EventTargetLike, eventName: string): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, selector: SelectorMethodSignature<T>): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions): Observable<T>;\n  static create<T>(target: EventTargetLike, eventName: string, options: EventListenerOptions, selector: SelectorMethodSignature<T>): Observable<T>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Creates an Observable that emits events of a specific type coming from the\n   * given event target.\n   *\n   * <span class=\"informal\">Creates an Observable from DOM events, or Node\n   * EventEmitter events or others.</span>\n   *\n   * <img src=\"./img/fromEvent.png\" width=\"100%\">\n   *\n   * Creates an Observable by attaching an event listener to an \"event target\",\n   * which may be an object with `addEventListener` and `removeEventListener`,\n   * a Node.js EventEmitter, a jQuery style EventEmitter, a NodeList from the\n   * DOM, or an HTMLCollection from the DOM. The event handler is attached when\n   * the output Observable is subscribed, and removed when the Subscription is\n   * unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * var clicks = Rx.Observable.fromEvent(document, 'click');\n   * clicks.subscribe(x => console.log(x));\n   *\n   * // Results in:\n   * // MouseEvent object logged to console everytime a click\n   * // occurs on the document.\n   *\n   * @see {@link from}\n   * @see {@link fromEventPattern}\n   *\n   * @param {EventTargetLike} target The DOMElement, event target, Node.js\n   * EventEmitter, NodeList or HTMLCollection to attach the event handler to.\n   * @param {string} eventName The event name of interest, being emitted by the\n   * `target`.\n   * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n   * @param {SelectorMethodSignature<T>} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEvent\n   * @owner Observable\n   */\n  static create<T>(target: EventTargetLike,\n                   eventName: string,\n                   options?: EventListenerOptions,\n                   selector?: SelectorMethodSignature<T>): Observable<T> {\n    if (isFunction(options)) {\n      selector = <any>options;\n      options = undefined;\n    }\n    return new FromEventObservable(target, eventName, selector, options);\n  }\n\n  constructor(private sourceObj: EventTargetLike,\n              private eventName: string,\n              private selector?: SelectorMethodSignature<T>,\n              private options?: EventListenerOptions) {\n    super();\n  }\n\n  private static setupSubscription<T>(sourceObj: EventTargetLike,\n                                      eventName: string,\n                                      handler: Function,\n                                      subscriber: Subscriber<T>,\n                                      options?: EventListenerOptions) {\n    let unsubscribe: () => void;\n    if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n      for (let i = 0, len = sourceObj.length; i < len; i++) {\n        FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n      }\n    } else if (isEventTarget(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addEventListener(eventName, <EventListener>handler, <boolean>options);\n      unsubscribe = () => source.removeEventListener(eventName, <EventListener>handler);\n    } else if (isJQueryStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.on(eventName, handler);\n      unsubscribe = () => source.off(eventName, handler);\n    } else if (isNodeStyleEventEmitter(sourceObj)) {\n      const source = sourceObj;\n      sourceObj.addListener(eventName, handler);\n      unsubscribe = () => source.removeListener(eventName, handler);\n    } else {\n      throw new TypeError('Invalid event target');\n    }\n\n    subscriber.add(new Subscription(unsubscribe));\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const sourceObj = this.sourceObj;\n    const eventName = this.eventName;\n    const options = this.options;\n    const selector = this.selector;\n    let handler = selector ? (...args: any[]) => {\n      let result = tryCatch(selector)(...args);\n      if (result === errorObject) {\n        subscriber.error(errorObject.e);\n      } else {\n        subscriber.next(result);\n      }\n    } : (e: any) => subscriber.next(e);\n\n    FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n  }\n}\n","import {  FromEventObservable  } from './FromEventObservable';\n\nexport const fromEvent = FromEventObservable.create;","import { Observable } from '../../Observable';\nimport { fromEvent as staticFromEvent } from '../../observable/fromEvent';\n\nObservable.fromEvent = staticFromEvent;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEvent: typeof staticFromEvent;\n  }\n}","import { isFunction } from '../util/isFunction';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromEventPatternObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable from an API based on addHandler/removeHandler\n   * functions.\n   *\n   * <span class=\"informal\">Converts any addHandler/removeHandler API to an\n   * Observable.</span>\n   *\n   * <img src=\"./img/fromEventPattern.png\" width=\"100%\">\n   *\n   * Creates an Observable by using the `addHandler` and `removeHandler`\n   * functions to add and remove the handlers, with an optional selector\n   * function to project the event arguments to a result. The `addHandler` is\n   * called when the output Observable is subscribed, and `removeHandler` is\n   * called when the Subscription is unsubscribed.\n   *\n   * @example <caption>Emits clicks happening on the DOM document</caption>\n   * function addClickHandler(handler) {\n   *   document.addEventListener('click', handler);\n   * }\n   *  \n   * function removeClickHandler(handler) {\n   *   document.removeEventListener('click', handler);\n   * }\n   *  \n   * var clicks = Rx.Observable.fromEventPattern(\n   *   addClickHandler,\n   *   removeClickHandler\n   * );\n   * clicks.subscribe(x => console.log(x));\n   *\n   * @see {@link from}\n   * @see {@link fromEvent}\n   *\n   * @param {function(handler: Function): any} addHandler A function that takes\n   * a `handler` function as argument and attaches it somehow to the actual\n   * source of events.\n   * @param {function(handler: Function, signal?: any): void} [removeHandler] An optional function that\n   * takes a `handler` function as argument and removes it in case it was\n   * previously attached using `addHandler`. if addHandler returns signal to teardown when remove,\n   * removeHandler function will forward it.\n   * @param {function(...args: any): T} [selector] An optional function to\n   * post-process results. It takes the arguments from the event handler and\n   * should return a single value.\n   * @return {Observable<T>}\n   * @static true\n   * @name fromEventPattern\n   * @owner Observable\n   */\n  static create<T>(addHandler: (handler: Function) => any,\n                   removeHandler?: (handler: Function, signal?: any) => void,\n                   selector?: (...args: Array<any>) => T) {\n    return new FromEventPatternObservable(addHandler, removeHandler, selector);\n  }\n\n  constructor(private addHandler: (handler: Function) => any,\n              private removeHandler?: (handler: Function, signal?: any) => void,\n              private selector?: (...args: Array<any>) => T) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const removeHandler = this.removeHandler;\n\n    const handler = !!this.selector ? (...args: Array<any>) => {\n      this._callSelector(subscriber, args);\n    } : function(e: any) { subscriber.next(e); };\n\n    const retValue = this._callAddHandler(handler, subscriber);\n\n    if (!isFunction(removeHandler)) {\n      return;\n    }\n\n    subscriber.add(new Subscription(() => {\n      //TODO: determine whether or not to forward to error handler\n      removeHandler(handler, retValue) ;\n    }));\n  }\n\n  private _callSelector(subscriber: Subscriber<T>, args: Array<any>): void {\n    try {\n      const result: T = this.selector(...args);\n      subscriber.next(result);\n    }\n    catch (e) {\n      subscriber.error(e);\n    }\n  }\n\n  private _callAddHandler(handler: (e: any) => void, errorSubscriber: Subscriber<T>): any | null {\n    try {\n      return this.addHandler(handler) || null;\n    }\n    catch (e) {\n      errorSubscriber.error(e);\n    }\n  }\n}","import {  FromEventPatternObservable  } from './FromEventPatternObservable';\n\nexport const fromEventPattern = FromEventPatternObservable.create;","import { Observable } from '../../Observable';\nimport { fromEventPattern as staticFromEventPattern } from '../../observable/fromEventPattern';\n\nObservable.fromEventPattern = staticFromEventPattern;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromEventPattern: typeof staticFromEventPattern;\n  }\n}","import {  PromiseObservable  } from './PromiseObservable';\n\nexport const fromPromise = PromiseObservable.create;","import { Observable } from '../../Observable';\nimport { fromPromise as staticFromPromise } from '../../observable/fromPromise';\n\nObservable.fromPromise = staticFromPromise;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let fromPromise: typeof staticFromPromise;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Observable } from '../Observable' ;\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\nconst selfSelector = <T>(value: T) => value;\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n  */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n  */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * IScheduler to use for generation process.\n   * By default, a generator starts immediately.\n  */\n  scheduler?: IScheduler;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class GenerateObservable<T, S> extends Observable<T> {\n  constructor(private initialState: S,\n              private condition: ConditionFunc<S>,\n              private iterate: IterateFunc<S>,\n              private resultSelector: ResultFunc<S, T>,\n              private scheduler?: IScheduler) {\n      super();\n  }\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1, x => x);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, x => x + 1, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(initialState: S,\n                      condition: ConditionFunc<S>,\n                      iterate: IterateFunc<S>,\n                      resultSelector: ResultFunc<S, T>,\n                      scheduler?: IScheduler): Observable<T>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload uses state as an emitted value.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate(0, x => x < 10, x => x + 1);\n   *\n   * @example <caption>Using asap scheduler, produces sequence of 1, 2, 4, then completes.</caption>\n   * var res = Rx.Observable.generate(1, x => x < 5, x => x * 2, Rx.Scheduler.asap);\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {S} initialState Initial state.\n   * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n   * @param {function (state: S): S} iterate Iteration step function.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} on which to run the generator loop. If not provided, defaults to emit immediately.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(initialState: S,\n                   condition: ConditionFunc<S>,\n                   iterate: IterateFunc<S>,\n                   scheduler?: IScheduler): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n   * @returns {Observable<S>} The generated sequence.\n   */\n  static create<S>(options: GenerateBaseOptions<S>): Observable<S>\n\n  /**\n   * Generates an observable sequence by running a state-driven loop\n   * producing the sequence's elements, using the specified scheduler\n   * to send out observer messages.\n   * The overload accepts options object that might contain initial state, iterate,\n   * condition, result selector and scheduler.\n   *\n   * <img src=\"./img/generate.png\" width=\"100%\">\n   *\n   * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n   * var res = Rx.Observable.generate({\n   *   initialState: 0,\n   *   condition: x => x < 10,\n   *   iterate: x => x + 1,\n   *   resultSelector: x => x\n   * });\n   *\n   * @see {@link from}\n   * @see {@link create}\n   *\n   * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n   * @returns {Observable<T>} The generated sequence.\n   */\n  static create<T, S>(options: GenerateOptions<T, S>): Observable<T>\n\n  static create<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                      condition?: ConditionFunc<S>,\n                      iterate?: IterateFunc<S>,\n                      resultSelectorOrObservable?: (ResultFunc<S, T>) | IScheduler,\n                      scheduler?: IScheduler): Observable<T> {\n    if (arguments.length == 1) {\n      return new GenerateObservable<T, S>(\n        (<GenerateOptions<T, S>>initialStateOrOptions).initialState,\n        (<GenerateOptions<T, S>>initialStateOrOptions).condition,\n        (<GenerateOptions<T, S>>initialStateOrOptions).iterate,\n        (<GenerateOptions<T, S>>initialStateOrOptions).resultSelector || selfSelector,\n        (<GenerateOptions<T, S>>initialStateOrOptions).scheduler);\n    }\n\n    if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n      return new GenerateObservable<T, S>(\n        <S>initialStateOrOptions,\n        condition,\n        iterate,\n        selfSelector,\n        <IScheduler>resultSelectorOrObservable);\n    }\n\n    return new GenerateObservable<T, S>(\n      <S>initialStateOrOptions,\n      condition,\n      iterate,\n      <ResultFunc<S, T>>resultSelectorOrObservable,\n      <IScheduler>scheduler);\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription | Function | void {\n    let state = this.initialState;\n    if (this.scheduler) {\n      return this.scheduler.schedule<SchedulerState<T, S>>(GenerateObservable.dispatch, 0, {\n        subscriber,\n        iterate: this.iterate,\n        condition: this.condition,\n        resultSelector: this.resultSelector,\n        state });\n    }\n    const { condition, resultSelector, iterate } = this;\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } while (true);\n  }\n\n  private static dispatch<T, S>(state: SchedulerState<T, S>): Subscription | void {\n    const { subscriber, condition } = state;\n    if (subscriber.closed) {\n      return;\n    }\n    if (state.needIterate) {\n      try {\n        state.state = state.iterate(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n    } else {\n      state.needIterate = true;\n    }\n    if (condition) {\n      let conditionResult: boolean;\n      try {\n        conditionResult = condition(state.state);\n      } catch (err) {\n        subscriber.error(err);\n        return;\n      }\n      if (!conditionResult) {\n        subscriber.complete();\n        return;\n      }\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    let value: T;\n    try {\n      value = state.resultSelector(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return;\n    }\n    if (subscriber.closed) {\n      return;\n    }\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n    return (<Action<SchedulerState<T, S>>><any>this).schedule(state);\n  }\n}\n","import { Observable } from '../../Observable';\nimport { GenerateObservable } from '../../observable/GenerateObservable';\n\nObservable.generate = GenerateObservable.create;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let generate: typeof GenerateObservable.create;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IfObservable<T, R> extends Observable<T> {\n\n  static create<T, R>(condition: () => boolean | void,\n                      thenSource?: SubscribableOrPromise<T> | void,\n                      elseSource?: SubscribableOrPromise<R> | void): Observable<T|R> {\n    return new IfObservable(condition, thenSource, elseSource);\n  }\n\n  constructor(private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T|R>): TeardownLogic {\n    const { condition, thenSource, elseSource } = this;\n\n    return new IfSubscriber(subscriber, condition, thenSource, elseSource);\n  }\n}\n\nclass IfSubscriber<T, R> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private condition: () => boolean | void,\n              private thenSource?: SubscribableOrPromise<T> | void,\n              private elseSource?: SubscribableOrPromise<R> | void) {\n    super(destination);\n    this.tryIf();\n  }\n\n  private tryIf(): void {\n    const { condition, thenSource, elseSource } = this;\n\n    let result: boolean;\n    try {\n      result = <boolean>condition();\n      const source = result ? thenSource : elseSource;\n\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      } else {\n        this._complete();\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}\n","import {  IfObservable  } from './IfObservable';\n\nexport const _if = IfObservable.create;","import { Observable } from '../../Observable';\nimport { _if } from '../../observable/if';\n\nObservable.if = _if;","import { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IntervalObservable extends Observable<number> {\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n  static create(period: number = 0,\n                scheduler: IScheduler = async): Observable<number> {\n    return new IntervalObservable(period, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { index, subscriber, period } = state;\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n\n    (<any> this).schedule(state, period);\n  }\n\n  constructor(private period: number = 0,\n              private scheduler: IScheduler = async) {\n    super();\n    if (!isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>) {\n    const index = 0;\n    const period = this.period;\n    const scheduler = this.scheduler;\n\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index, subscriber, period\n    }));\n  }\n}\n","import {  IntervalObservable  } from './IntervalObservable';\n\nexport const interval = IntervalObservable.create;","import { Observable } from '../../Observable';\nimport { interval as staticInterval } from '../../observable/interval';\n\nObservable.interval = staticInterval;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let interval: typeof staticInterval;\n  }\n}","import {  mergeStatic  } from '../operator/merge';\n\nexport const merge = mergeStatic;","import { Observable } from '../../Observable';\nimport { merge as mergeStatic } from '../../observable/merge';\n\nObservable.merge = mergeStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let merge: typeof mergeStatic;\n  }\n}","import { Observable } from '../../Observable';\nimport { raceStatic } from '../../operator/race';\n\nObservable.race = raceStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let race: typeof raceStatic;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class NeverObservable<T> extends Observable<T> {\n  /**\n   * Creates an Observable that emits no items to the Observer.\n   *\n   * <span class=\"informal\">An Observable that never emits anything.</span>\n   *\n   * <img src=\"./img/never.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that emits\n   * neither values nor errors nor the completion notification. It can be used\n   * for testing purposes or for composing with other Observables. Please not\n   * that by never emitting a complete notification, this Observable keeps the\n   * subscription from being disposed automatically. Subscriptions need to be\n   * manually disposed.\n   *\n   * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n   * function info() {\n   *   console.log('Will not be called');\n   * }\n   * var result = Rx.Observable.never().startWith(7);\n   * result.subscribe(x => console.log(x), info, info);\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @return {Observable} A \"never\" Observable: never emits anything.\n   * @static true\n   * @name never\n   * @owner Observable\n   */\n  static create<T>() {\n    return new NeverObservable<T>();\n  }\n\n  constructor() {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): void {\n    noop();\n  }\n}\n","import {  NeverObservable  } from './NeverObservable';\n\nexport const never = NeverObservable.create;","import { Observable } from '../../Observable';\nimport { never as staticNever } from '../../observable/never';\n\nObservable.never = staticNever;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let never: typeof staticNever;\n  }\n}","import {  ArrayObservable  } from './ArrayObservable';\n\nexport const of = ArrayObservable.of;","import { Observable } from '../../Observable';\nimport { of as staticOf } from '../../observable/of';\n\nObservable.of = staticOf;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let of: typeof staticOf; //formOf an iceberg!\n  }\n}","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNextStatic } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.onErrorResumeNext = onErrorResumeNextStatic;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let onErrorResumeNext: typeof onErrorResumeNextStatic;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\r\nimport { Action } from '../scheduler/Action';\r\nimport { Observable } from '../Observable';\r\nimport { Subscriber } from '../Subscriber';\r\nimport { TeardownLogic } from '../Subscription';\r\n\r\ninterface PairsContext<T> {\r\n  obj: Object;\r\n  keys: Array<string>;\r\n  length: number;\r\n  index: number;\r\n  subscriber: Subscriber<Array<string | T>>;\r\n}\r\n\r\nfunction dispatch<T>(this: Action<PairsContext<T>>, state: PairsContext<T>) {\r\n  const {obj, keys, length, index, subscriber} = state;\r\n\r\n  if (index === length) {\r\n    subscriber.complete();\r\n    return;\r\n  }\r\n\r\n  const key = keys[index];\r\n  subscriber.next([key, obj[key]]);\r\n\r\n  state.index = index + 1;\r\n\r\n  this.schedule(state);\r\n}\r\n\r\n/**\r\n * We need this JSDoc comment for affecting ESDoc.\r\n * @extends {Ignored}\r\n * @hide true\r\n */\r\nexport class PairsObservable<T> extends Observable<Array<string | T>> {\r\n  private keys: Array<string>;\r\n\r\n  /**\r\n   * Convert an object into an observable sequence of [key, value] pairs\r\n   * using an optional IScheduler to enumerate the object.\r\n   *\r\n   * @example <caption>Converts a javascript object to an Observable</caption>\r\n   * var obj = {\r\n   *   foo: 42,\r\n   *   bar: 56,\r\n   *   baz: 78\r\n   * };\r\n   *\r\n   * var source = Rx.Observable.pairs(obj);\r\n   *\r\n   * var subscription = source.subscribe(\r\n   *   function (x) {\r\n   *     console.log('Next: %s', x);\r\n   *   },\r\n   *   function (err) {\r\n   *     console.log('Error: %s', err);\r\n   *   },\r\n   *   function () {\r\n   *     console.log('Completed');\r\n   *   });\r\n   *\r\n   * @param {Object} obj The object to inspect and turn into an\r\n   * Observable sequence.\r\n   * @param {Scheduler} [scheduler] An optional IScheduler to run the\r\n   * enumeration of the input sequence on.\r\n   * @returns {(Observable<Array<string | T>>)} An observable sequence of\r\n   * [key, value] pairs from the object.\r\n   */\r\n  static create<T>(obj: Object, scheduler?: IScheduler): Observable<Array<string | T>> {\r\n    return new PairsObservable<T>(obj, scheduler);\r\n  }\r\n\r\n  constructor(private obj: Object, private scheduler?: IScheduler) {\r\n    super();\r\n    this.keys = Object.keys(obj);\r\n  }\r\n\r\n  protected _subscribe(subscriber: Subscriber<Array<string | T>>): TeardownLogic {\r\n    const {keys, scheduler} = this;\r\n    const length = keys.length;\r\n\r\n    if (scheduler) {\r\n      return scheduler.schedule(dispatch, 0, {\r\n        obj: this.obj, keys, length, index: 0, subscriber\r\n      });\r\n    } else {\r\n      for (let idx = 0; idx < length; idx++) {\r\n        const key = keys[idx];\r\n        subscriber.next([key, this.obj[key]]);\r\n      }\r\n      subscriber.complete();\r\n    }\r\n  }\r\n}","import {  PairsObservable  } from './PairsObservable';\r\n\r\nexport const pairs = PairsObservable.create;","import { Observable } from '../../Observable';\r\nimport { pairs as staticPairs } from '../../observable/pairs';\r\n\r\nObservable.pairs = staticPairs;\r\n\r\ndeclare module '../../Observable' {\r\n  namespace Observable {\r\n    export let pairs: typeof staticPairs;\r\n  }\r\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class RangeObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that emits a sequence of numbers within a specified\n   * range.\n   *\n   * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n   *\n   * <img src=\"./img/range.png\" width=\"100%\">\n   *\n   * `range` operator emits a range of sequential integers, in order, where you\n   * select the `start` of the range and its `length`. By default, uses no\n   * IScheduler and just delivers the notifications synchronously, but may use\n   * an optional IScheduler to regulate those deliveries.\n   *\n   * @example <caption>Emits the numbers 1 to 10</caption>\n   * var numbers = Rx.Observable.range(1, 10);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link interval}\n   *\n   * @param {number} [start=0] The value of the first integer in the sequence.\n   * @param {number} [count=0] The number of sequential integers to generate.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the notifications.\n   * @return {Observable} An Observable of numbers that emits a finite range of\n   * sequential integers.\n   * @static true\n   * @name range\n   * @owner Observable\n   */\n  static create(start: number = 0,\n                count: number = 0,\n                scheduler?: IScheduler): Observable<number> {\n    return new RangeObservable(start, count, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { start, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(start);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n    state.start = start + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  private start: number;\n  private _count: number;\n  private scheduler: IScheduler;\n\n  constructor(start: number,\n              count: number,\n              scheduler?: IScheduler) {\n    super();\n    this.start = start;\n    this._count = count;\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    let index = 0;\n    let start = this.start;\n    const count = this._count;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(RangeObservable.dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(start++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n","import {  RangeObservable  } from './RangeObservable';\n\nexport const range = RangeObservable.create;","import { Observable } from '../../Observable';\nimport { range as staticRange } from '../../observable/range';\n\nObservable.range = staticRange;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let range: typeof staticRange;\n  }\n}","import { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { AnonymousSubscription, TeardownLogic } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class UsingObservable<T> extends Observable<T> {\n\n  static create<T>(resourceFactory: () => AnonymousSubscription | void,\n                   observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void): Observable<T> {\n    return new UsingObservable<T>(resourceFactory, observableFactory);\n  }\n\n  constructor(private resourceFactory: () => AnonymousSubscription | void,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const { resourceFactory, observableFactory } = this;\n\n    let resource: AnonymousSubscription;\n\n    try {\n      resource = <AnonymousSubscription>resourceFactory();\n      return new UsingSubscriber(subscriber, resource, observableFactory);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }\n}\n\nclass UsingSubscriber<T> extends OuterSubscriber<T, T> {\n  constructor(destination: Subscriber<T>,\n              private resource: AnonymousSubscription,\n              private observableFactory: (resource: AnonymousSubscription) => SubscribableOrPromise<T> | void) {\n    super(destination);\n    destination.add(resource);\n    this.tryUse();\n  }\n\n  private tryUse(): void {\n    try {\n      const source = this.observableFactory.call(this, this.resource);\n      if (source) {\n        this.add(subscribeToResult(this, source));\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n}","import {  UsingObservable  } from './UsingObservable';\n\nexport const using = UsingObservable.create;","import { Observable } from '../../Observable';\nimport { using as staticUsing } from '../../observable/using';\n\nObservable.using = staticUsing;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let using: typeof staticUsing;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg {\n  error: any;\n  subscriber: any;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ErrorObservable<T> extends Observable<any> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits an error notification.\n   *\n   * <span class=\"informal\">Just emits 'error', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/throw.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the error notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then emit an error.</caption>\n   * var result = Rx.Observable.throw(new Error('oops!')).startWith(7);\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @example <caption>Map and flattens numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x === 13 ?\n   *     Rx.Observable.throw('Thirteens are bad') :\n   *     Rx.Observable.of('a', 'b', 'c')\n   * );\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link of}\n   *\n   * @param {any} error The particular Error to pass to the error notification.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the error notification.\n   * @return {Observable} An error Observable: emits only the error notification\n   * using the given error argument.\n   * @static true\n   * @name throw\n   * @owner Observable\n   */\n  static create<T>(error: T, scheduler?: IScheduler): ErrorObservable<T> {\n    return new ErrorObservable(error, scheduler);\n  }\n\n  static dispatch(arg: DispatchArg) {\n    const { error, subscriber } = arg;\n    subscriber.error(error);\n  }\n\n  constructor(public error: T, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: any): TeardownLogic {\n    const error = this.error;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ErrorObservable.dispatch, 0, {\n        error, subscriber\n      });\n    } else {\n      subscriber.error(error);\n    }\n  }\n}\n","import {  ErrorObservable  } from './ErrorObservable';\n\nexport const _throw = ErrorObservable.create;","import { Observable } from '../../Observable';\nimport { _throw } from '../../observable/throw';\n\nObservable.throw = _throw;","import { isNumeric } from '../util/isNumeric';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isDate } from '../util/isDate';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class TimerObservable extends Observable<number> {\n\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n  static create(initialDelay: number | Date = 0,\n                period?: number | IScheduler,\n                scheduler?: IScheduler): Observable<number> {\n    return new TimerObservable(initialDelay, period, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, period, subscriber } = state;\n    const action = (<any> this);\n\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  }\n\n  private period: number = -1;\n  private dueTime: number = 0;\n  private scheduler: IScheduler;\n\n  constructor(dueTime: number | Date = 0,\n              period?: number | IScheduler,\n              scheduler?: IScheduler) {\n    super();\n\n    if (isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler(period)) {\n      scheduler = <IScheduler> period;\n    }\n\n    if (!isScheduler(scheduler)) {\n      scheduler = async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate(dueTime) ?\n      (+dueTime - this.scheduler.now()) :\n      (<number> dueTime);\n  }\n\n  protected _subscribe(subscriber: Subscriber<number>): TeardownLogic {\n    const index = 0;\n    const { period, dueTime, scheduler } = this;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index, period, subscriber\n    });\n  }\n}\n","import {  TimerObservable  } from './TimerObservable';\n\nexport const timer = TimerObservable.create;","import { Observable } from '../../Observable';\nimport { timer as staticTimer } from '../../observable/timer';\n\nObservable.timer = staticTimer;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let timer: typeof staticTimer;\n  }\n}","import {  zipStatic  } from '../operator/zip';\n\nexport const zip = zipStatic;","import { Observable } from '../../Observable';\nimport { zip as zipStatic } from '../../observable/zip';\n\nObservable.zip = zipStatic;\n\ndeclare module '../../Observable' {\n  namespace Observable {\n    export let zip: typeof zipStatic;\n  }\n}","import {  AjaxObservable, AjaxCreationMethod  } from './AjaxObservable';\n\nexport const ajax: AjaxCreationMethod = AjaxObservable.create;","import { Observable } from '../../../Observable';\nimport { ajax as staticAjax } from '../../../observable/dom/ajax';\nimport { AjaxCreationMethod } from '../../../observable/dom/AjaxObservable';\n\nObservable.ajax = staticAjax;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let ajax: AjaxCreationMethod;\n  }\n}","import { root } from './root';\n\nexport function assignImpl(target: Object, ...sources: Object[]) {\n  const len = sources.length;\n  for (let i = 0; i < len; i++) {\n    const source = sources[i];\n    for (let k in source) {\n      if (source.hasOwnProperty(k)) {\n        target[k] = source[k];\n      }\n    }\n  }\n  return target;\n};\n\nexport function getAssign(root: any) {\n  return root.Object.assign || assignImpl;\n}\n\nexport const assign = getAssign(root);","import { Subject, AnonymousSubject } from '../../Subject';\nimport { Subscriber } from '../../Subscriber';\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { Operator } from '../../Operator';\nimport { root } from '../../util/root';\nimport { ReplaySubject } from '../../ReplaySubject';\nimport { Observer, NextObserver } from '../../Observer';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { assign } from '../../util/assign';\n\nexport interface WebSocketSubjectConfig {\n  url: string;\n  protocol?: string | Array<string>;\n  resultSelector?: <T>(e: MessageEvent) => T;\n  openObserver?: NextObserver<Event>;\n  closeObserver?: NextObserver<CloseEvent>;\n  closingObserver?: NextObserver<void>;\n  WebSocketCtor?: { new(url: string, protocol?: string|Array<string>): WebSocket };\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class WebSocketSubject<T> extends AnonymousSubject<T> {\n\n  url: string;\n  protocol: string|Array<string>;\n  socket: WebSocket;\n  openObserver: NextObserver<Event>;\n  closeObserver: NextObserver<CloseEvent>;\n  closingObserver: NextObserver<void>;\n  WebSocketCtor: { new(url: string, protocol?: string|Array<string>): WebSocket };\n\n  private _output: Subject<T>;\n\n  resultSelector(e: MessageEvent) {\n    return JSON.parse(e.data);\n  }\n\n  /**\n   * Wrapper around the w3c-compatible WebSocket object provided by the browser.\n   *\n   * @example <caption>Wraps browser WebSocket</caption>\n   *\n   * let subject = Observable.webSocket('ws://localhost:8081');\n   * subject.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   * subject.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @example <caption>Wraps WebSocket from nodejs-websocket (using node.js)</caption>\n   *\n   * import { w3cwebsocket } from 'websocket';\n   * \n   * let socket = new WebSocketSubject({\n   *   url: 'ws://localhost:8081',\n   *   WebSocketCtor: w3cwebsocket\n   * });\n   *\n   * let subject = Observable.webSocket('ws://localhost:8081');\n   * subject.subscribe(\n   *    (msg) => console.log('message received: ' + msg),\n   *    (err) => console.log(err),\n   *    () => console.log('complete')\n   *  );\n   * subject.next(JSON.stringify({ op: 'hello' }));\n   *\n   * @param {string | WebSocketSubjectConfig} urlConfigOrSource the source of the websocket as an url or a structure defining the websocket object\n   * @return {WebSocketSubject}\n   * @static true\n   * @name webSocket\n   * @owner Observable\n   */\n  static create<T>(urlConfigOrSource: string | WebSocketSubjectConfig): WebSocketSubject<T> {\n    return new WebSocketSubject<T>(urlConfigOrSource);\n  }\n\n  constructor(urlConfigOrSource: string | WebSocketSubjectConfig | Observable<T>, destination?: Observer<T>) {\n    if (urlConfigOrSource instanceof Observable) {\n      super(destination, <Observable<T>> urlConfigOrSource);\n    } else {\n      super();\n      this.WebSocketCtor = root.WebSocket;\n      this._output = new Subject<T>();\n      if (typeof urlConfigOrSource === 'string') {\n        this.url = urlConfigOrSource;\n      } else {\n        // WARNING: config object could override important members here.\n        assign(this, urlConfigOrSource);\n      }\n      if (!this.WebSocketCtor) {\n        throw new Error('no WebSocket constructor can be found');\n      }\n      this.destination = new ReplaySubject();\n    }\n  }\n\n  lift<R>(operator: Operator<T, R>): WebSocketSubject<R> {\n    const sock = new WebSocketSubject<R>(this, <any> this.destination);\n    sock.operator = operator;\n    return sock;\n  }\n\n  private _resetState() {\n    this.socket = null;\n    if (!this.source) {\n      this.destination = new ReplaySubject();\n    }\n    this._output = new Subject<T>();\n  }\n\n  // TODO: factor this out to be a proper Operator/Subscriber implementation and eliminate closures\n  multiplex(subMsg: () => any, unsubMsg: () => any, messageFilter: (value: T) => boolean) {\n    const self = this;\n    return new Observable((observer: Observer<any>) => {\n      const result = tryCatch(subMsg)();\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        self.next(result);\n      }\n\n      let subscription = self.subscribe(x => {\n        const result = tryCatch(messageFilter)(x);\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else if (result) {\n          observer.next(x);\n        }\n      },\n        err => observer.error(err),\n        () => observer.complete());\n\n      return () => {\n        const result = tryCatch(unsubMsg)();\n        if (result === errorObject) {\n          observer.error(errorObject.e);\n        } else {\n          self.next(result);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  private _connectSocket() {\n    const { WebSocketCtor } = this;\n    const observer = this._output;\n\n    let socket: WebSocket = null;\n    try {\n      socket = this.protocol ?\n        new WebSocketCtor(this.url, this.protocol) :\n        new WebSocketCtor(this.url);\n      this.socket = socket;\n    } catch (e) {\n      observer.error(e);\n      return;\n    }\n\n    const subscription = new Subscription(() => {\n      this.socket = null;\n      if (socket && socket.readyState === 1) {\n        socket.close();\n      }\n    });\n\n    socket.onopen = (e: Event) => {\n      const openObserver = this.openObserver;\n      if (openObserver) {\n        openObserver.next(e);\n      }\n\n      const queue = this.destination;\n\n      this.destination = Subscriber.create(\n        (x) => socket.readyState === 1 && socket.send(x),\n        (e) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          if (e && e.code) {\n            socket.close(e.code, e.reason);\n          } else {\n            observer.error(new TypeError('WebSocketSubject.error must be called with an object with an error code, ' +\n              'and an optional reason: { code: number, reason: string }'));\n          }\n          this._resetState();\n        },\n        ( ) => {\n          const closingObserver = this.closingObserver;\n          if (closingObserver) {\n            closingObserver.next(undefined);\n          }\n          socket.close();\n          this._resetState();\n        }\n      );\n\n      if (queue && queue instanceof ReplaySubject) {\n        subscription.add((<ReplaySubject<T>>queue).subscribe(this.destination));\n      }\n    };\n\n    socket.onerror = (e: Event) => {\n      this._resetState();\n      observer.error(e);\n    };\n\n    socket.onclose = (e: CloseEvent) => {\n      this._resetState();\n      const closeObserver = this.closeObserver;\n      if (closeObserver) {\n        closeObserver.next(e);\n      }\n      if (e.wasClean) {\n        observer.complete();\n      } else {\n        observer.error(e);\n      }\n    };\n\n    socket.onmessage = (e: MessageEvent) => {\n      const result = tryCatch(this.resultSelector)(e);\n      if (result === errorObject) {\n        observer.error(errorObject.e);\n      } else {\n        observer.next(result);\n      }\n    };\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return source.subscribe(subscriber);\n    }\n    if (!this.socket) {\n      this._connectSocket();\n    }\n    let subscription = new Subscription();\n    subscription.add(this._output.subscribe(subscriber));\n    subscription.add(() => {\n      const { socket } = this;\n      if (this._output.observers.length === 0) {\n        if (socket && socket.readyState === 1) {\n          socket.close();\n        }\n        this._resetState();\n      }\n    });\n    return subscription;\n  }\n\n  unsubscribe() {\n    const { source, socket } = this;\n    if (socket && socket.readyState === 1) {\n      socket.close();\n      this._resetState();\n    }\n    super.unsubscribe();\n    if (!source) {\n      this.destination = new ReplaySubject();\n    }\n  }\n}\n","import {  WebSocketSubject  } from './WebSocketSubject';\n\nexport const webSocket = WebSocketSubject.create;","import { Observable } from '../../../Observable';\nimport { webSocket as staticWebSocket } from '../../../observable/dom/webSocket';\n\nObservable.webSocket = staticWebSocket;\n\ndeclare module '../../../Observable' {\n  namespace Observable {\n    export let webSocket: typeof staticWebSocket;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer<T>(this: Observable<T>, closingNotifier: Observable<any>): Observable<T[]> {\n  return this.lift(new BufferOperator<T>(closingNotifier));\n}\n\nclass BufferOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingNotifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[] = [];\n\n  constructor(destination: Subscriber<T[]>, closingNotifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, closingNotifier));\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    const buffer = this.buffer;\n    this.buffer = [];\n    this.destination.next(buffer);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { buffer } from '../../operator/buffer';\n\nObservable.prototype.buffer = buffer;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    buffer: typeof buffer;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount<T>(this: Observable<T>, bufferSize: number, startBufferEvery: number = null): Observable<T[]> {\n  return this.lift(new BufferCountOperator<T>(bufferSize, startBufferEvery));\n}\n\nclass BufferCountOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferSize: number, private startBufferEvery: number) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferCountSubscriber(subscriber, this.bufferSize, this.startBufferEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferCountSubscriber<T> extends Subscriber<T> {\n  private buffers: Array<T[]> = [];\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T[]>, private bufferSize: number, private startBufferEvery: number) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    const count = this.count++;\n    const { destination, bufferSize, startBufferEvery, buffers } = this;\n    const startOn = (startBufferEvery == null) ? bufferSize : startBufferEvery;\n\n    if (count % startOn === 0) {\n      buffers.push([]);\n    }\n\n    for (let i = buffers.length; i--; ) {\n      const buffer = buffers[i];\n      buffer.push(value);\n      if (buffer.length === bufferSize) {\n        buffers.splice(i, 1);\n        destination.next(buffer);\n      }\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    const buffers = this.buffers;\n    while (buffers.length > 0) {\n      let buffer = buffers.shift();\n      if (buffer.length > 0) {\n        destination.next(buffer);\n      }\n    }\n    super._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferCount } from '../../operator/bufferCount';\n\nObservable.prototype.bufferCount = bufferCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferCount: typeof bufferCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, scheduler?: IScheduler): Observable<T[]>;\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number, bufferCreationInterval: number, maxBufferSize: number, scheduler?: IScheduler): Observable<T[]>;\n/* tslint:disable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime<T>(this: Observable<T>, bufferTimeSpan: number): Observable<T[]> {\n  let length: number = arguments.length;\n\n  let scheduler: IScheduler = async;\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval: number = null;\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize: number = Number.POSITIVE_INFINITY;\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return this.lift(new BufferTimeOperator<T>(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n}\n\nclass BufferTimeOperator<T> implements Operator<T, T[]> {\n  constructor(private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferTimeSubscriber(\n      subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler\n    ));\n  }\n}\n\nclass Context<T> {\n  buffer: T[] = [];\n  closeAction: Subscription;\n}\n\ntype CreationState<T> = {\n  bufferTimeSpan: number;\n  bufferCreationInterval: number,\n  subscriber: BufferTimeSubscriber<T>;\n  scheduler: IScheduler;\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferTimeSubscriber<T> extends Subscriber<T> {\n  private contexts: Array<Context<T>> = [];\n  private timespanOnly: boolean;\n\n  constructor(destination: Subscriber<T[]>,\n              private bufferTimeSpan: number,\n              private bufferCreationInterval: number,\n              private maxBufferSize: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = { subscriber: this, context };\n      const creationState: CreationState<T> = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  protected _next(value: T) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext: Context<T>;\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  protected _error(err: any) {\n    this.contexts.length = 0;\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts, destination } = this;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.contexts = null;\n  }\n\n  protected onBufferFull(context: Context<T>) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext(): Context<T> {\n    const context: Context<T> = new Context<T>();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context: Context<T>) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n}\n\nfunction dispatchBufferTimeSpanOnly(this: Action<any>, state: any) {\n  const subscriber: BufferTimeSubscriber<any> = state.subscriber;\n\n  const prevContext = state.context;\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: BufferTimeSubscriber<T>;\n  context: Context<T>;\n}\n\nfunction dispatchBufferCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>) {\n  const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n  const context = subscriber.openContext();\n  const action = <Action<CreationState<T>>>this;\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule<DispatchArg<T>>(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose<T>(arg: DispatchArg<T>) {\n  const { subscriber, context } = arg;\n  subscriber.closeContext(context);\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferTime } from '../../operator/bufferTime';\n\nObservable.prototype.bufferTime = bufferTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferTime: typeof bufferTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle<T, O>(this: Observable<T>, openings: SubscribableOrPromise<O>,\n                                   closingSelector: (value: O) => SubscribableOrPromise<any>): Observable<T[]> {\n  return this.lift(new BufferToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass BufferToggleOperator<T, O> implements Operator<T, T[]> {\n\n  constructor(private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n}\n\ninterface BufferContext<T> {\n  buffer: T[];\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferToggleSubscriber<T, O> extends OuterSubscriber<T, O> {\n  private contexts: Array<BufferContext<T>> = [];\n\n  constructor(destination: Subscriber<T[]>,\n              private openings: SubscribableOrPromise<O>,\n              private closingSelector: (value: O) => SubscribableOrPromise<any> | void) {\n    super(destination);\n    this.add(subscribeToResult(this, openings));\n  }\n\n  protected _next(value: T): void {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._error(err);\n  }\n\n  protected _complete(): void {\n    const contexts = this.contexts;\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n    this.contexts = null;\n    super._complete();\n  }\n\n  notifyNext(outerValue: any, innerValue: O,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, O>): void {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, O>): void {\n    this.closeBuffer((<any> innerSub).context);\n  }\n\n  private openBuffer(value: O): void {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  private closeBuffer(context: BufferContext<T>): void {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const { buffer, subscription } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  private trySubscribe(closingNotifier: any): void {\n    const contexts = this.contexts;\n\n    const buffer: Array<T> = [];\n    const subscription = new Subscription();\n    const context = { buffer, subscription };\n    contexts.push(context);\n\n    const innerSubscription = subscribeToResult(this, closingNotifier, <any>context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      (<any> innerSubscription).context = context;\n\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferToggle } from '../../operator/bufferToggle';\n\nObservable.prototype.bufferToggle = bufferToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferToggle: typeof bufferToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<T[]> {\n  return this.lift(new BufferWhenOperator<T>(closingSelector));\n}\n\nclass BufferWhenOperator<T> implements Operator<T, T[]> {\n\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass BufferWhenSubscriber<T> extends OuterSubscriber<T, any> {\n  private buffer: T[];\n  private subscribing: boolean = false;\n  private closingSubscription: Subscription;\n\n  constructor(destination: Subscriber<T[]>, private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openBuffer();\n  }\n\n  protected _next(value: T) {\n    this.buffer.push(value);\n  }\n\n  protected _complete() {\n    const buffer = this.buffer;\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    this.buffer = null;\n    this.subscribing = false;\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openBuffer();\n  }\n\n  notifyComplete(): void {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n\n    let { closingSubscription } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { bufferWhen } from '../../operator/bufferWhen';\n\nObservable.prototype.bufferWhen = bufferWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    bufferWhen: typeof bufferWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <img src=\"./img/catch.png\" width=\"100%\">\n * \n * @example <caption>Continues with a different Observable when there's an error</caption>\n * \n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => { \n * \t   if (n == 4) {\n * \t     throw 'four!';\n *     }\n *\t   return n; \n *   })\n *   .catch(err => Observable.of('I', 'II', 'III', 'IV', 'V'))\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n *\n * @example <caption>Retries the caught source Observable again in case of error, similar to retry() operator</caption>\n *\n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => { \n * \t   if (n === 4) {\n * \t     throw 'four!'; \n *     }\n * \t   return n; \n *   })\n *   .catch((err, caught) => caught)\n *   .take(30)\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * \n * @example <caption>Throws a new error when the source Observable throws an error</caption>\n * \n * Observable.of(1, 2, 3, 4, 5)\n *   .map(n => { \n *     if (n == 4) {\n *       throw 'four!';\n *     }\n *     return n; \n *   })\n *   .catch(err => {\n *     throw 'error in source. Details: ' + err;\n *   })\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * \n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n *  is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n *  is returned by the `selector` will be used to continue the observable chain.\n * @return {Observable} an observable that originates from either the source or the observable returned by the\n *  catch `selector` function.\n * @method catch\n * @name catch\n * @owner Observable\n */\nexport function _catch<T, R>(this: Observable<T>, selector: (err: any, caught: Observable<T>) => ObservableInput<R>): Observable<R> {\n  const operator = new CatchOperator(selector);\n  const caught = this.lift(operator);\n  return (operator.caught = caught);\n}\n\nclass CatchOperator<T, R> implements Operator<T, R> {\n  caught: Observable<T>;\n\n  constructor(private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CatchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(destination: Subscriber<any>,\n              private selector: (err: any, caught: Observable<T>) => ObservableInput<T | R>,\n              private caught: Observable<T>) {\n    super(destination);\n  }\n\n  // NOTE: overriding `error` instead of `_error` because we don't want\n  // to have this flag this subscriber as `isStopped`. We can mimic the\n  // behavior of the RetrySubscriber (from the `retry` operator), where\n  // we unsubscribe from our source chain, reset our Subscriber flags,\n  // then subscribe to the selector result.\n  error(err: any) {\n    if (!this.isStopped) {\n      let result: any;\n      try {\n        result = this.selector(err, this.caught);\n      } catch (err2) {\n        super.error(err2);\n        return;\n      }\n      this.unsubscribe();\n      this.closed = false;\n      this.isStopped = false;\n      this.add(subscribeToResult(this, result));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _catch } from '../../operator/catch';\n\nObservable.prototype.catch = _catch;\nObservable.prototype._catch = _catch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    catch: typeof _catch;\n    _catch: typeof _catch;\n  }\n}","import { CombineLatestOperator } from './combineLatest';\nimport { Observable } from '../Observable';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by waiting\n * for the outer Observable to complete, then applying {@link combineLatest}.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by applying\n * {@link combineLatest} when the Observable-of-Observables completes.</span>\n *\n * <img src=\"./img/combineAll.png\" width=\"100%\">\n *\n * Takes an Observable of Observables, and collects all Observables from it.\n * Once the outer Observable completes, it subscribes to all collected\n * Observables and combines their values using the {@link combineLatest}\n * strategy, such that:\n * - Every time an inner Observable emits, the output Observable emits.\n * - When the returned observable emits, it emits all of the latest values by:\n *   - If a `project` function is provided, it is called with each recent value\n *     from each inner Observable in whatever order they arrived, and the result\n *     of the `project` function is what is emitted by the output Observable.\n *   - If there is no `project` function, an array of all of the most recent\n *     values is emitted by the output Observable.\n *\n * @example <caption>Map two click events to a finite interval Observable, then apply combineAll</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev =>\n *   Rx.Observable.interval(Math.random()*2000).take(3)\n * ).take(2);\n * var result = higherOrder.combineAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n * @see {@link mergeAll}\n *\n * @param {function} [project] An optional function to map the most recent\n * values from each inner Observable into a new result. Takes each of the most\n * recent values from each collected inner Observable as arguments, in order.\n * @return {Observable} An Observable of projected results or arrays of recent\n * values.\n * @method combineAll\n * @owner Observable\n */\nexport function combineAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new CombineLatestOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineAll } from '../../operator/combineAll';\n\nObservable.prototype.combineAll = combineAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineAll: typeof combineAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nconst none = {};\n\n/* tslint:disable:max-line-length */\nexport function combineLatest<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function combineLatest<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function combineLatest<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function combineLatest<T, R>(this: Observable<T>, array: ObservableInput<T>[]): Observable<Array<T>>;\nexport function combineLatest<T, TOther, R>(this: Observable<T>, array: ObservableInput<TOther>[], project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  let project: (...values: Array<any>) => R = null;\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = (<any>observables[0]).slice();\n  }\n\n  observables.unshift(this);\n\n  return this.lift.call(new ArrayObservable(observables), new CombineLatestOperator(project));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private project?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private project?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(none);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryProject(values: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { combineLatest } from '../../operator/combineLatest';\n\nObservable.prototype.combineLatest = combineLatest;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    combineLatest: typeof combineLatest;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { concat } from '../../operator/concat';\n\nObservable.prototype.concat = concat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concat: typeof concat;\n  }\n}","import { Observable } from '../Observable';\nimport { Subscribable } from '../Observable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concatAll<T>(this: Observable<T>): T;\nexport function concatAll<T, R>(this: Observable<T>): Subscribable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatAll } from '../../operator/concatAll';\n\nObservable.prototype.concatAll = concatAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatAll: typeof concatAll;\n  }\n}","import { MergeMapOperator } from './mergeMap';\nimport { Observable, ObservableInput } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<R>): Observable<R>;\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * <img src=\"./img/concatMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMap(ev => Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} an observable of values merged from the projected\n * Observables as they were subscribed to, one at a time. Optionally, these\n * values may have been projected from a passed `projectResult` argument.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking values from each projected inner\n * Observable sequentially.\n * @method concatMap\n * @owner Observable\n */\nexport function concatMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) =>  ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  return this.lift(new MergeMapOperator(project, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMap } from '../../operator/concatMap';\n\nObservable.prototype.concatMap = concatMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMap: typeof concatMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { MergeMapToOperator } from './mergeMapTo';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function concatMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/concatMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.concatMapTo(Rx.Observable.interval(1000).take(4));\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * \n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An observable of values merged together by joining the\n * passed observable with itself, one after the other, for each value emitted\n * from the source.\n * @method concatMapTo\n * @owner Observable\n */\nexport function concatMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new MergeMapToOperator(innerObservable, resultSelector, 1));\n}\n","\nimport { Observable } from '../../Observable';\nimport { concatMapTo } from '../../operator/concatMapTo';\n\nObservable.prototype.concatMapTo = concatMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    concatMapTo: typeof concatMapTo;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<number> {\n  return this.lift(new CountOperator(predicate, this));\n}\n\nclass CountOperator<T> implements Operator<T, number> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<number>, source: any): any {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass CountSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n  private index: number = 0;\n\n  constructor(destination: Observer<number>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  private _tryPredicate(value: T) {\n    let result: any;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  protected _complete(): void {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { count } from '../../operator/count';\n\nObservable.prototype.count = count;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    count: typeof count;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize<T>(this: Observable<T>): Observable<any> {\n  return this.lift(new DeMaterializeOperator());\n}\n\nclass DeMaterializeOperator<T extends Notification<any>, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<any>, source: any): any {\n    return source.subscribe(new DeMaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DeMaterializeSubscriber<T extends Notification<any>> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    value.observe(this.destination);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { dematerialize } from '../../operator/dematerialize';\n\nObservable.prototype.dematerialize = dematerialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    dematerialize: typeof dematerialize;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n  private durationSubscription: Subscription = null;\n\n  constructor(destination: Subscriber<R>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  private _tryNext(value: T, duration: SubscribableOrPromise<number>): void {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = subscribeToResult(this, duration);\n    if (!subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue(): void {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n      if (subscription) {\n        this.durationSubscription = null;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n      this.value = null;\n      this.hasValue = false;\n      super._next(value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounce } from '../../operator/debounce';\n\nObservable.prototype.debounce = debounce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounce: typeof debounce;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\n\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime<T>(this: Observable<T>, dueTime: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new DebounceTimeOperator(dueTime, scheduler));\n}\n\nclass DebounceTimeOperator<T> implements Operator<T, T> {\n  constructor(private dueTime: number, private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DebounceTimeSubscriber<T> extends Subscriber<T> {\n  private debouncedSubscription: Subscription = null;\n  private lastValue: T = null;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private dueTime: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.clearDebounce();\n    this.lastValue = value;\n    this.hasValue = true;\n    this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n  }\n\n  protected _complete() {\n    this.debouncedNext();\n    this.destination.complete();\n  }\n\n  debouncedNext(): void {\n    this.clearDebounce();\n\n    if (this.hasValue) {\n      this.destination.next(this.lastValue);\n      this.lastValue = null;\n      this.hasValue = false;\n    }\n  }\n\n  private clearDebounce(): void {\n    const debouncedSubscription = this.debouncedSubscription;\n\n    if (debouncedSubscription !== null) {\n      this.remove(debouncedSubscription);\n      debouncedSubscription.unsubscribe();\n      this.debouncedSubscription = null;\n    }\n  }\n}\n\nfunction dispatchNext(subscriber: DebounceTimeSubscriber<any>) {\n  subscriber.debouncedNext();\n}\n","\nimport { Observable } from '../../Observable';\nimport { debounceTime } from '../../operator/debounceTime';\n\nObservable.prototype.debounceTime = debounceTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    debounceTime: typeof debounceTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function defaultIfEmpty<T>(this: Observable<T>, defaultValue?: T): Observable<T>;\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue?: R): Observable<T | R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty<T, R>(this: Observable<T>, defaultValue: R = null): Observable<T | R> {\n  return this.lift(new DefaultIfEmptyOperator(defaultValue));\n}\n\nclass DefaultIfEmptyOperator<T, R> implements Operator<T, T | R> {\n\n  constructor(private defaultValue: R) {\n  }\n\n  call(subscriber: Subscriber<T | R>, source: any): any {\n    return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DefaultIfEmptySubscriber<T, R> extends Subscriber<T> {\n  private isEmpty: boolean = true;\n\n  constructor(destination: Subscriber<T | R>, private defaultValue: R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.isEmpty = false;\n    this.destination.next(value);\n  }\n\n  protected _complete(): void {\n    if (this.isEmpty) {\n      this.destination.next(this.defaultValue);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { defaultIfEmpty } from '../../operator/defaultIfEmpty';\n\nObservable.prototype.defaultIfEmpty = defaultIfEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    defaultIfEmpty: typeof defaultIfEmpty;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay<T>(this: Observable<T>, delay: number|Date,\n                         scheduler: IScheduler = async): Observable<T> {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(<number>delay);\n  return this.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator<T> implements Operator<T, T> {\n  constructor(private delay: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelaySubscriber<T> extends Subscriber<T> {\n  private queue: Array<any> = [];\n  private active: boolean = false;\n  private errored: boolean = false;\n\n  private static dispatch(state: any): void {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      (<any> this).schedule(state, delay);\n    } else {\n      source.active = false;\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private delay: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  private _schedule(scheduler: IScheduler): void {\n    this.active = true;\n    this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this, destination: this.destination, scheduler: scheduler\n    }));\n  }\n\n  private scheduleNotification(notification: Notification<any>): void {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  protected _next(value: T) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    this.scheduleNotification(Notification.createComplete());\n  }\n}\n\nclass DelayMessage<T> {\n  constructor(private time: number,\n              private notification: any) {\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delay } from '../../operator/delay';\n\nObservable.prototype.delay = delay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delay: typeof delay;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen<T>(this: Observable<T>, delayDurationSelector: (value: T) => Observable<any>,\n                             subscriptionDelay?: Observable<any>): Observable<T> {\n  if (subscriptionDelay) {\n    return new SubscriptionDelayObservable(this, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n  }\n  return this.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator<T> implements Operator<T, T> {\n  constructor(private delayDurationSelector: (value: T) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DelayWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private completed: boolean = false;\n  private delayNotifierSubscriptions: Array<Subscription> = [];\n  private values: Array<T> = [];\n\n  constructor(destination: Subscriber<T>,\n              private delayDurationSelector: (value: T) => Observable<any>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    const value = this.removeSubscription(innerSub);\n    if (value) {\n      this.destination.next(value);\n    }\n    this.tryComplete();\n  }\n\n  protected _next(value: T): void {\n    try {\n      const delayNotifier = this.delayDurationSelector(value);\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n        this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.completed = true;\n    this.tryComplete();\n  }\n\n  private removeSubscription(subscription: InnerSubscriber<T, R>): T {\n    subscription.unsubscribe();\n\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    let value: T = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  }\n\n  private tryDelay(delayNotifier: Observable<any>, value: T): void {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n    this.add(notifierSubscription);\n\n    this.delayNotifierSubscriptions.push(notifierSubscription);\n    this.values.push(value);\n  }\n\n  private tryComplete(): void {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelayObservable<T> extends Observable<T> {\n  constructor(protected source: Observable<T>, private subscriptionDelay: Observable<any>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SubscriptionDelaySubscriber<T> extends Subscriber<T> {\n  private sourceSubscribed: boolean = false;\n\n  constructor(private parent: Subscriber<T>, private source: Observable<T>) {\n    super();\n  }\n\n  protected _next(unused: any) {\n    this.subscribeToSource();\n  }\n\n  protected _error(err: any) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  protected _complete() {\n    this.subscribeToSource();\n  }\n\n  private subscribeToSource(): void {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { delayWhen } from '../../operator/delayWhen';\n\nObservable.prototype.delayWhen = delayWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    delayWhen: typeof delayWhen;\n  }\n}","import { root } from './root';\n\nexport interface ISetCtor {\n  new<T>(): ISet<T>;\n}\n\nexport interface ISet<T> {\n  add(value: T): void;\n  has(value: T): boolean;\n  size: number;\n  clear(): void;\n}\n\nexport function minimalSetImpl<T>(): ISetCtor {\n  // THIS IS NOT a full impl of Set, this is just the minimum\n  // bits of functionality we need for this library.\n  return class MinimalSet<T> implements ISet<T> {\n    private _values: T[] = [];\n\n    add(value: T): void {\n      if (!this.has(value)) {\n        this._values.push(value);\n      }\n    }\n\n    has(value: T): boolean {\n      return this._values.indexOf(value) !== -1;\n    }\n\n    get size(): number {\n      return this._values.length;\n    }\n\n    clear(): void {\n      this._values.length = 0;\n    }\n  };\n}\n\nexport const Set: ISetCtor = root.Set || minimalSetImpl();","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { ISet, Set } from '../util/Set';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n * \n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * \n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * \n * @param {function} [keySelector] optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct<T, K>(this: Observable<T>,\n                               keySelector?: (value: T) => K,\n                               flushes?: Observable<any>): Observable<T> {\n  return this.lift(new DistinctOperator(keySelector, flushes));\n}\n\nclass DistinctOperator<T, K> implements Operator<T, T> {\n  constructor(private keySelector: (value: T) => K, private flushes: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class DistinctSubscriber<T, K> extends OuterSubscriber<T, T> {\n  private values: ISet<K> = new Set<K>();\n\n  constructor(destination: Subscriber<T>, private keySelector: (value: T) => K, flushes: Observable<any>) {\n    super(destination);\n\n    if (flushes) {\n      this.add(subscribeToResult(this, flushes));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values.clear();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, T>): void {\n    this._error(error);\n  }\n\n  protected _next(value: T): void {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  }\n\n  private _useKeySelector(value: T): void {\n    let key: K;\n    const { destination } = this;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this._finalizeNext(key, value);\n  }\n\n  private _finalizeNext(key: K|T, value: T) {\n    const { values } = this;\n    if (!values.has(<K>key)) {\n      values.add(<K>key);\n      this.destination.next(value);\n    }\n  }\n\n}\n","import { Observable } from '../../Observable';\nimport { distinct } from '../../operator/distinct';\n\nObservable.prototype.distinct = distinct;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinct: typeof distinct;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { distinctUntilChanged } from '../../operator/distinctUntilChanged';\n\nObservable.prototype.distinctUntilChanged = distinctUntilChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilChanged: typeof distinctUntilChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilChanged<T>(this: Observable<T>, compare?: (x: T, y: T) => boolean): Observable<T>;\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare: (x: K, y: K) => boolean, keySelector: (x: T) => K): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n * \n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n * \n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged<T, K>(this: Observable<T>, compare?: (x: K, y: K) => boolean, keySelector?: (x: T) => K): Observable<T> {\n  return this.lift(new DistinctUntilChangedOperator<T, K>(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator<T, K> implements Operator<T, T> {\n  constructor(private compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DistinctUntilChangedSubscriber<T, K> extends Subscriber<T> {\n  private key: K;\n  private hasKey: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              compare: (x: K, y: K) => boolean,\n              private keySelector: (x: T) => K) {\n    super(destination);\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  private compare(x: any, y: any): boolean {\n    return x === y;\n  }\n\n  protected _next(value: T): void {\n\n    const keySelector = this.keySelector;\n    let key: any = value;\n\n    if (keySelector) {\n      key = tryCatch(this.keySelector)(value);\n      if (key === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    }\n\n    let result: any = false;\n\n    if (this.hasKey) {\n      result = tryCatch(this.compare)(this.key, key);\n      if (result === errorObject) {\n        return this.destination.error(errorObject.e);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (Boolean(result) === false) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string): Observable<T>;\nexport function distinctUntilKeyChanged<T, K>(this: Observable<T>, key: string, compare: (x: K, y: K) => boolean): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n * \n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n * \n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>An example comparing the name of persons</caption>\n * \n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilKeyChanged('name')\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @example <caption>An example comparing the first letters of the name</caption>\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'})\n *     .distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3))\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key string key for object property lookup on each item.\n * @param {function} [compare] optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} an Observable that emits items from the source Observable with distinct values based on the key specified.\n * @method distinctUntilKeyChanged\n * @owner Observable\n */\nexport function distinctUntilKeyChanged<T>(this: Observable<T>, key: string, compare?: (x: T, y: T) => boolean): Observable<T> {\n  return distinctUntilChanged.call(this, function(x: T, y: T) {\n    if (compare) {\n      return compare(x[key], y[key]);\n    }\n    return x[key] === y[key];\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { distinctUntilKeyChanged } from '../../operator/distinctUntilKeyChanged';\n\nObservable.prototype.distinctUntilKeyChanged = distinctUntilKeyChanged;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    distinctUntilKeyChanged: typeof distinctUntilKeyChanged;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { PartialObserver } from '../Observer';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function _do<T>(this: Observable<T>, next: (x: T) => void, error?: (e: any) => void, complete?: () => void): Observable<T>;\nexport function _do<T>(this: Observable<T>, observer: PartialObserver<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @method do\n * @name do\n * @owner Observable\n */\nexport function _do<T>(this: Observable<T>, nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n                       error?: (e: any) => void,\n                       complete?: () => void): Observable<T> {\n  return this.lift(new DoOperator(nextOrObserver, error, complete));\n}\n\nclass DoOperator<T> implements Operator<T, T> {\n  constructor(private nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              private error?: (e: any) => void,\n              private complete?: () => void) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass DoSubscriber<T> extends Subscriber<T> {\n\n  private safeSubscriber: Subscriber<T>;\n\n  constructor(destination: Subscriber<T>,\n              nextOrObserver?: PartialObserver<T> | ((x: T) => void),\n              error?: (e: any) => void,\n              complete?: () => void) {\n    super(destination);\n\n    const safeSubscriber = new Subscriber<T>(nextOrObserver, error, complete);\n    safeSubscriber.syncErrorThrowable = true;\n    this.add(safeSubscriber);\n    this.safeSubscriber = safeSubscriber;\n  }\n\n  protected _next(value: T): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.next(value);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.next(value);\n    }\n  }\n\n  protected _error(err: any): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.error(err);\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const { safeSubscriber } = this;\n    safeSubscriber.complete();\n    if (safeSubscriber.syncErrorThrown) {\n      this.destination.error(safeSubscriber.syncErrorValue);\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _do } from '../../operator/do';\n\nObservable.prototype.do = _do;\nObservable.prototype._do = _do;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    do: typeof _do;\n    _do: typeof _do;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} Returns an Observable that takes a source of Observables\n * and propagates the first observable exclusively until it completes before\n * subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new SwitchFirstOperator<T>());\n}\n\nclass SwitchFirstOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SwitchFirstSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasCompleted: boolean = false;\n  private hasSubscription: boolean = false;\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, value));\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaust } from '../../operator/exhaust';\n\nObservable.prototype.exhaust = exhaust;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaust: typeof exhaust;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                    resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R> {\n  return this.lift(new SwitchFirstMapOperator(project, resultSelector));\n}\n\nclass SwitchFirstMapOperator<T, I, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchFirstMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchFirstMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasSubscription: boolean = false;\n  private hasCompleted: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSubscription) {\n      this.tryNext(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    const index = this.index++;\n    const destination = this.destination;\n    try {\n      const result = this.project(value, index);\n      this.hasSubscription = true;\n      this.add(subscribeToResult(this, result, value, index));\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (!this.hasSubscription) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    try {\n      const result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n      destination.next(result);\n    } catch (err) {\n      destination.error(err);\n    }\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n\n    this.hasSubscription = false;\n    if (this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { exhaustMap } from '../../operator/exhaustMap';\n\nObservable.prototype.exhaustMap = exhaustMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    exhaustMap: typeof exhaustMap;\n  }\n}","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function expand<T>(this: Observable<T>, project: (value: T, index: number) => Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>, concurrent?: number, scheduler?: IScheduler): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand<T, R>(this: Observable<T>, project: (value: T, index: number) => Observable<R>,\n                             concurrent: number = Number.POSITIVE_INFINITY,\n                             scheduler: IScheduler = undefined): Observable<R> {\n  concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n\n  return this.lift(new ExpandOperator(project, concurrent, scheduler));\n}\n\nexport class ExpandOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n  }\n}\n\ninterface DispatchArg<T, R> {\n  subscriber: ExpandSubscriber<T, R>;\n  result: Observable<R>;\n  value: any;\n  index: number;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ExpandSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private index: number = 0;\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  private buffer: any[];\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => Observable<R>,\n              private concurrent: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    if (concurrent < Number.POSITIVE_INFINITY) {\n      this.buffer = [];\n    }\n  }\n\n  private static dispatch<T, R>(arg: DispatchArg<T, R>): void {\n    const {subscriber, result, value, index} = arg;\n    subscriber.subscribeToProjection(result, value, index);\n  }\n\n  protected _next(value: any): void {\n    const destination = this.destination;\n\n    if (destination.closed) {\n      this._complete();\n      return;\n    }\n\n    const index = this.index++;\n    if (this.active < this.concurrent) {\n      destination.next(value);\n      let result = tryCatch(this.project)(value, index);\n      if (result === errorObject) {\n        destination.error(errorObject.e);\n      } else if (!this.scheduler) {\n        this.subscribeToProjection(result, value, index);\n      } else {\n        const state: DispatchArg<T, R> = { subscriber: this, result, value, index };\n        this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private subscribeToProjection(result: any, value: T, index: number): void {\n    this.active++;\n    this.add(subscribeToResult<T, R>(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer && buffer.length > 0) {\n      this._next(buffer.shift());\n    }\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { expand } from '../../operator/expand';\n\nObservable.prototype.expand = expand;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    expand: typeof expand;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * <img src=\"./img/elementAt.png\" width=\"100%\">\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * @example <caption>Emit only the third click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.elementAt(2);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return {Observable} An Observable that emits a single item, if it is found.\n * Otherwise, will emit the default value if given. If not, then emits an error.\n * @method elementAt\n * @owner Observable\n */\nexport function elementAt<T>(this: Observable<T>, index: number, defaultValue?: T): Observable<T> {\n  return this.lift(new ElementAtOperator(index, defaultValue));\n}\n\nclass ElementAtOperator<T> implements Operator<T, T> {\n\n  constructor(private index: number, private defaultValue?: T) {\n    if (index < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ElementAtSubscriber(subscriber, this.index, this.defaultValue));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ElementAtSubscriber<T> extends Subscriber<T> {\n\n  constructor(destination: Subscriber<T>, private index: number, private defaultValue?: T) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (this.index-- === 0) {\n      this.destination.next(x);\n      this.destination.complete();\n    }\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    if (this.index >= 0) {\n      if (typeof this.defaultValue !== 'undefined') {\n        destination.next(this.defaultValue);\n      } else {\n        destination.error(new ArgumentOutOfRangeError);\n      }\n    }\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { elementAt } from '../../operator/elementAt';\n\nObservable.prototype.elementAt = elementAt;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    elementAt: typeof elementAt;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { filter } from '../../operator/filter';\n\nObservable.prototype.filter = filter;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    filter: typeof filter;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable } from '../Observable';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback function to be called when source terminates.\n * @return {Observable} an Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function _finally<T>(this: Observable<T>, callback: () => void): Observable<T> {\n  return this.lift(new FinallyOperator(callback));\n}\n\nclass FinallyOperator<T> implements Operator<T, T> {\n  constructor(private callback: () => void) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FinallySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<T>, callback: () => void) {\n    super(destination);\n    this.add(new Subscription(callback));\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _finally } from '../../operator/finally';\n\nObservable.prototype.finally = _finally;\nObservable.prototype._finally = _finally;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    finally: typeof _finally;\n    _finally: typeof _finally;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { find } from '../../operator/find';\n\nObservable.prototype.find = find;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    find: typeof find;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function find<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number) => value is S,\n                                     thisArg?: any): Observable<S>;\nexport function find<T>(this: Observable<T>,\n                        predicate: (value: T, index: number) => boolean,\n                        thisArg?: any): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        thisArg?: any): Observable<T> {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, false, thisArg));\n}\n\nexport class FindValueOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n  }\n\n  call(observer: Subscriber<T>, source: any): any {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class FindValueSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private source: Observable<T>,\n              private yieldIndex: boolean,\n              private thisArg?: any) {\n    super(destination);\n  }\n\n  private notifyComplete(value: any): void {\n    const destination = this.destination;\n\n    destination.next(value);\n    destination.complete();\n  }\n\n  protected _next(value: T): void {\n    const { predicate, thisArg } = this;\n    const index = this.index++;\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n}\n","import { Observable } from '../Observable';\nimport { FindValueOperator } from './find';\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * <img src=\"./img/findIndex.png\" width=\"100%\">\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * @example <caption>Emit the index of first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.findIndex(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of the index of the first item that\n * matches the condition.\n * @method find\n * @owner Observable\n */\nexport function findIndex<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                             thisArg?: any): Observable<number> {\n  return <any>this.lift<any>(new FindValueOperator(predicate, this, true, thisArg));\n}\n","\nimport { Observable } from '../../Observable';\nimport { findIndex } from '../../operator/findIndex';\n\nObservable.prototype.findIndex = findIndex;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    findIndex: typeof findIndex;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function first<T, S extends T, R>(this: Observable<T>,\n                                         predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                         resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function first<T, S extends T>(this: Observable<T>,\n                                      predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                      resultSelector: void,\n                                      defaultValue?: S): Observable<S>;\nexport function first<T>(this: Observable<T>,\n                         predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function first<T, R>(this: Observable<T>,\n                            predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: (value: T, index: number) => R,\n                            defaultValue?: R): Observable<R>;\nexport function first<T>(this: Observable<T>,\n                         predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         resultSelector: void,\n                         defaultValue?: T): Observable<T>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * <img src=\"./img/first.png\" width=\"100%\">\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. It\n * may also take a `resultSelector` function to produce the output value from\n * the input value, and a `defaultValue` to emit in case the source completes\n * before it is able to emit a valid value. Throws an error if `defaultValue`\n * was not provided and a matching element is not found.\n *\n * @example <caption>Emit only the first click that happens on the DOM</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Emits the first click that happens on a DIV</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.first(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {function(value: T, index: number): R} [resultSelector] A function to\n * produce the value on the output Observable based on the values\n * and the indices of the source Observable. The arguments passed to this\n * function are:\n * - `value`: the value that was emitted on the source.\n * - `index`: the \"index\" of the value from the source.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return {Observable<T|R>} an Observable of the first item that matches the\n * condition.\n * @method first\n * @owner Observable\n */\nexport function first<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                            resultSelector?: ((value: T, index: number) => R) | void,\n                            defaultValue?: R): Observable<T | R> {\n  return this.lift(new FirstOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass FirstOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new FirstSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FirstSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private hasCompleted: boolean = false;\n  private _emitted: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      this._emit(value, index);\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this._emit(value, index);\n    }\n  }\n\n  private _emit(value: any, index: number) {\n    if (this.resultSelector) {\n      this._tryResultSelector(value, index);\n      return;\n    }\n    this._emitFinal(value);\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this._emitFinal(result);\n  }\n\n  private _emitFinal(value: any) {\n    const destination = this.destination;\n    if (!this._emitted) {\n      this._emitted = true;\n      destination.next(value);\n      destination.complete();\n      this.hasCompleted = true;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (!this.hasCompleted && typeof this.defaultValue !== 'undefined') {\n      destination.next(this.defaultValue);\n      destination.complete();\n    } else if (!this.hasCompleted) {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { first } from '../../operator/first';\n\nObservable.prototype.first = <any>first;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    first: typeof first;\n  }\n}","export class MapPolyfill {\n  public size = 0;\n  private _values: any[] = [];\n  private _keys: any[] = [];\n\n  get(key: any) {\n    const i = this._keys.indexOf(key);\n    return i === -1 ? undefined : this._values[i];\n  }\n\n  set(key: any, value: any) {\n    const i = this._keys.indexOf(key);\n    if (i === -1) {\n      this._keys.push(key);\n      this._values.push(value);\n      this.size++;\n    } else {\n      this._values[i] = value;\n    }\n    return this;\n  }\n\n  delete(key: any): boolean {\n    const i = this._keys.indexOf(key);\n    if (i === -1) { return false; }\n    this._values.splice(i, 1);\n    this._keys.splice(i, 1);\n    this.size--;\n    return true;\n  }\n\n  clear(): void {\n    this._keys.length = 0;\n    this._values.length = 0;\n    this.size = 0;\n  }\n\n  forEach(cb: Function, thisArg: any): void {\n    for (let i = 0; i < this.size; i++) {\n      cb.call(thisArg, this._values[i], this._keys[i]);\n    }\n  }\n}","import { root } from './root';\nimport { MapPolyfill } from './MapPolyfill';\n\nexport const Map = root.Map || (() => MapPolyfill)();","export class FastMap {\n  private values: Object = {};\n\n  delete(key: string): boolean {\n    this.values[key] = null;\n    return true;\n  }\n\n  set(key: string, value: any): FastMap {\n    this.values[key] = value;\n    return this;\n  }\n\n  get(key: string): any {\n    return this.values[key];\n  }\n\n  forEach(cb: (value: any, key: any) => void, thisArg?: any): void {\n    const values = this.values;\n    for (let key in values) {\n      if (values.hasOwnProperty(key) && values[key] !== null) {\n        cb.call(thisArg, values[key], key);\n      }\n    }\n  }\n\n  clear(): void {\n    this.values = {};\n  }\n}","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { Map } from '../util/Map';\nimport { FastMap } from '../util/FastMap';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K>(this: Observable<T>, keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): Observable<GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): Observable<GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>>;\n/* tslint:disable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @param {function(value: T): K} keySelector a function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] a function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * a function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} an Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(this: Observable<T>, keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): Observable<GroupedObservable<K, R>> {\n  return this.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T|R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = typeof key === 'string' ? new FastMap() : new Map();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = this.subjectSelector ? this.subjectSelector() : new Subject<R>();\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T>) {\n    super();\n  }\n\n  protected _next(value: T): void {\n    this._complete();\n  }\n\n  protected _error(err: any): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.error(err);\n    }\n    this.parent.removeGroup(this.key);\n  }\n\n  protected _complete(): void {\n    const group = this.group;\n    if (!group.closed) {\n      group.complete();\n    }\n    this.parent.removeGroup(this.key);\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const {refCountSubscription, groupSubject} = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { groupBy } from '../../operator/groupBy';\n\nObservable.prototype.groupBy = <any>groupBy;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    groupBy: typeof groupBy;\n  }\n}","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} an empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements<T>(this: Observable<T>): Observable<T> {\n  return this.lift(new IgnoreElementsOperator());\n};\n\nclass IgnoreElementsOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IgnoreElementsSubscriber<T> extends Subscriber<T> {\n  protected _next(unused: T): void {\n    noop();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { ignoreElements } from '../../operator/ignoreElements';\n\nObservable.prototype.ignoreElements = ignoreElements;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    ignoreElements: typeof ignoreElements;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * If the source Observable is empty it returns an Observable that emits true, otherwise it emits false.\n *\n * <img src=\"./img/isEmpty.png\" width=\"100%\">\n *\n * @return {Observable} an Observable that emits a Boolean.\n * @method isEmpty\n * @owner Observable\n */\nexport function isEmpty<T>(this: Observable<T>): Observable<boolean> {\n  return this.lift(new IsEmptyOperator());\n}\n\nclass IsEmptyOperator implements Operator<any, boolean> {\n  call (observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new IsEmptySubscriber(observer));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass IsEmptySubscriber extends Subscriber<any> {\n  constructor(destination: Subscriber<boolean>) {\n    super(destination);\n  }\n\n  private notifyComplete(isEmpty: boolean): void {\n    const destination = this.destination;\n\n    destination.next(isEmpty);\n    destination.complete();\n  }\n\n  protected _next(value: boolean) {\n    this.notifyComplete(false);\n  }\n\n  protected _complete() {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { isEmpty } from '../../operator/isEmpty';\n\nObservable.prototype.isEmpty = isEmpty;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    isEmpty: typeof isEmpty;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<any>): Observable<T> {\n  return this.lift(new AuditOperator(durationSelector));\n}\n\nclass AuditOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditSubscriber<T, T>(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<any>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      const duration = tryCatch(this.durationSelector)(value);\n      if (duration === errorObject) {\n        this.destination.error(errorObject.e);\n      } else {\n        this.add(this.throttled = subscribeToResult(this, duration));\n      }\n    }\n  }\n\n  clearThrottle() {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R, outerIndex: number, innerIndex: number): void {\n    this.clearThrottle();\n  }\n\n  notifyComplete(): void {\n    this.clearThrottle();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { audit } from '../../operator/audit';\n\nObservable.prototype.audit = audit;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    audit: typeof audit;\n  }\n}","import { async } from '../scheduler/async';\nimport { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source values, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * <img src=\"./img/auditTime.png\" width=\"100%\">\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.auditTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method auditTime\n * @owner Observable\n */\nexport function auditTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new AuditTimeOperator(duration, scheduler));\n}\n\nclass AuditTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new AuditTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass AuditTimeSubscriber<T> extends Subscriber<T> {\n\n  private value: T;\n  private hasValue: boolean = false;\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.value = value;\n    this.hasValue = true;\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, this));\n    }\n  }\n\n  clearThrottle(): void {\n    const { value, hasValue, throttled } = this;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n    if (hasValue) {\n      this.value = null;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n}\n\nfunction dispatchNext<T>(subscriber: AuditTimeSubscriber<T>): void {\n  subscriber.clearThrottle();\n}\n","import { Observable } from '../../Observable';\nimport { auditTime } from '../../operator/auditTime';\n\nObservable.prototype.auditTime = auditTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    auditTime: typeof auditTime;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n\n/* tslint:disable:max-line-length */\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S): Observable<S>;\nexport function last<T, S extends T, R>(this: Observable<T>,\n                                        predicate: (value: T | S, index: number, source: Observable<T>) => value is S,\n                                        resultSelector: (value: S, index: number) => R, defaultValue?: R): Observable<R>;\nexport function last<T, S extends T>(this: Observable<T>,\n                                     predicate: (value: T, index: number, source: Observable<T>) => value is S,\n                                     resultSelector: void,\n                                     defaultValue?: S): Observable<S>;\nexport function last<T>(this: Observable<T>,\n                        predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T>;\nexport function last<T, R>(this: Observable<T>,\n                           predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: (value: T, index: number) => R,\n                           defaultValue?: R): Observable<R>;\nexport function last<T>(this: Observable<T>,\n                        predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                        resultSelector: void,\n                        defaultValue?: T): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * <img src=\"./img/last.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} predicate - the condition any source emitted item has to satisfy.\n * @return {Observable} an Observable that emits only the last item satisfying the given condition\n * from the source, or an NoSuchElementException if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n * @method last\n * @owner Observable\n */\nexport function last<T, R>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n                           resultSelector?: ((value: T, index: number) => R) | void,\n                           defaultValue?: R): Observable<T | R> {\n  return this.lift(new LastOperator(predicate, resultSelector, defaultValue, this));\n}\n\nclass LastOperator<T, R> implements Operator<T, R> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new LastSubscriber(observer, this.predicate, this.resultSelector, this.defaultValue, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass LastSubscriber<T, R> extends Subscriber<T> {\n  private lastValue: T | R;\n  private hasValue: boolean = false;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private resultSelector?: ((value: T, index: number) => R) | void,\n              private defaultValue?: any,\n              private source?: Observable<T>) {\n    super(destination);\n    if (typeof defaultValue !== 'undefined') {\n      this.lastValue = defaultValue;\n      this.hasValue = true;\n    }\n  }\n\n  protected _next(value: T): void {\n    const index = this.index++;\n    if (this.predicate) {\n      this._tryPredicate(value, index);\n    } else {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryPredicate(value: T, index: number) {\n    let result: any;\n    try {\n      result = this.predicate(value, index, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      if (this.resultSelector) {\n        this._tryResultSelector(value, index);\n        return;\n      }\n      this.lastValue = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryResultSelector(value: T, index: number) {\n    let result: any;\n    try {\n      result = (<any>this).resultSelector(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.lastValue = result;\n    this.hasValue = true;\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    if (this.hasValue) {\n      destination.next(this.lastValue);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { last } from '../../operator/last';\n\nObservable.prototype.last = <any>last;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    last: typeof last;\n  }\n}","import { Observable } from '../Observable';\n\n/**\n * @param func\n * @return {Observable<R>}\n * @method let\n * @owner Observable\n */\nexport function letProto<T, R>(this: Observable<T>, func: (selector: Observable<T>) => Observable<R>): Observable<R> {\n  return func(this);\n}\n","\nimport { Observable } from '../../Observable';\nimport { letProto } from '../../operator/let';\n\nObservable.prototype.let = letProto;\nObservable.prototype.letBind = letProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    let: typeof letProto;\n    letBind: typeof letProto;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n * \n * @param {function} predicate a function for determining if an item meets a specified condition.\n * @param {any} [thisArg] optional object to use for `this` in the callback\n * @return {Observable} an Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every<T>(this: Observable<T>, predicate: (value: T, index: number, source: Observable<T>) => boolean,\n                         thisArg?: any): Observable<boolean> {\n  return this.lift(new EveryOperator(predicate, thisArg, this));\n}\n\nclass EveryOperator<T> implements Operator<T, boolean> {\n  constructor(private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg?: any,\n              private source?: Observable<T>) {\n  }\n\n  call(observer: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass EverySubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Observer<boolean>,\n              private predicate: (value: T, index: number, source: Observable<T>) => boolean,\n              private thisArg: any,\n              private source?: Observable<T>) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  private notifyComplete(everyValueMatch: boolean): void {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  protected _next(value: T): void {\n    let result = false;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  protected _complete(): void {\n    this.notifyComplete(true);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { every } from '../../operator/every';\n\nObservable.prototype.every = every;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    every: typeof every;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { map } from '../../operator/map';\n\nObservable.prototype.map = map;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    map: typeof map;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo<T, R>(this: Observable<T>, value: R): Observable<R> {\n  return this.lift(new MapToOperator(value));\n}\n\nclass MapToOperator<T, R> implements Operator<T, R> {\n\n  value: R;\n\n  constructor(value: R) {\n    this.value = value;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapToSubscriber(subscriber, this.value));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapToSubscriber<T, R> extends Subscriber<T> {\n\n  value: R;\n\n  constructor(destination: Subscriber<R>, value: R) {\n    super(destination);\n    this.value = value;\n  }\n\n  protected _next(x: T) {\n    this.destination.next(this.value);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mapTo } from '../../operator/mapTo';\n\nObservable.prototype.mapTo = mapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mapTo: typeof mapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x \n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize<T>(this: Observable<T>): Observable<Notification<T>> {\n  return this.lift(new MaterializeOperator());\n}\n\nclass MaterializeOperator<T> implements Operator<T, Notification<T>> {\n  call(subscriber: Subscriber<Notification<T>>, source: any): any {\n    return source.subscribe(new MaterializeSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MaterializeSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Notification<T>>) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    this.destination.next(Notification.createNext(value));\n  }\n\n  protected _error(err: any) {\n    const destination = this.destination;\n    destination.next(Notification.createError(err));\n    destination.complete();\n  }\n\n  protected _complete() {\n    const destination = this.destination;\n    destination.next(Notification.createComplete());\n    destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { materialize } from '../../operator/materialize';\n\nObservable.prototype.materialize = materialize;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    materialize: typeof materialize;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * <img src=\"./img/max.png\" width=\"100%\">\n *\n * @example <caption>Get the maximal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .max()\n *   .subscribe(x => console.log(x)); // -> 8\n * \n * @example <caption>Use a comparer function to get the maximal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * }\n * \n * @see {@link min}\n * \n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two\n * items.\n * @return {Observable} an Observable that emits item with the largest value.\n * @method max\n * @owner Observable\n */\nexport function max<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const max: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) > 0 ? x : y\n    : (x, y) => x > y ? x : y;\n  return this.lift(new ReduceOperator(max));\n}\n","\nimport { Observable } from '../../Observable';\nimport { max } from '../../operator/max';\n\nObservable.prototype.max = max;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    max: typeof max;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function merge<T>(this: Observable<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler | number>): Observable<T>;\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (either the source or an\n * Observable given as argument), and simply forwards (without doing any\n * transformation) all the values from all the input Observables to the output\n * Observable. The output Observable only completes once all input Observables\n * have completed. Any error delivered by an input Observable will be immediately\n * emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = clicks.merge(timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = timer1.merge(timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {Observable} other An input Observable to merge with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @method merge\n * @owner Observable\n */\nexport function merge<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n  return this.lift.call(mergeStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function mergeStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: IScheduler): Observable<T>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function mergeStatic<T>(...observables: (ObservableInput<T> | IScheduler | number)[]): Observable<T>;\nexport function mergeStatic<T, R>(...observables: (ObservableInput<any> | IScheduler | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...Observable} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function mergeStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: IScheduler = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <IScheduler>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(<any>observables, scheduler).lift(new MergeAllOperator<R>(concurrent));\n}\n","\nimport { Observable } from '../../Observable';\nimport { merge } from '../../operator/merge';\n\nObservable.prototype.merge = merge;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    merge: typeof merge;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { mergeAll } from '../../operator/mergeAll';\n\nObservable.prototype.mergeAll = mergeAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeAll: typeof mergeAll;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * \n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                  concurrent: number = Number.POSITIVE_INFINITY): Observable<I | R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapOperator(project, <any>resultSelector, concurrent));\n}\n\nexport class MergeMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<I>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.resultSelector, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<I>, value: T, index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _notifyResultSelector(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMap } from '../../operator/mergeMap';\n\nObservable.prototype.mergeMap = <any>mergeMap;\nObservable.prototype.flatMap = <any>mergeMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMap: typeof mergeMap;\n    mergeMap: typeof mergeMap;\n  }\n}","import { Observable, ObservableInput } from '../Observable';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>, concurrent?: number): Observable<R>;\nexport function mergeMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * <img src=\"./img/mergeMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * @example <caption>For each click event, start an interval Observable ticking every 1 second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.mergeMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable.\n * @method mergeMapTo\n * @owner Observable\n */\nexport function mergeMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                    resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n                                    concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  if (typeof resultSelector === 'number') {\n    concurrent = <number>resultSelector;\n    resultSelector = null;\n  }\n  return this.lift(new MergeMapToOperator(innerObservable, <any>resultSelector, concurrent));\n}\n\n// TODO: Figure out correct signature here: an Operator<Observable<T>, R>\n//       needs to implement call(observer: Subscriber<R>): Subscriber<Observable<T>>\nexport class MergeMapToOperator<T, I, R> implements Operator<Observable<T>, R> {\n  constructor(private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapToSubscriber(observer, this.ish, this.resultSelector, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private ish: ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      const resultSelector = this.resultSelector;\n      const index = this.index++;\n      const ish = this.ish;\n      const destination = this.destination;\n\n      this.active++;\n      this._innerSub(ish, destination, resultSelector, value, index);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: ObservableInput<I>,\n                    destination: PartialObserver<I>,\n                    resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R,\n                    value: T,\n                    index: number): void {\n    this.add(subscribeToResult<T, I>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.trySelectResult(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private trySelectResult(outerValue: T, innerValue: I,\n                          outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeMapTo } from '../../operator/mergeMapTo';\n\nObservable.prototype.flatMapTo = <any>mergeMapTo;\nObservable.prototype.mergeMapTo = <any>mergeMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    flatMapTo: typeof mergeMapTo;\n    mergeMapTo: typeof mergeMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan<T, R>(this: Observable<T>,\n                                accumulator: (acc: R, value: T) => Observable<R>,\n                                seed: R,\n                                concurrent: number = Number.POSITIVE_INFINITY): Observable<R> {\n  return this.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\n\nexport class MergeScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T) => Observable<R>,\n              private seed: R,\n              private concurrent: number) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeScanSubscriber(\n      subscriber, this.accumulator, this.seed, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeScanSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasValue: boolean = false;\n  private hasCompleted: boolean = false;\n  private buffer: Observable<any>[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T) => Observable<R>,\n              private acc: R,\n              private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(value: any): void {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const ish = tryCatch(this.accumulator)(this.acc, value);\n      const destination = this.destination;\n      if (ish === errorObject) {\n        destination.error(errorObject.e);\n      } else {\n        this.active++;\n        this._innerSub(ish, value, index);\n      }\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  private _innerSub(ish: any, value: T, index: number): void {\n    this.add(subscribeToResult<T, R>(this, ish, value, index));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const { destination } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { mergeScan } from '../../operator/mergeScan';\n\nObservable.prototype.mergeScan = mergeScan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    mergeScan: typeof mergeScan;\n  }\n}","import { Observable } from '../Observable';\nimport { ReduceOperator } from './reduce';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * <img src=\"./img/min.png\" width=\"100%\">\n *\n * @example <caption>Get the minimal value of a series of numbers</caption>\n * Rx.Observable.of(5, 4, 7, 2, 8)\n *   .min()\n *   .subscribe(x => console.log(x)); // -> 2\n * \n * @example <caption>Use a comparer function to get the minimal item</caption>\n * interface Person {\n *   age: number,\n *   name: string\n * }\n * Observable.of<Person>({age: 7, name: 'Foo'},\n *                       {age: 5, name: 'Bar'},\n *                       {age: 9, name: 'Beer'})\n *           .min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1)\n *           .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * }\n * \n * @see {@link max}\n * \n * @param {Function} optional comparer function that it will use instead of its default to compare the value of two items.\n * @return {Observable<R>} an Observable that emits item with the smallest value.\n * @method min\n * @owner Observable\n */\nexport function min<T>(this: Observable<T>, comparer?: (x: T, y: T) => number): Observable<T> {\n  const min: (x: T, y: T) => T = (typeof comparer === 'function')\n    ? (x, y) => comparer(x, y) < 0 ? x : y\n    : (x, y) => x < y ? x : y;\n  return this.lift(new ReduceOperator(min));\n}\n","\nimport { Observable } from '../../Observable';\nimport { min } from '../../operator/min';\n\nObservable.prototype.min = min;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    min: typeof min;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { multicast } from '../../operator/multicast';\n\nObservable.prototype.multicast = <any>multicast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    multicast: typeof multicast;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { observeOn } from '../../operator/observeOn';\n\nObservable.prototype.observeOn = observeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    observeOn: typeof observeOn;\n  }\n}","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class PromiseObservable<T> extends Observable<T> {\n\n  public value: T;\n\n  /**\n   * Converts a Promise to an Observable.\n   *\n   * <span class=\"informal\">Returns an Observable that just emits the Promise's\n   * resolved value, then completes.</span>\n   *\n   * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n   * Observable. If the Promise resolves with a value, the output Observable\n   * emits that resolved value as a `next`, and then completes. If the Promise\n   * is rejected, then the output Observable emits the corresponding Error.\n   *\n   * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n   * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   *\n   * @param {Promise<T>} promise The promise to be converted.\n   * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n   * the delivery of the resolved value (or the rejection).\n   * @return {Observable<T>} An Observable which wraps the Promise.\n   * @static true\n   * @name fromPromise\n   * @owner Observable\n   */\n  static create<T>(promise: Promise<T>, scheduler?: IScheduler): Observable<T> {\n    return new PromiseObservable(promise, scheduler);\n  }\n\n  constructor(private promise: Promise<T>, private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const promise = this.promise;\n    const scheduler = this.scheduler;\n\n    if (scheduler == null) {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          subscriber.next(this.value);\n          subscriber.complete();\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.next(value);\n              subscriber.complete();\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.error(err);\n            }\n          }\n        )\n        .then(null, err => {\n          // escape the promise trap, throw unhandled errors\n          root.setTimeout(() => { throw err; });\n        });\n      }\n    } else {\n      if (this._isScalar) {\n        if (!subscriber.closed) {\n          return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber });\n        }\n      } else {\n        promise.then(\n          (value) => {\n            this.value = value;\n            this._isScalar = true;\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchNext, 0, { value, subscriber }));\n            }\n          },\n          (err) => {\n            if (!subscriber.closed) {\n              subscriber.add(scheduler.schedule(dispatchError, 0, { err, subscriber }));\n            }\n          })\n          .then(null, (err) => {\n            // escape the promise trap, throw unhandled errors\n            root.setTimeout(() => { throw err; });\n          });\n      }\n    }\n  }\n}\n\ninterface DispatchNextArg<T> {\n  subscriber: Subscriber<T>;\n  value: T;\n}\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.next(value);\n    subscriber.complete();\n  }\n}\n\ninterface DispatchErrorArg<T> {\n  subscriber: Subscriber<T>;\n  err: any;\n}\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subscriber } = arg;\n  if (!subscriber.closed) {\n    subscriber.error(err);\n  }\n}\n","import { root } from '../util/root';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { TeardownLogic } from '../Subscription';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class IteratorObservable<T> extends Observable<T> {\n  private iterator: any;\n\n  static create<T>(iterator: any, scheduler?: IScheduler): IteratorObservable<T> {\n    return new IteratorObservable(iterator, scheduler);\n  }\n\n  static dispatch(state: any) {\n\n    const { index, hasError, iterator, subscriber } = state;\n\n    if (hasError) {\n      subscriber.error(state.error);\n      return;\n    }\n\n    let result = iterator.next();\n    if (result.done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(result.value);\n    state.index = index + 1;\n\n    if (subscriber.closed) {\n      if (typeof iterator.return === 'function') {\n        iterator.return();\n      }\n      return;\n    }\n\n    (<any> this).schedule(state);\n  }\n\n  constructor(iterator: any, private scheduler?: IScheduler) {\n    super();\n\n    if (iterator == null) {\n      throw new Error('iterator cannot be null.');\n    }\n\n    this.iterator = getIterator(iterator);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    let index = 0;\n    const { iterator, scheduler } = this;\n\n    if (scheduler) {\n      return scheduler.schedule(IteratorObservable.dispatch, 0, {\n        index, iterator, subscriber\n      });\n    } else {\n      do {\n        let result = iterator.next();\n        if (result.done) {\n          subscriber.complete();\n          break;\n        } else {\n          subscriber.next(result.value);\n        }\n        if (subscriber.closed) {\n          if (typeof iterator.return === 'function') {\n            iterator.return();\n          }\n          break;\n        }\n      } while (true);\n    }\n  }\n}\n\nclass StringIterator {\n  constructor(private str: string,\n              private idx: number = 0,\n              private len: number = str.length) {\n  }\n  [$$iterator]() { return (this); }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.str.charAt(this.idx++)\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nclass ArrayIterator {\n  constructor(private arr: Array<any>,\n              private idx: number = 0,\n              private len: number = toLength(arr)) {\n  }\n  [$$iterator]() { return this; }\n  next() {\n    return this.idx < this.len ? {\n        done: false,\n        value: this.arr[this.idx++]\n    } : {\n        done: true,\n        value: undefined\n    };\n  }\n}\n\nfunction getIterator(obj: any) {\n  const i = obj[$$iterator];\n  if (!i && typeof obj === 'string') {\n    return new StringIterator(obj);\n  }\n  if (!i && obj.length !== undefined) {\n    return new ArrayIterator(obj);\n  }\n  if (!i) {\n    throw new TypeError('object is not iterable');\n  }\n  return obj[$$iterator]();\n}\n\nconst maxSafeInteger = Math.pow(2, 53) - 1;\n\nfunction toLength(o: any) {\n  let len = +o.length;\n  if (isNaN(len)) {\n      return 0;\n  }\n  if (len === 0 || !numberIsFinite(len)) {\n      return len;\n  }\n  len = sign(len) * Math.floor(Math.abs(len));\n  if (len <= 0) {\n      return 0;\n  }\n  if (len > maxSafeInteger) {\n      return maxSafeInteger;\n  }\n  return len;\n}\n\nfunction numberIsFinite(value: any) {\n  return typeof value === 'number' && root.isFinite(value);\n}\n\nfunction sign(value: any) {\n  let valueAsNumber = +value;\n  if (valueAsNumber === 0) {\n    return valueAsNumber;\n  }\n  if (isNaN(valueAsNumber)) {\n    return valueAsNumber;\n  }\n  return valueAsNumber < 0 ? -1 : 1;\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayLikeObservable<T> extends Observable<T> {\n\n  static create<T>(arrayLike: ArrayLike<T>, scheduler?: IScheduler): Observable<T> {\n    const length = arrayLike.length;\n    if (length === 0) {\n      return new EmptyObservable<T>();\n    } else if (length === 1) {\n      return new ScalarObservable<T>(<any>arrayLike[0], scheduler);\n    } else {\n      return new ArrayLikeObservable(arrayLike, scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n    const { arrayLike, index, length, subscriber } = state;\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    if (index >= length) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(arrayLike[index]);\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  private value: any;\n\n  constructor(private arrayLike: ArrayLike<T>, private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && arrayLike.length === 1) {\n      this._isScalar = true;\n      this.value = arrayLike[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const { arrayLike, scheduler } = this;\n    const length = arrayLike.length;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n        arrayLike, index, length, subscriber\n      });\n    } else {\n      for (let i = 0; i < length && !subscriber.closed; i++) {\n        subscriber.next(arrayLike[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { isArray } from '../util/isArray';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from'./IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\n\nimport { IScheduler } from '../Scheduler';\nimport { $$iterator } from '../symbol/iterator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObserveOnSubscriber } from '../operator/observeOn';\nimport { $$observable } from '../symbol/observable';\n\nconst isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number');\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class FromObservable<T> extends Observable<T> {\n  constructor(private ish: ObservableInput<T>, private scheduler?: IScheduler) {\n    super(null);\n  }\n\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\n  static create<T, R>(ish: ArrayLike<T>, scheduler?: IScheduler): Observable<R>;\n\n  /**\n   * Creates an Observable from an Array, an array-like object, a Promise, an\n   * iterable object, or an Observable-like object.\n   *\n   * <span class=\"informal\">Converts almost anything to an Observable.</span>\n   *\n   * <img src=\"./img/from.png\" width=\"100%\">\n   *\n   * Convert various other objects and data types into Observables. `from`\n   * converts a Promise or an array-like or an\n   * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n   * object into an Observable that emits the items in that promise or array or\n   * iterable. A String, in this context, is treated as an array of characters.\n   * Observable-like objects (contains a function named with the ES2015 Symbol\n   * for Observable) can also be converted through this operator.\n   *\n   * @example <caption>Converts an array to an Observable</caption>\n   * var array = [10, 20, 30];\n   * var result = Rx.Observable.from(array);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 10 20 30\n   *\n   * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n   * function* generateDoubles(seed) {\n   *   var i = seed;\n   *   while (true) {\n   *     yield i;\n   *     i = 2 * i; // double it\n   *   }\n   * }\n   *  \n   * var iterator = generateDoubles(3);\n   * var result = Rx.Observable.from(iterator).take(10);\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following:\n   * // 3 6 12 24 48 96 192 384 768 1536\n   *\n   * @see {@link create}\n   * @see {@link fromEvent}\n   * @see {@link fromEventPattern}\n   * @see {@link fromPromise}\n   *  \n   * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n   * Observable-like, an Array, an iterable or an array-like object to be\n   * converted.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * emissions of values.\n   * @return {Observable<T>} The Observable whose values are originally from the\n   * input object that was converted.\n   * @static true\n   * @name from\n   * @owner Observable\n   */\n  static create<T>(ish: ObservableInput<T>, scheduler?: IScheduler): Observable<T> {\n    if (ish != null) {\n      if (typeof ish[$$observable] === 'function') {\n        if (ish instanceof Observable && !scheduler) {\n          return ish;\n        }\n        return new FromObservable<T>(ish, scheduler);\n      } else if (isArray(ish)) {\n        return new ArrayObservable<T>(ish, scheduler);\n      } else if (isPromise(ish)) {\n        return new PromiseObservable<T>(ish, scheduler);\n      } else if (typeof ish[$$iterator] === 'function' || typeof ish === 'string') {\n        return new IteratorObservable<T>(ish, scheduler);\n      } else if (isArrayLike(ish)) {\n        return new ArrayLikeObservable(ish, scheduler);\n      }\n    }\n\n    throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const ish = this.ish;\n    const scheduler = this.scheduler;\n    if (scheduler == null) {\n      return ish[$$observable]().subscribe(subscriber);\n    } else {\n      return ish[$$observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { FromObservable } from '../observable/FromObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R> ;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<T, R>(this: Observable<T>, ...nextSources: Array<ObservableInput<any> |\n                                                       Array<ObservableInput<any>> |\n                                                       ((...values: Array<any>) => R)>): Observable<R> {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<Observable<any>>>nextSources[0];\n  }\n\n  return this.lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNextStatic<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNextStatic<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNextStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNextStatic<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\nexport function onErrorResumeNextStatic<T, R>(...nextSources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n  let source: ObservableInput<any> = null;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = <Array<ObservableInput<any>>>nextSources[0];\n  }\n  source = nextSources.shift();\n\n  return new FromObservable(source, null).lift(new OnErrorResumeNextOperator<T, R>(nextSources));\n}\n\nclass OnErrorResumeNextOperator<T, R> implements Operator<T, R> {\n  constructor(private nextSources: Array<ObservableInput<any>>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n}\n\nclass OnErrorResumeNextSubscriber<T, R> extends OuterSubscriber<T, R> {\n  constructor(protected destination: Subscriber<T>,\n              private nextSources: Array<ObservableInput<any>>) {\n    super(destination);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _error(err: any): void {\n    this.subscribeToNextSource();\n  }\n\n  protected _complete(): void {\n    this.subscribeToNextSource();\n  }\n\n  private subscribeToNextSource(): void {\n    const next = this.nextSources.shift();\n    if (next) {\n      this.add(subscribeToResult(this, next));\n    } else {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../../Observable';\r\nimport { onErrorResumeNext } from '../../operator/onErrorResumeNext';\r\n\r\nObservable.prototype.onErrorResumeNext = onErrorResumeNext;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    onErrorResumeNext: typeof onErrorResumeNext;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise<T>(this: Observable<T>): Observable<[T, T]> {\n  return this.lift(new PairwiseOperator());\n}\n\nclass PairwiseOperator<T> implements Operator<T, [T, T]> {\n  call(subscriber: Subscriber<[T, T]>, source: any): any {\n    return source.subscribe(new PairwiseSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass PairwiseSubscriber<T> extends Subscriber<T> {\n  private prev: T;\n  private hasPrev: boolean = false;\n\n  constructor(destination: Subscriber<[T, T]>) {\n    super(destination);\n  }\n\n  _next(value: T): void {\n    if (this.hasPrev) {\n      this.destination.next([this.prev, value]);\n    } else {\n      this.hasPrev = true;\n    }\n\n    this.prev = value;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { pairwise } from '../../operator/pairwise';\n\nObservable.prototype.pairwise = pairwise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pairwise: typeof pairwise;\n  }\n}","export function not(pred: Function, thisArg: any): Function {\n  function notPred(): any {\n    return !((<any> notPred).pred.apply((<any> notPred).thisArg, arguments));\n  }\n  (<any> notPred).pred = pred;\n  (<any> notPred).thisArg = thisArg;\n  return notPred;\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/* tslint:disable:max-line-length */\nexport function filter<T, S extends T>(this: Observable<T>,\n                                       predicate: (value: T, index: number) => value is S,\n                                       thisArg?: any): Observable<S>;\nexport function filter<T>(this: Observable<T>,\n                          predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean,\n                          thisArg?: any): Observable<T> {\n  return this.lift(new FilterOperator(predicate, thisArg));\n}\n\nclass FilterOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean,\n              private thisArg?: any) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass FilterSubscriber<T> extends Subscriber<T> {\n\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean,\n              private thisArg: any) {\n    super(destination);\n    this.predicate = predicate;\n  }\n\n  // the try catch block below is left specifically for\n  // optimization and perf reasons. a tryCatcher is not necessary here.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.predicate.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    if (result) {\n      this.destination.next(value);\n    }\n  }\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * <img src=\"./img/partition.png\" width=\"100%\">\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * @example <caption>Partition click events into those on DIV elements and those elsewhere</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var parts = clicks.partition(ev => ev.target.tagName === 'DIV');\n * var clicksOnDivs = parts[0];\n * var clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n * @method partition\n * @owner Observable\n */\nexport function partition<T>(this: Observable<T>, predicate: (value: T) => boolean, thisArg?: any): [Observable<T>, Observable<T>] {\n  return [\n    filter.call(this, predicate, thisArg),\n    filter.call(this, not(predicate, thisArg))\n  ];\n}\n","\nimport { Observable } from '../../Observable';\nimport { partition } from '../../operator/partition';\n\nObservable.prototype.partition = partition;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    partition: typeof partition;\n  }\n}","import { Observable } from '../Observable';\nimport { map } from './map';\n\n/**\n * Maps each source value (an object) to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted object.</span>\n *\n * <img src=\"./img/pluck.png\" width=\"100%\">\n *\n * Given a list of strings describing a path to an object property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * @example <caption>Map every every click to the tagName of the clicked target element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var tagNames = clicks.pluck('target', 'tagName');\n * tagNames.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {...string} properties The nested properties to pluck from each source\n * value (an object).\n * @return {Observable} Returns a new Observable of property values from the\n * source values.\n * @method pluck\n * @owner Observable\n */\nexport function pluck<T, R>(this: Observable<T>, ...properties: string[]): Observable<R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map.call(this, plucker(properties, length));\n}\n\nfunction plucker(props: string[], length: number): (x: string) => any {\n  const mapper = (x: string) => {\n    let currentProp = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp[props[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  };\n\n  return mapper;\n}\n","\nimport { Observable } from '../../Observable';\nimport { pluck } from '../../operator/pluck';\n\nObservable.prototype.pluck = pluck;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    pluck: typeof pluck;\n  }\n}","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function publish<T>(this: Observable<T>): ConnectableObservable<T>;\nexport function publish<T>(this: Observable<T>, selector: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} Optional selector function which can use the multicasted source sequence as many times as needed,\n * without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return a ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nexport function publish<T>(this: Observable<T>, selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  return selector ? multicast.call(this, () => new Subject<T>(), selector) :\n                    multicast.call(this, new Subject<T>());\n}\n\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n","\nimport { Observable } from '../../Observable';\nimport { publish } from '../../operator/publish';\n\nObservable.prototype.publish = <any>publish;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publish: typeof publish;\n  }\n}","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param value\n * @return {ConnectableObservable<T>}\n * @method publishBehavior\n * @owner Observable\n */\nexport function publishBehavior<T>(this: Observable<T>, value: T): ConnectableObservable<T> {\n  return multicast.call(this, new BehaviorSubject<T>(value));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishBehavior } from '../../operator/publishBehavior';\n\nObservable.prototype.publishBehavior = publishBehavior;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishBehavior: typeof publishBehavior;\n  }\n}","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { IScheduler } from '../Scheduler';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @param bufferSize\n * @param windowTime\n * @param scheduler\n * @return {ConnectableObservable<T>}\n * @method publishReplay\n * @owner Observable\n */\nexport function publishReplay<T>(this: Observable<T>, bufferSize: number = Number.POSITIVE_INFINITY,\n                                 windowTime: number = Number.POSITIVE_INFINITY,\n                                 scheduler?: IScheduler): ConnectableObservable<T> {\n  return multicast.call(this, new ReplaySubject<T>(bufferSize, windowTime, scheduler));\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishReplay } from '../../operator/publishReplay';\n\nObservable.prototype.publishReplay = publishReplay;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishReplay: typeof publishReplay;\n  }\n}","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\n\n/**\n * @return {ConnectableObservable<T>}\n * @method publishLast\n * @owner Observable\n */\nexport function publishLast<T>(this: Observable<T>): ConnectableObservable<T> {\n  return multicast.call(this, new AsyncSubject<T>());\n}\n","\nimport { Observable } from '../../Observable';\nimport { publishLast } from '../../operator/publishLast';\n\nObservable.prototype.publishLast = publishLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    publishLast: typeof publishLast;\n  }\n}","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T, R>(this: Observable<T>, ...observables: Array<Observable<any> | Array<Observable<T>>>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item\n * from the combination of this Observable and supplied Observables\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @method race\n * @owner Observable\n */\nexport function race<T>(this: Observable<T>, ...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<T>>>observables[0];\n  }\n\n  return this.lift.call(raceStatic<T>(this, ...observables));\n}\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function raceStatic<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function raceStatic<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `pair([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return new ArrayObservable<T>(<any>observables).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { race } from '../../operator/race';\n\nObservable.prototype.race = race;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    race: typeof race;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function reduce<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * <img src=\"./img/reduce.png\" width=\"100%\">\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events that happened in 5 seconds</caption>\n * var clicksInFiveSeconds = Rx.Observable.fromEvent(document, 'click')\n *   .takeUntil(Rx.Observable.interval(5000));\n * var ones = clicksInFiveSeconds.mapTo(1);\n * var seed = 0;\n * var count = ones.reduce((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator The accumulator function\n * called on each source value.\n * @param {R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @return {Observable<R>} An Observable that emits a single value that is the\n * result of accumulating the values emitted by the source Observable.\n * @method reduce\n * @owner Observable\n */\nexport function reduce<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index?: number) => R, seed?: R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ReduceOperator(accumulator, seed, hasSeed));\n}\n\nexport class ReduceOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index?: number) => R, private seed?: R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ReduceSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ReduceSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n  private acc: T | R;\n  private hasValue: boolean = false;\n\n  constructor(destination: Subscriber<R>,\n              private accumulator: (acc: R, value: T, index?: number) => R,\n              seed: R,\n              private hasSeed: boolean) {\n    super(destination);\n    this.acc = seed;\n\n    if (!this.hasSeed) {\n      this.index++;\n    }\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue || (this.hasValue = this.hasSeed)) {\n      this._tryReduce(value);\n    } else {\n      this.acc = value;\n      this.hasValue = true;\n    }\n  }\n\n  private _tryReduce(value: T) {\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.acc, value, this.index++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.acc = result;\n  }\n\n  protected _complete() {\n    if (this.hasValue || this.hasSeed) {\n      this.destination.next(this.acc);\n    }\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { reduce } from '../../operator/reduce';\n\nObservable.prototype.reduce = reduce;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    reduce: typeof reduce;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times,\n * on a particular IScheduler.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {Scheduler} [scheduler] the IScheduler to emit the items on.\n * @param {number} [count] the number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} an Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else if (count < 0) {\n    return this.lift(new RepeatOperator(-1, this));\n  } else {\n    return this.lift(new RepeatOperator(count - 1, this));\n  }\n}\n\nclass RepeatOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  complete() {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.complete();\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeat } from '../../operator/repeat';\n\nObservable.prototype.repeat = repeat;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeat: typeof repeat;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of a `complete`.\n * A `complete` will cause the emission of the Throwable that cause the complete to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `complete` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * IScheduler.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the IScheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen<T>(this: Observable<T>, notifier: (notifications: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (notifications: Observable<any>) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RepeatWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private notifications: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n  private sourceIsBeingSubscribedTo: boolean = true;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (notifications: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.source.subscribe(this);\n    this.sourceIsBeingSubscribedTo = true;\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      } else if (this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this.temporarilyUnsubscribe();\n      this.notifications.next();\n    }\n  }\n\n  protected _unsubscribe() {\n    const { notifications, retriesSubscription } = this;\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  private subscribeToRetries() {\n    this.notifications = new Subject();\n    const retries = tryCatch(this.notifier)(this.notifications);\n    if (retries === errorObject) {\n      return super.complete();\n    }\n    this.retries = retries;\n    this.retriesSubscription = subscribeToResult(this, retries);\n  }\n\n  private temporarilyUnsubscribe() {\n    const { notifications, retries, retriesSubscription } = this;\n    this.notifications = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.notifications = notifications;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n  }\n\n}\n","\nimport { Observable } from '../../Observable';\nimport { repeatWhen } from '../../operator/repeatWhen';\n\nObservable.prototype.repeatWhen = repeatWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    repeatWhen: typeof repeatWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that mirrors the source Observable, resubscribing to it if it calls `error` and the\n * predicate returns true for that specific exception and retry count.\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * count resubscriptions (given as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} number of retry attempts before failing.\n * @return {Observable} the source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry<T>(this: Observable<T>, count: number = -1): Observable<T> {\n  return this.lift(new RetryOperator(count, this));\n}\n\nclass RetryOperator<T> implements Operator<T, T> {\n  constructor(private count: number,\n              private source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetrySubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<any>,\n              private count: number,\n              private source: Observable<T>) {\n    super(destination);\n  }\n  error(err: any) {\n    if (!this.isStopped) {\n      const { source, count } = this;\n      if (count === 0) {\n        return super.error(err);\n      } else if (count > -1) {\n        this.count = count - 1;\n      }\n      this.unsubscribe();\n      this.isStopped = false;\n      this.closed = false;\n      source.subscribe(this);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retry } from '../../operator/retry';\n\nObservable.prototype.retry = retry;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retry: typeof retry;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that emits the same values as the source observable with the exception of an `error`.\n * An `error` will cause the emission of the Throwable that cause the error to the Observable returned from\n * notificationHandler. If that Observable calls onComplete or `error` then retry will call `complete` or `error`\n * on the child subscription. Otherwise, this Observable will resubscribe to the source observable, on a particular\n * IScheduler.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {notificationHandler} receives an Observable of notifications with which a user can `complete` or `error`,\n * aborting the retry.\n * @param {scheduler} the IScheduler on which to subscribe to the source Observable.\n * @return {Observable} the source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen<T>(this: Observable<T>, notifier: (errors: Observable<any>) => Observable<any>): Observable<T> {\n  return this.lift(new RetryWhenOperator(notifier, this));\n}\n\nclass RetryWhenOperator<T> implements Operator<T, T> {\n  constructor(protected notifier: (errors: Observable<any>) => Observable<any>,\n              protected source: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass RetryWhenSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private errors: Subject<any>;\n  private retries: Observable<any>;\n  private retriesSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>,\n              private notifier: (errors: Observable<any>) => Observable<any>,\n              private source: Observable<T>) {\n    super(destination);\n  }\n\n  error(err: any) {\n    if (!this.isStopped) {\n\n      let errors = this.errors;\n      let retries: any = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n        retries = tryCatch(this.notifier)(errors);\n        if (retries === errorObject) {\n          return super.error(errorObject.e);\n        }\n        retriesSubscription = subscribeToResult(this, retries);\n      } else {\n        this.errors = null;\n        this.retriesSubscription = null;\n      }\n\n      this.unsubscribe();\n      this.closed = false;\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n\n      errors.next(err);\n    }\n  }\n\n  protected _unsubscribe() {\n    const { errors, retriesSubscription } = this;\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = null;\n    }\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = null;\n    }\n    this.retries = null;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n\n    const { errors, retries, retriesSubscription } = this;\n    this.errors = null;\n    this.retries = null;\n    this.retriesSubscription = null;\n\n    this.unsubscribe();\n    this.isStopped = false;\n    this.closed = false;\n\n    this.errors = errors;\n    this.retries = retries;\n    this.retriesSubscription = retriesSubscription;\n\n    this.source.subscribe(this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { retryWhen } from '../../operator/retryWhen';\n\nObservable.prototype.retryWhen = retryWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    retryWhen: typeof retryWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private value: T;\n  private hasValue: boolean = false;\n\n  protected _next(value: T) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.emitValue();\n  }\n\n  notifyComplete(): void {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sample } from '../../operator/sample';\n\nObservable.prototype.sample = sample;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sample: typeof sample;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { async } from '../scheduler/async';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime<T>(this: Observable<T>, period: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator<T> implements Operator<T, T> {\n  constructor(private period: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SampleTimeSubscriber<T> extends Subscriber<T> {\n  lastValue: T;\n  hasValue: boolean = false;\n\n  constructor(destination: Subscriber<T>,\n              private period: number,\n              private scheduler: IScheduler) {\n    super(destination);\n    this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n  }\n\n  protected _next(value: T) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n}\n\nfunction dispatchNotification<T>(this: Action<any>, state: any) {\n  let { subscriber, period } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}\n","\nimport { Observable } from '../../Observable';\nimport { sampleTime } from '../../operator/sampleTime';\n\nObservable.prototype.sampleTime = sampleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sampleTime: typeof sampleTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\n\n/* tslint:disable:max-line-length */\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T, value: T, index: number) => T, seed?: T): Observable<T>;\nexport function scan<T>(this: Observable<T>, accumulator: (acc: T[], value: T, index: number) => T[], seed?: T[]): Observable<T[]>;\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan<T, R>(this: Observable<T>, accumulator: (acc: R, value: T, index: number) => R, seed?: T | R): Observable<R> {\n  let hasSeed = false;\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return this.lift(new ScanOperator(accumulator, seed, hasSeed));\n}\n\nclass ScanOperator<T, R> implements Operator<T, R> {\n  constructor(private accumulator: (acc: R, value: T, index: number) => R, private seed?: T | R, private hasSeed: boolean = false) {}\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ScanSubscriber<T, R> extends Subscriber<T> {\n  private index: number = 0;\n\n  get seed(): T | R {\n    return this._seed;\n  }\n\n  set seed(value: T | R) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  constructor(destination: Subscriber<R>, private accumulator: (acc: R, value: T, index: number) => R, private _seed: T | R, private hasSeed: boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  private _tryNext(value: T): void {\n    const index = this.index++;\n    let result: any;\n    try {\n      result = this.accumulator(<R>this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n    this.seed = result;\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\n\nimport { scan } from '../../operator/scan';\n\nObservable.prototype.scan = scan;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    scan: typeof scan;\n  }\n}","import { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo the observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual<T>(this: Observable<T>, compareTo: Observable<T>,\n                                 comparor?: (a: T, b: T) => boolean): Observable<boolean> {\n  return this.lift(new SequenceEqualOperator(compareTo, comparor));\n}\n\nexport class SequenceEqualOperator<T> implements Operator<T, boolean> {\n  constructor(private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n  }\n\n  call(subscriber: Subscriber<boolean>, source: any): any {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SequenceEqualSubscriber<T, R> extends Subscriber<T> {\n  private _a: T[] = [];\n  private _b: T[] = [];\n  private _oneComplete = false;\n\n  constructor(destination: Observer<R>,\n              private compareTo: Observable<T>,\n              private comparor: (a: T, b: T) => boolean) {\n    super(destination);\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  protected _next(value: T): void {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n      this.checkValues();\n    }\n  }\n\n  public _complete(): void {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  }\n\n  checkValues() {\n    const { _a, _b, comparor } = this;\n    while (_a.length > 0 && _b.length > 0) {\n      let a = _a.shift();\n      let b = _b.shift();\n      let areEqual = false;\n      if (comparor) {\n        areEqual = tryCatch(comparor)(a, b);\n        if (areEqual === errorObject) {\n          this.destination.error(errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  }\n\n  emit(value: boolean) {\n    const { destination } = this;\n    destination.next(value);\n    destination.complete();\n  }\n\n  nextB(value: T) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n      this.checkValues();\n    }\n  }\n}\n\nclass SequenceEqualCompareToSubscriber<T, R> extends Subscriber<T> {\n  constructor(destination: Observer<R>, private parent: SequenceEqualSubscriber<T, R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.parent.nextB(value);\n  }\n\n  protected _error(err: any): void {\n    this.parent.error(err);\n  }\n\n  protected _complete(): void {\n    this.parent._complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { sequenceEqual } from '../../operator/sequenceEqual';\n\nObservable.prototype.sequenceEqual = sequenceEqual;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    sequenceEqual: typeof sequenceEqual;\n  }\n}","import { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable, connectableObservableDescriptor } from '../observable/ConnectableObservable';\n\n/* tslint:disable:max-line-length */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: factoryOrValue<Subject<T>>): ConnectableObservable<T>;\nexport function multicast<T>(SubjectFactory: (this: Observable<T>) => Subject<T>, selector?: selector<T>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} an Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast<T>(this: Observable<T>, subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n                             selector?: (source: Observable<T>) => Observable<T>): Observable<T> | ConnectableObservable<T> {\n  let subjectFactory: () => Subject<T>;\n  if (typeof subjectOrSubjectFactory === 'function') {\n    subjectFactory = <() => Subject<T>>subjectOrSubjectFactory;\n  } else {\n    subjectFactory = function subjectFactory() {\n      return <Subject<T>>subjectOrSubjectFactory;\n    };\n  }\n\n  if (typeof selector === 'function') {\n    return this.lift(new MulticastOperator(subjectFactory, selector));\n  }\n\n  const connectable: any = Object.create(this, connectableObservableDescriptor);\n  connectable.source = this;\n  connectable.subjectFactory = subjectFactory;\n\n  return <ConnectableObservable<T>> connectable;\n}\n\nexport type factoryOrValue<T> = T | (() => T);\nexport type selector<T> = (source: Observable<T>) => Observable<T>;\n\nexport class MulticastOperator<T> implements Operator<T, T> {\n  constructor(private subjectFactory: () => Subject<T>,\n              private selector: (source: Observable<T>) => Observable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): any {\n    const { selector } = this;\n    const subject = this.subjectFactory();\n    const subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  }\n}\n","import { Observable } from '../Observable';\nimport { multicast } from './multicast';\nimport { Subject } from '../Subject';\n\nfunction shareSubjectFactory() {\n  return new Subject();\n}\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .publish().refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} an Observable that upon connection causes the source Observable to emit items to its Observers\n * @method share\n * @owner Observable\n */\nexport function share<T>(this: Observable<T>): Observable<T> {\n  return multicast.call(this, shareSubjectFactory).refCount();\n};\n","\nimport { Observable } from '../../Observable';\nimport { share } from '../../operator/share';\n\nObservable.prototype.share = share;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    share: typeof share;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observer } from '../Observer';\nimport { EmptyError } from '../util/EmptyError';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * such items, notify of an IllegalArgumentException or NoSuchElementException respectively.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} a predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} an Observable that emits the single item emitted by the source Observable that matches\n * the predicate.\n .\n * @method single\n * @owner Observable\n */\nexport function single<T>(this: Observable<T>, predicate?: (value: T, index: number, source: Observable<T>) => boolean): Observable<T> {\n  return this.lift(new SingleOperator(predicate, this));\n}\n\nclass SingleOperator<T> implements Operator<T, T> {\n  constructor(private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SingleSubscriber<T> extends Subscriber<T> {\n  private seenValue: boolean = false;\n  private singleValue: T;\n  private index: number = 0;\n\n  constructor(destination: Observer<T>,\n              private predicate?: (value: T, index: number, source: Observable<T>) => boolean,\n              private source?: Observable<T>) {\n    super(destination);\n  }\n\n  private applySingleValue(value: T): void {\n    if (this.seenValue) {\n      this.destination.error('Sequence contains more than one element');\n    } else {\n      this.seenValue = true;\n      this.singleValue = value;\n    }\n  }\n\n  protected _next(value: T): void {\n    const predicate = this.predicate;\n    this.index++;\n    if (predicate) {\n      this.tryNext(value);\n    } else {\n      this.applySingleValue(value);\n    }\n  }\n\n  private tryNext(value: T): void {\n    try {\n      const result = this.predicate(value, this.index, this.source);\n      if (result) {\n        this.applySingleValue(value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n\n    if (this.index > 0) {\n      destination.next(this.seenValue ? this.singleValue : undefined);\n      destination.complete();\n    } else {\n      destination.error(new EmptyError);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { single } from '../../operator/single';\n\nObservable.prototype.single = single;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    single: typeof single;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips `n` items emitted by an Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} the `n` of times, items emitted by source Observable should be skipped.\n * @return {Observable} an Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip<T>(this: Observable<T>, total: number): Observable<T> {\n  return this.lift(new SkipOperator(total));\n}\n\nclass SkipOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipSubscriber<T> extends Subscriber<T> {\n  count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    if (++this.count > this.total) {\n      this.destination.next(x);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skip } from '../../operator/skip';\n\nObservable.prototype.skip = skip;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skip: typeof skip;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} the second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} an Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new SkipUntilOperator(notifier));\n}\n\nclass SkipUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  private hasValue: boolean = false;\n  private isInnerStopped: boolean = false;\n\n  constructor(destination: Subscriber<any>,\n              notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  protected _next(value: T) {\n    if (this.hasValue) {\n      super._next(value);\n    }\n  }\n\n  protected _complete() {\n    if (this.isInnerStopped) {\n      super._complete();\n    } else {\n      this.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.hasValue = true;\n  }\n\n  notifyComplete(): void {\n    this.isInnerStopped = true;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipUntil } from '../../operator/skipUntil';\n\nObservable.prototype.skipUntil = skipUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipUntil: typeof skipUntil;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - a function to test each item emitted from the source Observable.\n * @return {Observable<T>} an Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new SkipWhileOperator(predicate));\n}\n\nclass SkipWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SkipWhileSubscriber<T> extends Subscriber<T> {\n  private skipping: boolean = true;\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    if (this.skipping) {\n      this.tryCallPredicate(value);\n    }\n\n    if (!this.skipping) {\n      destination.next(value);\n    }\n  }\n\n  private tryCallPredicate(value: T): void {\n    try {\n      const result = this.predicate(value, this.index++);\n      this.skipping = Boolean(result);\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { skipWhile } from '../../operator/skipWhile';\n\nObservable.prototype.skipWhile = skipWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    skipWhile: typeof skipWhile;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Observer } from '../Observer';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(this: Observable<T>, concurrent: number = Number.POSITIVE_INFINITY): T {\n  return <any>this.lift<any>(new MergeAllOperator<T>(concurrent));\n}\n\nexport class MergeAllOperator<T> implements Operator<Observable<T>, T> {\n  constructor(private concurrent: number) {\n  }\n\n  call(observer: Observer<T>, source: any): any {\n    return source.subscribe(new MergeAllSubscriber(observer, this.concurrent));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeAllSubscriber<T> extends OuterSubscriber<Observable<T>, T> {\n  private hasCompleted: boolean = false;\n  private buffer: Observable<T>[] = [];\n  private active: number = 0;\n\n  constructor(destination: Observer<T>, private concurrent: number) {\n    super(destination);\n  }\n\n  protected _next(observable: Observable<T>) {\n    if (this.active < this.concurrent) {\n      this.active++;\n      this.add(subscribeToResult<Observable<T>, T>(this, observable));\n    } else {\n      this.buffer.push(observable);\n    }\n  }\n\n  protected _complete() {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { isScheduler } from '../util/isScheduler';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { MergeAllOperator } from './mergeAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(this: Observable<T>, scheduler?: IScheduler): Observable<T>;\nexport function concat<T, T2>(this: Observable<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concat<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(this: Observable<T>, ...observables: Array<ObservableInput<T> | IScheduler>): Observable<T>;\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins this Observable with multiple other Observables by subscribing to them\n * one at a time, starting with the source, and merging their results into the\n * output Observable. Will wait for each Observable to complete before moving\n * on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = timer.concat(sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = timer1.concat(timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} other An input Observable to concatenate after the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @method concat\n * @owner Observable\n */\nexport function concat<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  return this.lift.call(concatStatic<T, R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function concatStatic<T>(v1: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function concatStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: IScheduler): Observable<T | T2>;\nexport function concatStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: IScheduler): Observable<T | T2 | T3>;\nexport function concatStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4>;\nexport function concatStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5>;\nexport function concatStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: IScheduler): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concatStatic<T>(...observables: (ObservableInput<T> | IScheduler)[]): Observable<T>;\nexport function concatStatic<T, R>(...observables: (ObservableInput<any> | IScheduler)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from every\n * given input Observable after the current Observable.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * Joins multiple Observables together by subscribing to them one at a time and\n * merging their results into the output Observable. Will wait for each\n * Observable to complete before moving on to the next.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n * @example <caption>Concatenate 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {Observable} input1 An input Observable to concatenate with others.\n * @param {Observable} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concatStatic<T, R>(...observables: Array<ObservableInput<any> | IScheduler>): Observable<R> {\n  let scheduler: IScheduler = null;\n  let args = <any[]>observables;\n  if (isScheduler(args[observables.length - 1])) {\n    scheduler = args.pop();\n  }\n\n  if (scheduler === null && observables.length === 1) {\n    return <Observable<R>>observables[0];\n  }\n\n  return new ArrayObservable(observables, scheduler).lift(new MergeAllOperator<R>(1));\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concatStatic } from './concat';\nimport { isScheduler } from '../util/isScheduler';\n\n/* tslint:disable:max-line-length */\nexport function startWith<T>(this: Observable<T>, v1: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, v1: T, v2: T, v3: T, v4: T, v5: T, v6: T, scheduler?: IScheduler): Observable<T>;\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Returns an Observable that emits the items in a specified Iterable before it begins to emit items emitted by the\n * source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {Values} an Iterable that contains the items you want the modified Observable to emit first.\n * @return {Observable} an Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith<T>(this: Observable<T>, ...array: Array<T | IScheduler>): Observable<T> {\n  let scheduler = <IScheduler>array[array.length - 1];\n  if (isScheduler(scheduler)) {\n    array.pop();\n  } else {\n    scheduler = null;\n  }\n\n  const len = array.length;\n  if (len === 1) {\n    return concatStatic(new ScalarObservable<T>(<T>array[0], scheduler), <Observable<T>>this);\n  } else if (len > 1) {\n    return concatStatic(new ArrayObservable<T>(<T[]>array, scheduler), <Observable<T>>this);\n  } else {\n    return concatStatic(new EmptyObservable<T>(scheduler), <Observable<T>>this);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { startWith } from '../../operator/startWith';\n\nObservable.prototype.startWith = startWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    startWith: typeof startWith;\n  }\n}","import { isArray } from '../util/isArray';\n\nexport function isNumeric(val: any): val is number {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n};\n","import { Action } from '../scheduler/Action';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n\nexport interface DispatchArg<T> {\n  source: Observable<T>;\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class SubscribeOnObservable<T> extends Observable<T> {\n  static create<T>(source: Observable<T>, delay: number = 0, scheduler: IScheduler = asap): Observable<T> {\n    return new SubscribeOnObservable(source, delay, scheduler);\n  }\n\n  static dispatch<T>(this: Action<T>, arg: DispatchArg<T>): Subscription {\n    const { source, subscriber } = arg;\n    return this.add(source.subscribe(subscriber));\n  }\n\n  constructor(public source: Observable<T>,\n              private delayTime: number = 0,\n              private scheduler: IScheduler = asap) {\n    super();\n    if (!isNumeric(delayTime) || delayTime < 0) {\n      this.delayTime = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = asap;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    const delay = this.delayTime;\n    const source = this.source;\n    const scheduler = this.scheduler;\n\n    return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n      source, subscriber\n    });\n  }\n}\n","import { Operator } from '../Operator';\nimport { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { SubscribeOnObservable } from '../observable/SubscribeOnObservable';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified IScheduler.\n *\n * <img src=\"./img/subscribeOn.png\" width=\"100%\">\n *\n * @param {Scheduler} the IScheduler to perform subscription actions on.\n * @return {Observable<T>} the source Observable modified so that its subscriptions happen on the specified IScheduler\n .\n * @method subscribeOn\n * @owner Observable\n */\nexport function subscribeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new SubscribeOnOperator<T>(scheduler, delay));\n}\n\nclass SubscribeOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler,\n              private delay: number) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return new SubscribeOnObservable(\n      source, this.delay, this.scheduler\n    ).subscribe(subscriber);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { subscribeOn } from '../../operator/subscribeOn';\n\nObservable.prototype.subscribeOn = subscribeOn;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    subscribeOn: typeof subscribeOn;\n  }\n}","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * subscribing to only the most recently emitted of those inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * previous inner Observable once a new one appears.</span>\n *\n * <img src=\"./img/switch.png\" width=\"100%\">\n *\n * `switch` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable subscribes to the inner Observable and\n * begins emitting the items emitted by that. So far, it behaves\n * like {@link mergeAll}. However, when a new inner Observable is emitted,\n * `switch` unsubscribes from the earlier-emitted inner Observable and\n * subscribes to the new inner Observable and begins emitting items from it. It\n * continues to behave like this for subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * // Each click event is mapped to an Observable that ticks every second\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var switched = higherOrder.switch();\n * // The outcome is that `switched` is essentially a timer that restarts\n * // on every click. The interval Observables from older clicks do not merge\n * // with the current interval Observable.\n * switched.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link zipAll}\n *\n * @return {Observable<T>} An Observable that emits the items emitted by the\n * Observable most recently emitted by the source Observable.\n * @method switch\n * @name switch\n * @owner Observable\n */\nexport function _switch<T>(this: Observable<T>): T {\n  return <any>this.lift<any>(new SwitchOperator());\n}\n\nclass SwitchOperator<T, R> implements Operator<T, R> {\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new SwitchSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private hasCompleted: boolean = false;\n  innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    this.unsubscribeInner();\n    this.active++;\n    this.add(this.innerSubscription = subscribeToResult(this, value));\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  private unsubscribeInner(): void {\n    this.active = this.active > 0 ? this.active - 1 : 0;\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n      this.remove(innerSubscription);\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(err: any): void {\n    this.destination.error(err);\n  }\n\n  notifyComplete(): void {\n    this.unsubscribeInner();\n    if (this.hasCompleted && this.active === 0) {\n      this.destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { _switch } from '../../operator/switch';\n\nObservable.prototype.switch = _switch;\nObservable.prototype._switch = _switch;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switch: typeof _switch;\n    _switch: typeof _switch;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<R>): Observable<R>;\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): Observable} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap<T, I, R>(this: Observable<T>, project: (value: T, index: number) => ObservableInput<I>,\n                                   resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapOperator(project, resultSelector));\n}\n\nclass SwitchMapOperator<T, I, R> implements Operator<T, I> {\n  constructor(private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private project: (value: T, index: number) => ObservableInput<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    let result: ObservableInput<I>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (error) {\n      this.destination.error(error);\n      return;\n    }\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(result: ObservableInput<I>, value: T, index: number) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n  }\n\n  protected _complete(): void {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    if (this.resultSelector) {\n      this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      this.destination.next(innerValue);\n    }\n  }\n\n  private _tryNotifyNext(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): void {\n    let result: R;\n    try {\n      result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMap } from '../../operator/switchMap';\n\nObservable.prototype.switchMap = switchMap;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMap: typeof switchMap;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, ObservableInput } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<T, R>(this: Observable<T>, observable: ObservableInput<R>): Observable<R>;\nexport function switchMapTo<T, I, R>(this: Observable<T>, observable: ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switch} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * <img src=\"./img/switchMapTo.png\" width=\"100%\">\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMapTo(Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMapTo}\n * @see {@link switch}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {Observable} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` every time a value is emitted on the source Observable.\n * @return {Observable} An Observable that emits items from the given\n * `innerObservable` (and optionally transformed through `resultSelector`) every\n * time a value is emitted on the source Observable, and taking only the values\n * from the most recently projected inner Observable.\n * @method switchMapTo\n * @owner Observable\n */\nexport function switchMapTo<T, I, R>(this: Observable<T>, innerObservable: Observable<I>,\n                                     resultSelector?: (outerValue: T,\n                                                       innerValue: I,\n                                                       outerIndex: number,\n                                                       innerIndex: number) => R): Observable<I | R> {\n  return this.lift(new SwitchMapToOperator(innerObservable, resultSelector));\n}\n\nclass SwitchMapToOperator<T, I, R> implements Operator<T, I> {\n  constructor(private observable: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n  }\n\n  call(subscriber: Subscriber<I>, source: any): any {\n    return source.subscribe(new SwitchMapToSubscriber(subscriber, this.observable, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SwitchMapToSubscriber<T, I, R> extends OuterSubscriber<T, I> {\n  private index: number = 0;\n  private innerSubscription: Subscription;\n\n  constructor(destination: Subscriber<I>,\n              private inner: Observable<I>,\n              private resultSelector?: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) {\n    super(destination);\n  }\n\n  protected _next(value: any) {\n    const innerSubscription = this.innerSubscription;\n    if (innerSubscription) {\n      innerSubscription.unsubscribe();\n    }\n    this.add(this.innerSubscription = subscribeToResult(this, this.inner, value, this.index++));\n  }\n\n  protected _complete() {\n    const {innerSubscription} = this;\n    if (!innerSubscription || innerSubscription.closed) {\n      super._complete();\n    }\n  }\n\n  protected _unsubscribe() {\n    this.innerSubscription = null;\n  }\n\n  notifyComplete(innerSub: Subscription) {\n    this.remove(innerSub);\n    this.innerSubscription = null;\n    if (this.isStopped) {\n      super._complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: I,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, I>): void {\n    const { resultSelector, destination } = this;\n    if (resultSelector) {\n      this.tryResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } else {\n      destination.next(innerValue);\n    }\n  }\n\n  private tryResultSelector(outerValue: T, innerValue: I,\n                            outerIndex: number, innerIndex: number): void {\n    const { resultSelector, destination } = this;\n    let result: R;\n    try {\n      result = resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { switchMapTo } from '../../operator/switchMapTo';\n\nObservable.prototype.switchMapTo = switchMapTo;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    switchMapTo: typeof switchMapTo;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeOperator(count));\n  }\n}\n\nclass TakeOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeSubscriber<T> extends Subscriber<T> {\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const total = this.total;\n    const count = ++this.count;\n    if (count <= total) {\n      this.destination.next(value);\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { take } from '../../operator/take';\n\nObservable.prototype.take = take;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    take: typeof take;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast<T>(this: Observable<T>, count: number): Observable<T> {\n  if (count === 0) {\n    return new EmptyObservable<T>();\n  } else {\n    return this.lift(new TakeLastOperator(count));\n  }\n}\n\nclass TakeLastOperator<T> implements Operator<T, T> {\n  constructor(private total: number) {\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError;\n    }\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeLastSubscriber<T> extends Subscriber<T> {\n  private ring: Array<T> = new Array();\n  private count: number = 0;\n\n  constructor(destination: Subscriber<T>, private total: number) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const ring = this.ring;\n    const total = this.total;\n    const count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      const index = count % total;\n      ring[index] = value;\n    }\n  }\n\n  protected _complete(): void {\n    const destination = this.destination;\n    let count = this.count;\n\n    if (count > 0) {\n      const total = this.count >= this.total ? this.total : this.count;\n      const ring  = this.ring;\n\n      for (let i = 0; i < total; i++) {\n        const idx = (count++) % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../../Observable';\nimport { takeLast } from '../../operator/takeLast';\n\nObservable.prototype.takeLast = takeLast;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeLast: typeof takeLast;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil<T>(this: Observable<T>, notifier: Observable<any>): Observable<T> {\n  return this.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator<T> implements Operator<T, T> {\n  constructor(private notifier: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeUntilSubscriber<T, R> extends OuterSubscriber<T, R> {\n\n  constructor(destination: Subscriber<any>,\n              private notifier: Observable<any>) {\n    super(destination);\n    this.add(subscribeToResult(this, notifier));\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.complete();\n  }\n\n  notifyComplete(): void {\n    // noop\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeUntil } from '../../operator/takeUntil';\n\nObservable.prototype.takeUntil = takeUntil;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeUntil: typeof takeUntil;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile<T>(this: Observable<T>, predicate: (value: T, index: number) => boolean): Observable<T> {\n  return this.lift(new TakeWhileOperator(predicate));\n}\n\nclass TakeWhileOperator<T> implements Operator<T, T> {\n  constructor(private predicate: (value: T, index: number) => boolean) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TakeWhileSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n\n  constructor(destination: Subscriber<T>,\n              private predicate: (value: T, index: number) => boolean) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const destination = this.destination;\n    let result: boolean;\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n    this.nextOrComplete(value, result);\n  }\n\n  private nextOrComplete(value: T, predicateResult: boolean): void {\n    const destination = this.destination;\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      destination.complete();\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { takeWhile } from '../../operator/takeWhile';\n\nObservable.prototype.takeWhile = takeWhile;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    takeWhile: typeof takeWhile;\n  }\n}","import { Operator } from '../Operator';\nimport { Observable, SubscribableOrPromise } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): Observable|Promise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle<T>(this: Observable<T>, durationSelector: (value: T) => SubscribableOrPromise<number>): Observable<T> {\n  return this.lift(new ThrottleOperator(durationSelector));\n}\n\nclass ThrottleOperator<T> implements Operator<T, T> {\n  constructor(private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private throttled: Subscription;\n\n  constructor(protected destination: Subscriber<T>,\n              private durationSelector: (value: T) => SubscribableOrPromise<number>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (!this.throttled) {\n      this.tryDurationSelector(value);\n    }\n  }\n\n  private tryDurationSelector(value: T): void {\n    let duration: SubscribableOrPromise<number> = null;\n    try {\n      duration = this.durationSelector(value);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.emitAndThrottle(value, duration);\n  }\n\n  private emitAndThrottle(value: T, duration: SubscribableOrPromise<number>) {\n    this.add(this.throttled = subscribeToResult(this, duration));\n    this.destination.next(value);\n  }\n\n  protected _unsubscribe() {\n    const throttled = this.throttled;\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = null;\n      throttled.unsubscribe();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this._unsubscribe();\n  }\n\n  notifyComplete(): void {\n    this._unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttle } from '../../operator/throttle';\n\nObservable.prototype.throttle = throttle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttle: typeof throttle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { async } from '../scheduler/async';\nimport { Observable } from '../Observable';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime<T>(this: Observable<T>, duration: number, scheduler: IScheduler = async): Observable<T> {\n  return this.lift(new ThrottleTimeOperator(duration, scheduler));\n}\n\nclass ThrottleTimeOperator<T> implements Operator<T, T> {\n  constructor(private duration: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ThrottleTimeSubscriber<T> extends Subscriber<T> {\n  private throttled: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private duration: number,\n              private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T) {\n    if (!this.throttled) {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n      this.destination.next(value);\n    }\n  }\n\n  clearThrottle() {\n    const throttled = this.throttled;\n    if (throttled) {\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  }\n}\n\ninterface DispatchArg<T> {\n  subscriber: ThrottleTimeSubscriber<T>;\n}\n\nfunction dispatchNext<T>(arg: DispatchArg<T>) {\n  const { subscriber } = arg;\n  subscriber.clearThrottle();\n}\n","\nimport { Observable } from '../../Observable';\nimport { throttleTime } from '../../operator/throttleTime';\n\nObservable.prototype.throttleTime = throttleTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    throttleTime: typeof throttleTime;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { timeInterval } from '../../operator/timeInterval';\n\nObservable.prototype.timeInterval = timeInterval;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeInterval: typeof timeInterval;\n  }\n}","import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\nimport { TimeoutError } from '../util/TimeoutError';\n\n/**\n * @param {number} due\n * @param {Scheduler} [scheduler]\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeout\n * @owner Observable\n */\nexport function timeout<T>(this: Observable<T>,\n                           due: number | Date,\n                           scheduler: IScheduler = async): Observable<T> {\n  const absoluteTimeout = isDate(due);\n  const waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutOperator(waitFor, absoluteTimeout, scheduler, new TimeoutError()));\n}\n\nclass TimeoutOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutSubscriber<T>(\n      subscriber, this.absoluteTimeout, this.waitFor, this.scheduler, this.errorInstance\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutSubscriber<T> extends Subscriber<T> {\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private scheduler: IScheduler,\n              private errorInstance: TimeoutError) {\n    super(destination);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.notifyTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    this.scheduler.schedule(TimeoutSubscriber.dispatchTimeout, this.waitFor, { subscriber: this, index: currentIndex });\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  notifyTimeout(): void {\n    this.error(this.errorInstance);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeout } from '../../operator/timeout';\n\nObservable.prototype.timeout = timeout;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeout: typeof timeout;\n  }\n}","export function isDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(+value);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\nimport { Subscription, TeardownLogic } from '../Subscription';\nimport { Observable, ObservableInput } from '../Observable';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function timeoutWith<T>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<T>, scheduler?: IScheduler): Observable<T>;\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date, withObservable: ObservableInput<R>, scheduler?: IScheduler): Observable<T | R>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param due\n * @param withObservable\n * @param scheduler\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith<T, R>(this: Observable<T>, due: number | Date,\n                                  withObservable: ObservableInput<R>,\n                                  scheduler: IScheduler = async): Observable<T | R> {\n  let absoluteTimeout = isDate(due);\n  let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(<number>due);\n  return this.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n}\n\nclass TimeoutWithOperator<T> implements Operator<T, T> {\n  constructor(private waitFor: number,\n              private absoluteTimeout: boolean,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new TimeoutWithSubscriber(\n      subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeoutWithSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private timeoutSubscription: Subscription = undefined;\n  private index: number = 0;\n  private _previousIndex: number = 0;\n  get previousIndex(): number {\n    return this._previousIndex;\n  }\n  private _hasCompleted: boolean = false;\n  get hasCompleted(): boolean {\n    return this._hasCompleted;\n  }\n\n  constructor(public destination: Subscriber<T>,\n              private absoluteTimeout: boolean,\n              private waitFor: number,\n              private withObservable: ObservableInput<any>,\n              private scheduler: IScheduler) {\n    super();\n    destination.add(this);\n    this.scheduleTimeout();\n  }\n\n  private static dispatchTimeout(state: any): void {\n    const source = state.subscriber;\n    const currentIndex = state.index;\n    if (!source.hasCompleted && source.previousIndex === currentIndex) {\n      source.handleTimeout();\n    }\n  }\n\n  private scheduleTimeout(): void {\n    let currentIndex = this.index;\n    const timeoutState = { subscriber: this, index: currentIndex };\n    this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, timeoutState);\n    this.index++;\n    this._previousIndex = currentIndex;\n  }\n\n  protected _next(value: T) {\n    this.destination.next(value);\n    if (!this.absoluteTimeout) {\n      this.scheduleTimeout();\n    }\n  }\n\n  protected _error(err: any) {\n    this.destination.error(err);\n    this._hasCompleted = true;\n  }\n\n  protected _complete() {\n    this.destination.complete();\n    this._hasCompleted = true;\n  }\n\n  handleTimeout(): void {\n    if (!this.closed) {\n      const withObservable = this.withObservable;\n      this.unsubscribe();\n      this.destination.add(this.timeoutSubscription = subscribeToResult(this, withObservable));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { timeoutWith } from '../../operator/timeoutWith';\n\nObservable.prototype.timeoutWith = timeoutWith;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    timeoutWith: typeof timeoutWith;\n  }\n}","import { Observable } from '../../Observable';\r\nimport { timestamp } from '../../operator/timestamp';\r\n\r\nObservable.prototype.timestamp = timestamp;\r\n\r\ndeclare module '../../Observable' {\r\n  interface Observable<T> {\r\n    timestamp: typeof timestamp;\r\n  }\r\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * @return {Observable<any[]>|WebSocketSubject<T>|Observable<T>}\n * @method toArray\n * @owner Observable\n */\nexport function toArray<T>(this: Observable<T>): Observable<T[]> {\n  return this.lift(new ToArrayOperator());\n}\n\nclass ToArrayOperator<T> implements Operator<T, T[]> {\n  call(subscriber: Subscriber<T[]>, source: any): any {\n    return source.subscribe(new ToArraySubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ToArraySubscriber<T> extends Subscriber<T> {\n\n  private array: T[] = [];\n\n  constructor(destination: Subscriber<T[]>) {\n    super(destination);\n  }\n\n  protected _next(x: T) {\n    this.array.push(x);\n  }\n\n  protected _complete() {\n    this.destination.next(this.array);\n    this.destination.complete();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { toArray } from '../../operator/toArray';\n\nObservable.prototype.toArray = toArray;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toArray: typeof toArray;\n  }\n}","import { Observable } from '../Observable';\nimport { root } from '../util/root';\n\n/* tslint:disable:max-line-length */\nexport function toPromise<T>(this: Observable<T>): Promise<T>;\nexport function toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n/* tslint:disable:max-line-length */\n\n/**\n * Converts an Observable sequence to a ES2015 compliant promise.\n *\n * @example\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .just(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Rejected Promise\n * // Using normal ES2015\n * let source = Rx.Observable\n *   .throw(new Error('woops'))\n *   .toPromise();\n *\n * source\n *   .then((value) => console.log('Value: %s', value))\n *   .catch((err) => console.log('Error: %s', err));\n * // => Error: Error: woops\n *\n * // Setting via the config\n * Rx.config.Promise = RSVP.Promise;\n *\n * let source = Rx.Observable\n *   .of(42)\n *   .toPromise();\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * // Setting via the method\n * let source = Rx.Observable\n *   .just(42)\n *   .toPromise(RSVP.Promise);\n *\n * source.then((value) => console.log('Value: %s', value));\n * // => Value: 42\n *\n * @param PromiseCtor promise The constructor of the promise. If not provided,\n * it will look for a constructor first in Rx.config.Promise then fall back to\n * the native Promise constructor if available.\n * @return {Promise<T>} An ES2015 compatible promise with the last value from\n * the observable sequence.\n * @method toPromise\n * @owner Observable\n */\nexport function toPromise<T>(this: Observable<T>, PromiseCtor?: typeof Promise): Promise<T> {\n  if (!PromiseCtor) {\n    if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n      PromiseCtor = root.Rx.config.Promise;\n    } else if (root.Promise) {\n      PromiseCtor = root.Promise;\n    }\n  }\n\n  if (!PromiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return new PromiseCtor((resolve, reject) => {\n    let value: any;\n    this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n  });\n}\n","\nimport { Observable } from '../../Observable';\nimport { toPromise } from '../../operator/toPromise';\n\nObservable.prototype.toPromise = toPromise;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    toPromise: typeof toPromise;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window<T>(this: Observable<T>, windowBoundaries: Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(windowBoundaries));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowBoundaries: Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n    }\n    return sourceSubscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n\n  private window: Subject<T> = new Subject<T>();\n\n  constructor(destination: Subscriber<Observable<T>>) {\n    super(destination);\n    destination.next(this.window);\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow();\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this._complete();\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.window = null;\n  }\n\n  private openWindow(): void  {\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n    const destination = this.destination;\n    const newWindow = this.window = new Subject<T>();\n    destination.next(newWindow);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { window } from '../../operator/window';\n\nObservable.prototype.window = window;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    window: typeof window;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount<T>(this: Observable<T>, windowSize: number,\n                               startWindowEvery: number = 0): Observable<Observable<T>> {\n  return this.lift(new WindowCountOperator<T>(windowSize, startWindowEvery));\n}\n\nclass WindowCountOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowSize: number,\n              private startWindowEvery: number) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowCountSubscriber<T> extends Subscriber<T> {\n  private windows: Subject<T>[] = [ new Subject<T>() ];\n  private count: number = 0;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowSize: number,\n              private startWindowEvery: number) {\n    super(destination);\n    destination.next(this.windows[0]);\n  }\n\n  protected _next(value: T) {\n    const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n    const destination = this.destination;\n    const windowSize = this.windowSize;\n    const windows = this.windows;\n    const len = windows.length;\n\n    for (let i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n    const c = this.count - windowSize + 1;\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      const window = new Subject<T>();\n      windows.push(window);\n      destination.next(window);\n    }\n  }\n\n  protected _error(err: any) {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete() {\n    const windows = this.windows;\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  protected _unsubscribe() {\n    this.count = 0;\n    this.windows = null;\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowCount } from '../../operator/windowCount';\n\nObservable.prototype.windowCount = windowCount;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowCount: typeof windowCount;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Action } from '../scheduler/Action';\nimport { Subject } from '../Subject';\nimport { Operator } from '../Operator';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowTime.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds start a window 1 second long, and emit at most 2 click events per window</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowTime(1000, 5000)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param {number} windowTimeSpan The amount of time to fill each window.\n * @param {number} [windowCreationInterval] The interval at which to start new\n * windows.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowTime\n * @owner Observable\n */\nexport function windowTime<T>(this: Observable<T>, windowTimeSpan: number,\n                              windowCreationInterval: number = null,\n                              scheduler: IScheduler = async): Observable<Observable<T>> {\n  return this.lift(new WindowTimeOperator<T>(windowTimeSpan, windowCreationInterval, scheduler));\n}\n\nclass WindowTimeOperator<T> implements Operator<T, Observable<T>> {\n\n  constructor(private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: IScheduler) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowTimeSubscriber(\n      subscriber, this.windowTimeSpan, this.windowCreationInterval, this.scheduler\n    ));\n  }\n}\n\ninterface CreationState<T> {\n  windowTimeSpan: number;\n  windowCreationInterval: number;\n  subscriber: WindowTimeSubscriber<T>;\n  scheduler: IScheduler;\n}\n\ninterface TimeSpanOnlyState<T> {\n    window: Subject<T>;\n    windowTimeSpan: number;\n    subscriber: WindowTimeSubscriber<T>;\n  }\n\ninterface CloseWindowContext<T> {\n  action: Action<CreationState<T>>;\n  subscription: Subscription;\n}\n\ninterface CloseState<T> {\n  subscriber: WindowTimeSubscriber<T>;\n  window: Subject<T>;\n  context: CloseWindowContext<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowTimeSubscriber<T> extends Subscriber<T> {\n  private windows: Array<Subject<T>> = [];\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private windowTimeSpan: number,\n              private windowCreationInterval: number,\n              private scheduler: IScheduler) {\n    super(destination);\n\n    const window = this.openWindow();\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      const closeState: CloseState<T> = { subscriber: this, window, context: <any>null };\n      const creationState: CreationState<T> = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };\n      this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n    } else {\n      const timeSpanOnlyState: TimeSpanOnlyState<T> = { subscriber: this, window, windowTimeSpan };\n      this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  protected _next(value: T): void {\n    const windows = this.windows;\n    const len = windows.length;\n    for (let i = 0; i < len; i++) {\n      const window = windows[i];\n      if (!window.closed) {\n        window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      windows.shift().error(err);\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const windows = this.windows;\n    while (windows.length > 0) {\n      const window = windows.shift();\n      if (!window.closed) {\n        window.complete();\n      }\n    }\n    this.destination.complete();\n  }\n\n  public openWindow(): Subject<T> {\n    const window = new Subject<T>();\n    this.windows.push(window);\n    const destination = this.destination;\n    destination.next(window);\n    return window;\n  }\n\n  public closeWindow(window: Subject<T>): void {\n    window.complete();\n    const windows = this.windows;\n    windows.splice(windows.indexOf(window), 1);\n  }\n}\n\nfunction dispatchWindowTimeSpanOnly<T>(this: Action<TimeSpanOnlyState<T>>, state: TimeSpanOnlyState<T>): void {\n  const { subscriber, windowTimeSpan, window } = state;\n  if (window) {\n    subscriber.closeWindow(window);\n  }\n  state.window = subscriber.openWindow();\n  this.schedule(state, windowTimeSpan);\n}\n\nfunction dispatchWindowCreation<T>(this: Action<CreationState<T>>, state: CreationState<T>): void {\n  const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;\n  const window = subscriber.openWindow();\n  const action = this;\n  let context: CloseWindowContext<T> = { action, subscription: <any>null };\n  const timeSpanState: CloseState<T> = { subscriber, window, context };\n  context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n  action.add(context.subscription);\n  action.schedule(state, windowCreationInterval);\n}\n\nfunction dispatchWindowClose<T>(state: CloseState<T>): void {\n  const { subscriber, window, context } = state;\n  if (context && context.action && context.subscription) {\n    context.action.remove(context.subscription);\n  }\n  subscriber.closeWindow(window);\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowTime } from '../../operator/windowTime';\n\nObservable.prototype.windowTime = windowTime;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowTime: typeof windowTime;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle<T, O>(this: Observable<T>, openings: Observable<O>,\n                                   closingSelector: (openValue: O) => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowToggleOperator<T, O>(openings, closingSelector));\n}\n\nclass WindowToggleOperator<T, O> implements Operator<T, Observable<T>> {\n\n  constructor(private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowToggleSubscriber(\n      subscriber, this.openings, this.closingSelector\n    ));\n  }\n}\n\ninterface WindowContext<T> {\n  window: Subject<T>;\n  subscription: Subscription;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowToggleSubscriber<T, O> extends OuterSubscriber<T, any> {\n  private contexts: WindowContext<T>[] = [];\n  private openSubscription: Subscription;\n\n  constructor(destination: Subscriber<Observable<T>>,\n              private openings: Observable<O>,\n              private closingSelector: (openValue: O) => Observable<any>) {\n    super(destination);\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  protected _next(value: T) {\n    const { contexts } = this;\n    if (contexts) {\n      const len = contexts.length;\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  protected _error(err: any) {\n\n    const { contexts } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  protected _complete() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n    super._complete();\n  }\n\n  protected _unsubscribe() {\n    const { contexts } = this;\n    this.contexts = null;\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n\n    if (outerValue === this.openings) {\n\n      const { closingSelector } = this;\n      const closingNotifier = tryCatch(closingSelector)(innerValue);\n\n      if (closingNotifier === errorObject) {\n        return this.error(errorObject.e);\n      } else {\n        const window = new Subject<T>();\n        const subscription = new Subscription();\n        const context = { window, subscription };\n        this.contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          (<any> innerSubscription).context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n\n      }\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err: any): void {\n    this.error(err);\n  }\n\n  notifyComplete(inner: Subscription): void {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf((<any> inner).context));\n    }\n  }\n\n  private closeWindow(index: number): void {\n    if (index === -1) {\n      return;\n    }\n\n    const { contexts } = this;\n    const context = contexts[index];\n    const { window, subscription } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowToggle } from '../../operator/windowToggle';\n\nObservable.prototype.windowToggle = windowToggle;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowToggle: typeof windowToggle;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen<T>(this: Observable<T>, closingSelector: () => Observable<any>): Observable<Observable<T>> {\n  return this.lift(new WindowOperator<T>(closingSelector));\n}\n\nclass WindowOperator<T> implements Operator<T, Observable<T>> {\n  constructor(private closingSelector: () => Observable<any>) {\n  }\n\n  call(subscriber: Subscriber<Observable<T>>, source: any): any {\n    return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WindowSubscriber<T> extends OuterSubscriber<T, any> {\n  private window: Subject<T>;\n  private closingNotification: Subscription;\n\n  constructor(protected destination: Subscriber<Observable<T>>,\n              private closingSelector: () => Observable<any>) {\n    super(destination);\n    this.openWindow();\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, any>): void {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, any>): void {\n    this.openWindow(innerSub);\n  }\n\n  protected _next(value: T): void {\n    this.window.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.window.error(err);\n    this.destination.error(err);\n    this.unsubscribeClosingNotification();\n  }\n\n  protected _complete(): void {\n    this.window.complete();\n    this.destination.complete();\n    this.unsubscribeClosingNotification();\n  }\n\n  private unsubscribeClosingNotification(): void {\n    if (this.closingNotification) {\n      this.closingNotification.unsubscribe();\n    }\n  }\n\n  private openWindow(innerSub: InnerSubscriber<T, any> = null): void {\n    if (innerSub) {\n      this.remove(innerSub);\n      innerSub.unsubscribe();\n    }\n\n    const prevWindow = this.window;\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const window = this.window = new Subject<T>();\n    this.destination.next(window);\n\n    const closingNotifier = tryCatch(this.closingSelector)();\n    if (closingNotifier === errorObject) {\n      const err = errorObject.e;\n      this.destination.error(err);\n      this.window.error(err);\n    } else {\n      this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n    }\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { windowWhen } from '../../operator/windowWhen';\n\nObservable.prototype.windowWhen = windowWhen;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    windowWhen: typeof windowWhen;\n  }\n}","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/* tslint:disable:max-line-length */\nexport function withLatestFrom<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function withLatestFrom<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function withLatestFrom<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function withLatestFrom<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function withLatestFrom<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function withLatestFrom<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function withLatestFrom<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function withLatestFrom<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[]): Observable<R>;\nexport function withLatestFrom<T, R>(this: Observable<T>, array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {Observable} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom<T, R>(this: Observable<T>, ...args: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  let project: any;\n  if (typeof args[args.length - 1] === 'function') {\n    project = args.pop();\n  }\n  const observables = <Observable<any>[]>args;\n  return this.lift(new WithLatestFromOperator(observables, project));\n}\n\nclass WithLatestFromOperator<T, R> implements Operator<T, R> {\n  constructor(private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass WithLatestFromSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private values: any[];\n  private toRespond: number[] = [];\n\n  constructor(destination: Subscriber<R>,\n              private observables: Observable<any>[],\n              private project?: (...values: any[]) => Observable<R>) {\n    super(destination);\n    const len = observables.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      this.toRespond.push(i);\n    }\n\n    for (let i = 0; i < len; i++) {\n      let observable = observables[i];\n      this.add(subscribeToResult<T, R>(this, observable, <any>observable, i));\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.values[outerIndex] = innerValue;\n    const toRespond = this.toRespond;\n    if (toRespond.length > 0) {\n      const found = toRespond.indexOf(outerIndex);\n      if (found !== -1) {\n        toRespond.splice(found, 1);\n      }\n    }\n  }\n\n  notifyComplete() {\n    // noop\n  }\n\n  protected _next(value: T) {\n    if (this.toRespond.length === 0) {\n      const args = [value, ...this.values];\n      if (this.project) {\n        this._tryProject(args);\n      } else {\n        this.destination.next(args);\n      }\n    }\n  }\n\n  private _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","\nimport { Observable } from '../../Observable';\nimport { withLatestFrom } from '../../operator/withLatestFrom';\n\nObservable.prototype.withLatestFrom = withLatestFrom;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    withLatestFrom: typeof withLatestFrom;\n  }\n}","\nimport { Observable } from '../../Observable';\nimport { zipProto } from '../../operator/zip';\n\nObservable.prototype.zip = zipProto;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zip: typeof zipProto;\n  }\n}","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ScalarObservable<T> extends Observable<T> {\n  static create<T>(value: T, scheduler?: IScheduler): ScalarObservable<T> {\n    return new ScalarObservable(value, scheduler);\n  }\n\n  static dispatch(state: any): void {\n    const { done, value, subscriber } = state;\n\n    if (done) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(value);\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.done = true;\n    (<any> this).schedule(state);\n  }\n\n  _isScalar: boolean = true;\n\n  constructor(public value: T, private scheduler?: IScheduler) {\n    super();\n    if (scheduler) {\n      this._isScalar = false;\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    const value = this.value;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ScalarObservable.dispatch, 0, {\n        done: false, value, subscriber\n      });\n    } else {\n      subscriber.next(value);\n      if (!subscriber.closed) {\n        subscriber.complete();\n      }\n    }\n  }\n}\n","import { IScheduler } from '../Scheduler';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { TeardownLogic } from '../Subscription';\n\nexport interface DispatchArg<T> {\n  subscriber: Subscriber<T>;\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class EmptyObservable<T> extends Observable<T> {\n\n  /**\n   * Creates an Observable that emits no items to the Observer and immediately\n   * emits a complete notification.\n   *\n   * <span class=\"informal\">Just emits 'complete', and nothing else.\n   * </span>\n   *\n   * <img src=\"./img/empty.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the complete notification. It can be used for composing with other\n   * Observables, such as in a {@link mergeMap}.\n   *\n   * @example <caption>Emit the number 7, then complete.</caption>\n   * var result = Rx.Observable.empty().startWith(7);\n   * result.subscribe(x => console.log(x));\n   *\n   * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n   * var interval = Rx.Observable.interval(1000);\n   * var result = interval.mergeMap(x =>\n   *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n   * );\n   * result.subscribe(x => console.log(x));\n   *\n   * // Results in the following to the console:\n   * // x is equal to the count on the interval eg(0,1,2,3,...)\n   * // x will occur every 1000ms\n   * // if x % 2 is equal to 1 print abc\n   * // if x % 2 is not equal to 1 nothing will be output\n   *\n   * @see {@link create}\n   * @see {@link never}\n   * @see {@link of}\n   * @see {@link throw}\n   *\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emission of the complete notification.\n   * @return {Observable} An \"empty\" Observable: emits only the complete\n   * notification.\n   * @static true\n   * @name empty\n   * @owner Observable\n   */\n  static create<T>(scheduler?: IScheduler): Observable<T> {\n    return new EmptyObservable<T>(scheduler);\n  }\n\n  static dispatch<T>(arg: DispatchArg<T>) {\n    const { subscriber } = arg;\n    subscriber.complete();\n  }\n\n  constructor(private scheduler?: IScheduler) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber });\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nexport function isScheduler(value: any): value is Scheduler {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { IScheduler } from '../Scheduler';\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nimport { TeardownLogic } from '../Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class ArrayObservable<T> extends Observable<T> {\n\n  static create<T>(array: T[], scheduler?: IScheduler): Observable<T> {\n    return new ArrayObservable(array, scheduler);\n  }\n\n  static of<T>(item1: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(item1: T, item2: T, item3: T, item4: T, item5: T, item6: T, scheduler?: IScheduler): Observable<T>;\n  static of<T>(...array: Array<T | IScheduler>): Observable<T>;\n  /**\n   * Creates an Observable that emits some values you specify as arguments,\n   * immediately one after the other, and then emits a complete notification.\n   *\n   * <span class=\"informal\">Emits the arguments you provide, then completes.\n   * </span>\n   *\n   * <img src=\"./img/of.png\" width=\"100%\">\n   *\n   * This static operator is useful for creating a simple Observable that only\n   * emits the arguments given, and the complete notification thereafter. It can\n   * be used for composing with other Observables, such as with {@link concat}.\n   * By default, it uses a `null` IScheduler, which means the `next`\n   * notifications are sent synchronously, although with a different IScheduler\n   * it is possible to determine when those notifications will be delivered.\n   *\n   * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n   * var numbers = Rx.Observable.of(10, 20, 30);\n   * var letters = Rx.Observable.of('a', 'b', 'c');\n   * var interval = Rx.Observable.interval(1000);\n   * var result = numbers.concat(letters).concat(interval);\n   * result.subscribe(x => console.log(x));\n   *\n   * @see {@link create}\n   * @see {@link empty}\n   * @see {@link never}\n   * @see {@link throw}\n   *\n   * @param {...T} values Arguments that represent `next` values to be emitted.\n   * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n   * the emissions of the `next` notifications.\n   * @return {Observable<T>} An Observable that emits each given input value.\n   * @static true\n   * @name of\n   * @owner Observable\n   */\n  static of<T>(...array: Array<T | IScheduler>): Observable<T> {\n    let scheduler = <IScheduler>array[array.length - 1];\n    if (isScheduler(scheduler)) {\n      array.pop();\n    } else {\n      scheduler = null;\n    }\n\n    const len = array.length;\n    if (len > 1) {\n      return new ArrayObservable<T>(<any>array, scheduler);\n    } else if (len === 1) {\n      return new ScalarObservable<T>(<any>array[0], scheduler);\n    } else {\n      return new EmptyObservable<T>(scheduler);\n    }\n  }\n\n  static dispatch(state: any) {\n\n    const { array, index, count, subscriber } = state;\n\n    if (index >= count) {\n      subscriber.complete();\n      return;\n    }\n\n    subscriber.next(array[index]);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index = index + 1;\n\n    (<any> this).schedule(state);\n  }\n\n  // value used if Array has one value and _isScalar\n  value: any;\n\n  constructor(private array: T[], private scheduler?: IScheduler) {\n    super();\n    if (!scheduler && array.length === 1) {\n      this._isScalar = true;\n      this.value = array[0];\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    let index = 0;\n    const array = this.array;\n    const count = array.length;\n    const scheduler = this.scheduler;\n\n    if (scheduler) {\n      return scheduler.schedule(ArrayObservable.dispatch, 0, {\n        array, index, count, subscriber\n      });\n    } else {\n      for (let i = 0; i < count && !subscriber.closed; i++) {\n        subscriber.next(array[i]);\n      }\n      subscriber.complete();\n    }\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","export function isPromise<T>(value: any | Promise<T>): value is Promise<T> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index: number = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, private outerValue: T, private outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { root } from './root';\nimport { isArray } from './isArray';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Subscriber } from '../Subscriber';\nimport { Observable, ObservableInput } from '../Observable';\nimport { $$iterator } from '../symbol/iterator';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { $$observable } from '../symbol/observable';\n\nexport function subscribeToResult<T, R>(outerSubscriber: OuterSubscriber<T, R>,\n                                        result: any,\n                                        outerValue?: T,\n                                        outerIndex?: number): Subscription;\nexport function subscribeToResult<T>(outerSubscriber: OuterSubscriber<any, any>,\n                                     result: ObservableInput<T>,\n                                     outerValue?: T,\n                                     outerIndex?: number): Subscription {\n  let destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n\n  if (destination.closed) {\n    return null;\n  }\n\n  if (result instanceof Observable) {\n    if (result._isScalar) {\n      destination.next((<any>result).value);\n      destination.complete();\n      return null;\n    } else {\n      return result.subscribe(destination);\n    }\n  } else if (isArray(result)) {\n    for (let i = 0, len = result.length; i < len && !destination.closed; i++) {\n      destination.next(result[i]);\n    }\n    if (!destination.closed) {\n      destination.complete();\n    }\n  } else if (isPromise(result)) {\n    result.then(\n      (value) => {\n        if (!destination.closed) {\n          destination.next(<any>value);\n          destination.complete();\n        }\n      },\n      (err: any) => destination.error(err)\n    )\n    .then(null, (err: any) => {\n      // Escaping the Promise trap: globally throw unhandled errors\n      root.setTimeout(() => { throw err; });\n    });\n    return destination;\n  } else if (result && typeof result[$$iterator] === 'function') {\n    const iterator = <any>result[$$iterator]();\n    do {\n      let item = iterator.next();\n      if (item.done) {\n        destination.complete();\n        break;\n      }\n      destination.next(item.value);\n      if (destination.closed) {\n        break;\n      }\n    } while (true);\n  } else if (result && typeof result[$$observable] === 'function') {\n    const obs = result[$$observable]();\n    if (typeof obs.subscribe !== 'function') {\n      destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n    } else {\n      return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n    }\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    destination.error(new TypeError(msg));\n  }\n  return null;\n}\n","import { Observable, ObservableInput } from '../Observable';\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { $$iterator } from '../symbol/iterator';\n\n/* tslint:disable:max-line-length */\nexport function zipProto<T, R>(this: Observable<T>, project: (v1: T) => R): Observable<R>;\nexport function zipProto<T, T2, R>(this: Observable<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipProto<T, T2, T3, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipProto<T, T2, T3, T4, T5, T6, R>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R> ;\nexport function zipProto<T, T2>(this: Observable<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipProto<T, T2, T3>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipProto<T, T2, T3, T4>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipProto<T, T2, T3, T4, T5>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipProto<T, T2, T3, T4, T5, T6>(this: Observable<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]> ;\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipProto<T, R>(this: Observable<T>, array: Array<ObservableInput<T>>): Observable<R>;\nexport function zipProto<T, TOther, R>(this: Observable<T>, array: Array<ObservableInput<TOther>>, project: (v1: T, ...values: Array<TOther>) => R): Observable<R>;\n/* tslint:disable:max-line-length */\n\n/**\n * @param observables\n * @return {Observable<R>}\n * @method zip\n * @owner Observable\n */\nexport function zipProto<T, R>(this: Observable<T>, ...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  return this.lift.call(zipStatic<R>(this, ...observables));\n}\n\n/* tslint:disable:max-line-length */\nexport function zipStatic<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zipStatic<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zipStatic<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zipStatic<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zipStatic<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zipStatic<T, R>(v1: ObservableInput<T>, project: (v1: T) => R): Observable<R>;\nexport function zipStatic<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, project: (v1: T, v2: T2) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, project: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, project: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\nexport function zipStatic<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, project: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zipStatic<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zipStatic<R>(array: ObservableInput<any>[]): Observable<R>;\nexport function zipStatic<T, R>(array: ObservableInput<T>[], project: (...values: Array<T>) => R): Observable<R>;\nexport function zipStatic<R>(array: ObservableInput<any>[], project: (...values: Array<any>) => R): Observable<R>;\n\nexport function zipStatic<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zipStatic<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each \n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values. \n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs \n * // { age: 7, name: 'Foo', isDev: true }\n * // { age: 5, name: 'Bar', isDev: true }\n * // { age: 9, name: 'Beer', isDev: false }\n * \n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zipStatic<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const project = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof project === 'function') {\n    observables.pop();\n  }\n  return new ArrayObservable(observables).lift(new ZipOperator(project));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  project: (...values: Array<any>) => R;\n\n  constructor(project?: (...values: Array<any>) => R) {\n    this.project = project;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.project));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private project: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              project?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.project = (typeof project === 'function') ? project : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[$$iterator] === 'function') {\n      iterators.push(new StaticIterator(value[$$iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        this.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.project) {\n      this._tryProject(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryProject(args: any[]) {\n    let result: any;\n    try {\n      result = this.project.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [$$iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { ZipOperator } from './zip';\nimport { Observable } from '../Observable';\n\n/**\n * @param project\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method zipAll\n * @owner Observable\n */\nexport function zipAll<T, R>(this: Observable<T>, project?: (...values: Array<any>) => R): Observable<R> {\n  return this.lift(new ZipOperator(project));\n}\n","\nimport { Observable } from '../../Observable';\nimport { zipAll } from '../../operator/zipAll';\n\nObservable.prototype.zipAll = zipAll;\n\ndeclare module '../../Observable' {\n  interface Observable<T> {\n    zipAll: typeof zipAll;\n  }\n}","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { IScheduler } from '../Scheduler';\nimport { Operator } from '../Operator';\nimport { PartialObserver } from '../Observer';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nimport { TeardownLogic, Subscription } from '../Subscription';\nimport { Action } from '../scheduler/Action';\n\n/**\n * @see {@link Notification}\n *\n * @param scheduler\n * @param delay\n * @return {Observable<R>|WebSocketSubject<T>|Observable<T>}\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(this: Observable<T>, scheduler: IScheduler, delay: number = 0): Observable<T> {\n  return this.lift(new ObserveOnOperator(scheduler, delay));\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: IScheduler, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  static dispatch(this: Action<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination, subscription } = arg;\n    notification.observe(destination);\n    if (subscription) {\n      subscription.unsubscribe();\n    }\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: IScheduler,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const message = new ObserveOnMessage(notification, this.destination);\n    message.subscription = this.add(\n        this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, message)\n    );\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n  }\n}\n\nexport class ObserveOnMessage {\n  public subscription: Subscription;\n\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { Subject } from './Subject';\nimport { IScheduler } from './Scheduler';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operator/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: ReplayEvent<T>[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: IScheduler) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n  }\n\n  next(value: T): void {\n    const now = this._getNow();\n    this._events.push(new ReplayEvent(now, value));\n    this._trimBufferThenGetEvents();\n    super.next(value);\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const _events = this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    const len = _events.length;\n    for (let i = 0; i < len && !subscriber.closed; i++) {\n      subscriber.next(_events[i].value);\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = this._events;\n\n    let eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, ISubscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<ISubscription>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription, TeardownLogic } from '../Subscription';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n\n  constructor(protected source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return this.lift(new RefCountOperator<T>(this));\n  }\n}\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subscribe: { value: (<any> ConnectableObservable.prototype)._subscribe },\n  getSubject: { value: (<any> ConnectableObservable.prototype).getSubject },\n  connect: { value: (<any> ConnectableObservable.prototype).connect },\n  refCount: { value: (<any> ConnectableObservable.prototype).refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const { connectable } = this;\n    if (connectable) {\n      this.connectable = null;\n      const connection = (<any> connectable)._connection;\n      (<any> connectable)._refCount = 0;\n      (<any> connectable)._subject = null;\n      (<any> connectable)._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport class EmptyError extends Error {\n  constructor() {\n    const err: any = super('no elements in sequence');\n    (<any> this).name = err.name = 'EmptyError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport class ArgumentOutOfRangeError extends Error {\n  constructor() {\n    const err: any = super('argument out of range');\n    (<any> this).name = err.name = 'ArgumentOutOfRangeError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport class TimeoutError extends Error {\r\n  constructor() {\r\n    const err: any = super('Timeout has occurred');\r\n    (<any> this).name = err.name = 'TimeoutError';\r\n    (<any> this).stack = err.stack;\r\n    (<any> this).message = err.message;\r\n  }\r\n}\r\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<TimeInterval<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timeInterval\n * @owner Observable\n */\nexport function timeInterval<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<TimeInterval<T>> {\n  return this.lift(new TimeIntervalOperator(scheduler));\n}\n\nexport class TimeInterval<T> {\n  constructor(public value: T, public interval: number) {\n\n  }\n};\n\nclass TimeIntervalOperator<T> implements Operator<T, TimeInterval<T>> {\n  constructor(private scheduler: IScheduler) {\n\n  }\n\n  call(observer: Subscriber<TimeInterval<T>>, source: any): any {\n    return source.subscribe(new TimeIntervalSubscriber(observer, this.scheduler));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass TimeIntervalSubscriber<T> extends Subscriber<T> {\n  private lastTime: number = 0;\n\n  constructor(destination: Subscriber<TimeInterval<T>>, private scheduler: IScheduler) {\n    super(destination);\n\n    this.lastTime = scheduler.now();\n  }\n\n  protected _next(value: T) {\n    let now = this.scheduler.now();\n    let span = now - this.lastTime;\n    this.lastTime = now;\n\n    this.destination.next(new TimeInterval(value, span));\n  }\n}\n","import { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { IScheduler } from '../Scheduler';\nimport { async } from '../scheduler/async';\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp<T>(this: Observable<T>, scheduler: IScheduler = async): Observable<Timestamp<T>> {\n  return this.lift(new TimestampOperator(scheduler));\n}\n\nexport class Timestamp<T> {\n  constructor(public value: T, public timestamp: number) {\n  }\n};\n\nclass TimestampOperator<T> implements Operator<T, Timestamp<T>> {\n  constructor(private scheduler: IScheduler) {\n  }\n\n  call(observer: Subscriber<Timestamp<T>>, source: any): any {\n    return source.subscribe(new TimestampSubscriber(observer, this.scheduler));\n  }\n}\n\nclass TimestampSubscriber<T> extends Subscriber<T> {\n  constructor(destination: Subscriber<Timestamp<T>>, private scheduler: IScheduler) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    const now = this.scheduler.now();\n\n    this.destination.next(new Timestamp(value, now));\n  }\n}\n","import { PartialObserver } from './Observer';\nimport { Observable } from './Observable';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return Observable.of(this.value);\n      case 'E':\n        return Observable.throw(this.error);\n      case 'C':\n        return Observable.empty<T>();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return this.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   */\n  static createComplete(): Notification<any> {\n    return this.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ColdObservable<T> extends Observable<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super(function (this: ColdObservable<T>, subscriber: Subscriber<any>) {\n      const observable: ColdObservable<T> = this;\n      const index = observable.logSubscribedFrame();\n      subscriber.add(new Subscription(() => {\n        observable.logUnsubscribedFrame(index);\n      }));\n      observable.scheduleMessages(subscriber);\n      return subscriber;\n    });\n    this.scheduler = scheduler;\n  }\n\n  scheduleMessages(subscriber: Subscriber<any>) {\n    const messagesLength = this.messages.length;\n    for (let i = 0; i < messagesLength; i++) {\n      const message = this.messages[i];\n      subscriber.add(\n        this.scheduler.schedule(({message, subscriber}) => { message.notification.observe(subscriber); },\n          message.frame,\n          {message, subscriber})\n      );\n    }\n  }\n}\napplyMixins(ColdObservable, [SubscriptionLoggable]);\n","/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport class ObjectUnsubscribedError extends Error {\n  constructor() {\n    const err: any = super('object unsubscribed');\n    (<any> this).name = err.name = 'ObjectUnsubscribedError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './Observer';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observer } from './Observer';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { ISubscription, Subscription, TeardownLogic } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements ISubscription {\n\n  [$$rxSubscriber]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<T> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { SubscriptionLog } from './SubscriptionLog';\n\nexport class SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n\n  logSubscribedFrame(): number {\n    this.subscriptions.push(new SubscriptionLog(this.scheduler.now()));\n    return this.subscriptions.length - 1;\n  }\n\n  logUnsubscribedFrame(index: number) {\n    const subscriptionLogs = this.subscriptions;\n    const oldSubscriptionLog = subscriptionLogs[index];\n    subscriptionLogs[index] = new SubscriptionLog(\n      oldSubscriptionLog.subscribedFrame,\n      this.scheduler.now()\n    );\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  for (let i = 0, len = baseCtors.length; i < len; i++) {\n    const baseCtor = baseCtors[i];\n    const propertyKeys = Object.getOwnPropertyNames(baseCtor.prototype);\n    for (let j = 0, len2 = propertyKeys.length; j < len2; j++) {\n      const name = propertyKeys[j];\n      derivedCtor.prototype[name] = baseCtor.prototype[name];\n    }\n  }\n}","import { Subject } from '../Subject';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Scheduler } from '../Scheduler';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { SubscriptionLoggable } from './SubscriptionLoggable';\nimport { applyMixins } from '../util/applyMixins';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class HotObservable<T> extends Subject<T> implements SubscriptionLoggable {\n  public subscriptions: SubscriptionLog[] = [];\n  scheduler: Scheduler;\n  logSubscribedFrame: () => number;\n  logUnsubscribedFrame: (index: number) => void;\n\n  constructor(public messages: TestMessage[],\n              scheduler: Scheduler) {\n    super();\n    this.scheduler = scheduler;\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): Subscription {\n    const subject: HotObservable<T> = this;\n    const index = subject.logSubscribedFrame();\n    subscriber.add(new Subscription(() => {\n      subject.logUnsubscribedFrame(index);\n    }));\n    return super._subscribe(subscriber);\n  }\n\n  setup() {\n    const subject = this;\n    const messagesLength = subject.messages.length;\n    /* tslint:disable:no-var-keyword */\n    for (var i = 0; i < messagesLength; i++) {\n      (() => {\n        var message = subject.messages[i];\n   /* tslint:enable */\n        subject.scheduler.schedule(\n          () => { message.notification.observe(subject); },\n          message.frame\n        );\n      })();\n    }\n  }\n}\napplyMixins(HotObservable, [SubscriptionLoggable]);\n","export class SubscriptionLog {\n  constructor(public subscribedFrame: number,\n              public unsubscribedFrame: number = Number.POSITIVE_INFINITY) {\n  }\n}","import { Observable } from '../Observable';\nimport { Notification } from '../Notification';\nimport { ColdObservable } from './ColdObservable';\nimport { HotObservable } from './HotObservable';\nimport { TestMessage } from './TestMessage';\nimport { SubscriptionLog } from './SubscriptionLog';\nimport { Subscription } from '../Subscription';\nimport { VirtualTimeScheduler, VirtualAction } from '../scheduler/VirtualTimeScheduler';\n\nconst defaultMaxFrame: number = 750;\n\ninterface FlushableTest {\n  ready: boolean;\n  actual?: any[];\n  expected?: any[];\n}\n\nexport type observableToBeFn = (marbles: string, values?: any, errorValue?: any) => void;\nexport type subscriptionLogsToBeFn = (marbles: string | string[]) => void;\n\nexport class TestScheduler extends VirtualTimeScheduler {\n  private hotObservables: HotObservable<any>[] = [];\n  private coldObservables: ColdObservable<any>[] = [];\n  private flushTests: FlushableTest[] = [];\n\n  constructor(public assertDeepEqual: (actual: any, expected: any) => boolean | void) {\n    super(VirtualAction, defaultMaxFrame);\n  }\n\n  createTime(marbles: string): number {\n    const indexOf: number = marbles.indexOf('|');\n    if (indexOf === -1) {\n      throw new Error('marble diagram for time should have a completion marker \"|\"');\n    }\n    return indexOf * TestScheduler.frameTimeFactor;\n  }\n\n  createColdObservable<T>(marbles: string, values?: any, error?: any): ColdObservable<T> {\n    if (marbles.indexOf('^') !== -1) {\n      throw new Error('cold observable cannot have subscription offset \"^\"');\n    }\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('cold observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const cold = new ColdObservable<T>(messages, this);\n    this.coldObservables.push(cold);\n    return cold;\n  }\n\n  createHotObservable<T>(marbles: string, values?: any, error?: any): HotObservable<T> {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('hot observable cannot have unsubscription marker \"!\"');\n    }\n    const messages = TestScheduler.parseMarbles(marbles, values, error);\n    const subject = new HotObservable<T>(messages, this);\n    this.hotObservables.push(subject);\n    return subject;\n  }\n\n  private materializeInnerObservable(observable: Observable<any>,\n                                     outerFrame: number): TestMessage[] {\n    const messages: TestMessage[] = [];\n    observable.subscribe((value) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createNext(value) });\n    }, (err) => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createError(err) });\n    }, () => {\n      messages.push({ frame: this.frame - outerFrame, notification: Notification.createComplete() });\n    });\n    return messages;\n  }\n\n  expectObservable(observable: Observable<any>,\n                   unsubscriptionMarbles: string = null): ({ toBe: observableToBeFn }) {\n    const actual: TestMessage[] = [];\n    const flushTest: FlushableTest = { actual, ready: false };\n    const unsubscriptionFrame = TestScheduler\n      .parseMarblesAsSubscriptions(unsubscriptionMarbles).unsubscribedFrame;\n    let subscription: Subscription;\n\n    this.schedule(() => {\n      subscription = observable.subscribe(x => {\n        let value = x;\n        // Support Observable-of-Observables\n        if (x instanceof Observable) {\n          value = this.materializeInnerObservable(value, this.frame);\n        }\n        actual.push({ frame: this.frame, notification: Notification.createNext(value) });\n      }, (err) => {\n        actual.push({ frame: this.frame, notification: Notification.createError(err) });\n      }, () => {\n        actual.push({ frame: this.frame, notification: Notification.createComplete() });\n      });\n    }, 0);\n\n    if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n      this.schedule(() => subscription.unsubscribe(), unsubscriptionFrame);\n    }\n\n    this.flushTests.push(flushTest);\n\n    return {\n      toBe(marbles: string, values?: any, errorValue?: any) {\n        flushTest.ready = true;\n        flushTest.expected = TestScheduler.parseMarbles(marbles, values, errorValue, true);\n      }\n    };\n  }\n\n  expectSubscriptions(actualSubscriptionLogs: SubscriptionLog[]): ({ toBe: subscriptionLogsToBeFn }) {\n    const flushTest: FlushableTest = { actual: actualSubscriptionLogs, ready: false };\n    this.flushTests.push(flushTest);\n    return {\n      toBe(marbles: string | string[]) {\n        const marblesArray: string[] = (typeof marbles === 'string') ? [marbles] : marbles;\n        flushTest.ready = true;\n        flushTest.expected = marblesArray.map(marbles =>\n          TestScheduler.parseMarblesAsSubscriptions(marbles)\n        );\n      }\n    };\n  }\n\n  flush() {\n    const hotObservables = this.hotObservables;\n    while (hotObservables.length > 0) {\n      hotObservables.shift().setup();\n    }\n\n    super.flush();\n    const readyFlushTests = this.flushTests.filter(test => test.ready);\n    while (readyFlushTests.length > 0) {\n      const test = readyFlushTests.shift();\n      this.assertDeepEqual(test.actual, test.expected);\n    }\n  }\n\n  static parseMarblesAsSubscriptions(marbles: string): SubscriptionLog {\n    if (typeof marbles !== 'string') {\n      return new SubscriptionLog(Number.POSITIVE_INFINITY);\n    }\n    const len = marbles.length;\n    let groupStart = -1;\n    let subscriptionFrame = Number.POSITIVE_INFINITY;\n    let unsubscriptionFrame = Number.POSITIVE_INFINITY;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '^':\n          if (subscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          subscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        case '!':\n          if (unsubscriptionFrame !== Number.POSITIVE_INFINITY) {\n            throw new Error('found a second subscription point \\'^\\' in a ' +\n              'subscription marble diagram. There can only be one.');\n          }\n          unsubscriptionFrame = groupStart > -1 ? groupStart : frame;\n          break;\n        default:\n          throw new Error('there can only be \\'^\\' and \\'!\\' markers in a ' +\n            'subscription marble diagram. Found instead \\'' + c + '\\'.');\n      }\n    }\n\n    if (unsubscriptionFrame < 0) {\n      return new SubscriptionLog(subscriptionFrame);\n    } else {\n      return new SubscriptionLog(subscriptionFrame, unsubscriptionFrame);\n    }\n  }\n\n  static parseMarbles(marbles: string,\n                      values?: any,\n                      errorValue?: any,\n                      materializeInnerObservables: boolean = false): TestMessage[] {\n    if (marbles.indexOf('!') !== -1) {\n      throw new Error('conventional marble diagrams cannot have the ' +\n        'unsubscription marker \"!\"');\n    }\n    const len = marbles.length;\n    const testMessages: TestMessage[] = [];\n    const subIndex = marbles.indexOf('^');\n    const frameOffset = subIndex === -1 ? 0 : (subIndex * -this.frameTimeFactor);\n    const getValue = typeof values !== 'object' ?\n      (x: any) => x :\n      (x: any) => {\n        // Support Observable-of-Observables\n        if (materializeInnerObservables && values[x] instanceof ColdObservable) {\n          return values[x].messages;\n        }\n        return values[x];\n      };\n    let groupStart = -1;\n\n    for (let i = 0; i < len; i++) {\n      const frame = i * this.frameTimeFactor + frameOffset;\n      let notification: Notification<any>;\n      const c = marbles[i];\n      switch (c) {\n        case '-':\n        case ' ':\n          break;\n        case '(':\n          groupStart = frame;\n          break;\n        case ')':\n          groupStart = -1;\n          break;\n        case '|':\n          notification = Notification.createComplete();\n          break;\n        case '^':\n          break;\n        case '#':\n          notification = Notification.createError(errorValue || 'error');\n          break;\n        default:\n          notification = Notification.createNext(getValue(c));\n          break;\n      }\n\n      if (notification) {\n        testMessages.push({ frame: groupStart > -1 ? groupStart : frame, notification });\n      }\n    }\n    return testMessages;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: VirtualAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { $$rxSubscriber } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[$$rxSubscriber]) {\n      return nextOrObserver[$$rxSubscriber]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { $$observable } from './symbol/observable';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is  called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  /**\n   * Registers handlers for handling emitted values, error and completions from the observable, and\n   *  executes the observable's subscriber function, which will take action to set up the underlying data stream\n   * @method subscribe\n   * @param {PartialObserver|Function} observerOrNext (optional) either an observer defining all functions to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the observable.\n   * @param {Function} error (optional) a handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled\n   * @param {Function} complete (optional) a handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   */\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      const subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [$$observable]() {\n    return this;\n  }\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { $$rxSubscriber } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [$$rxSubscriber]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parent: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      context = observerOrNext;\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (isFunction(context.unsubscribe)) {\n        this.add(<() => void> context.unsubscribe.bind(context));\n      }\n      context.unsubscribe = this.unsubscribe.bind(this);\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parent } = this;\n      if (!_parent.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parent, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._error) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parent.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parent.syncErrorValue = err;\n        _parent.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parent } = this;\n      if (this._complete) {\n        if (!_parent.syncErrorThrowable) {\n          this.__tryOrUnsub(this._complete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parent, this._complete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parent } = this;\n    this._context = null;\n    this._parent = null;\n    _parent.unsubscribe();\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(this: Observable<T>, project: (value: T, index: number) => R, thisArg?: any): Observable<R> {\n  if (typeof project !== 'function') {\n    throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n  }\n  return this.lift(new MapOperator(project, thisArg));\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { root } from '../../util/root';\nimport { tryCatch } from '../../util/tryCatch';\nimport { errorObject } from '../../util/errorObject';\nimport { Observable } from '../../Observable';\nimport { Subscriber } from '../../Subscriber';\nimport { TeardownLogic } from '../../Subscription';\nimport { MapOperator } from '../../operator/map';\n\nexport interface AjaxRequest {\n  url?: string;\n  body?: any;\n  user?: string;\n  async?: boolean;\n  method?: string;\n  headers?: Object;\n  timeout?: number;\n  password?: string;\n  hasContent?: boolean;\n  crossDomain?: boolean;\n  withCredentials?: boolean;\n  createXHR?: () => XMLHttpRequest;\n  progressSubscriber?: Subscriber<any>;\n  responseType?: string;\n}\n\nfunction getCORSRequest(this: AjaxRequest): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    const xhr = new root.XMLHttpRequest();\n    if ('withCredentials' in xhr) {\n      xhr.withCredentials = !!this.withCredentials;\n    }\n    return xhr;\n  } else if (!!root.XDomainRequest) {\n    return new root.XDomainRequest();\n  } else {\n    throw new Error('CORS is not supported by your browser');\n  }\n}\n\nfunction getXMLHttpRequest(): XMLHttpRequest {\n  if (root.XMLHttpRequest) {\n    return new root.XMLHttpRequest();\n  } else {\n    let progId: string;\n    try {\n      const progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'];\n      for (let i = 0; i < 3; i++) {\n        try {\n          progId = progIds[i];\n          if (new root.ActiveXObject(progId)) {\n            break;\n          }\n        } catch (e) {\n          //suppress exceptions\n        }\n      }\n      return new root.ActiveXObject(progId);\n    } catch (e) {\n      throw new Error('XMLHttpRequest is not supported by your browser');\n    }\n  }\n}\n\nexport interface AjaxCreationMethod {\n  (urlOrRequest: string | AjaxRequest): Observable<AjaxResponse>;\n  get(url: string, headers?: Object): Observable<AjaxResponse>;\n  post(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  put(url: string, body?: any, headers?: Object): Observable<AjaxResponse>;\n  delete(url: string, headers?: Object): Observable<AjaxResponse>;\n  getJSON<T>(url: string, headers?: Object): Observable<T>;\n}\n\nexport function ajaxGet(url: string, headers: Object = null) {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, headers });\n};\n\nexport function ajaxPost(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'POST', url, body, headers });\n};\n\nexport function ajaxDelete(url: string, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'DELETE', url, headers });\n};\n\nexport function ajaxPut(url: string, body?: any, headers?: Object): Observable<AjaxResponse> {\n  return new AjaxObservable<AjaxResponse>({ method: 'PUT', url, body, headers });\n};\n\nexport function ajaxGetJSON<T>(url: string, headers?: Object): Observable<T> {\n  return new AjaxObservable<AjaxResponse>({ method: 'GET', url, responseType: 'json', headers })\n    .lift<T>(new MapOperator<AjaxResponse, T>((x: AjaxResponse, index: number): T => x.response, null));\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport class AjaxObservable<T> extends Observable<T> {\n  /**\n   * Creates an observable for an Ajax request with either a request object with\n   * url, headers, etc or a string for a URL.\n   *\n   * @example\n   * source = Rx.Observable.ajax('/products');\n   * source = Rx.Observable.ajax({ url: 'products', method: 'GET' });\n   *\n   * @param {string|Object} request Can be one of the following:\n   *   A string of the URL to make the Ajax call.\n   *   An object with the following properties\n   *   - url: URL of the request\n   *   - body: The body of the request\n   *   - method: Method of the request, such as GET, POST, PUT, PATCH, DELETE\n   *   - async: Whether the request is async\n   *   - headers: Optional headers\n   *   - crossDomain: true if a cross domain request, else false\n   *   - createXHR: a function to override if you need to use an alternate\n   *   XMLHttpRequest implementation.\n   *   - resultSelector: a function to use to alter the output value type of\n   *   the Observable. Gets {@link AjaxResponse} as an argument.\n   * @return {Observable} An observable sequence containing the XMLHttpRequest.\n   * @static true\n   * @name ajax\n   * @owner Observable\n  */\n  static create: AjaxCreationMethod = (() => {\n    const create: any = (urlOrRequest: string | AjaxRequest) => {\n      return new AjaxObservable(urlOrRequest);\n    };\n\n    create.get = ajaxGet;\n    create.post = ajaxPost;\n    create.delete = ajaxDelete;\n    create.put = ajaxPut;\n    create.getJSON = ajaxGetJSON;\n\n    return <AjaxCreationMethod>create;\n  })();\n\n  private request: AjaxRequest;\n\n  constructor(urlOrRequest: string | AjaxRequest) {\n    super();\n\n    const request: AjaxRequest = {\n      async: true,\n      createXHR: function(this: AjaxRequest) {\n        return this.crossDomain ? getCORSRequest.call(this) : getXMLHttpRequest();\n      },\n      crossDomain: false,\n      withCredentials: false,\n      headers: {},\n      method: 'GET',\n      responseType: 'json',\n      timeout: 0\n    };\n\n    if (typeof urlOrRequest === 'string') {\n      request.url = urlOrRequest;\n    } else {\n      for (const prop in urlOrRequest) {\n        if (urlOrRequest.hasOwnProperty(prop)) {\n          request[prop] = urlOrRequest[prop];\n        }\n      }\n    }\n\n    this.request = request;\n  }\n\n  protected _subscribe(subscriber: Subscriber<T>): TeardownLogic {\n    return new AjaxSubscriber(subscriber, this.request);\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AjaxSubscriber<T> extends Subscriber<Event> {\n  private xhr: XMLHttpRequest;\n  private done: boolean = false;\n\n  constructor(destination: Subscriber<T>, public request: AjaxRequest) {\n    super(destination);\n\n    const headers = request.headers = request.headers || {};\n\n    // force CORS if requested\n    if (!request.crossDomain && !headers['X-Requested-With']) {\n      headers['X-Requested-With'] = 'XMLHttpRequest';\n    }\n\n    // ensure content type is set\n    if (!('Content-Type' in headers) && !(root.FormData && request.body instanceof root.FormData) && typeof request.body !== 'undefined') {\n      headers['Content-Type'] = 'application/x-www-form-urlencoded; charset=UTF-8';\n    }\n\n    // properly serialize body\n    request.body = this.serializeBody(request.body, request.headers['Content-Type']);\n\n    this.send();\n  }\n\n  next(e: Event): void {\n    this.done = true;\n    const { xhr, request, destination } = this;\n    const response = new AjaxResponse(e, xhr, request);\n\n    destination.next(response);\n  }\n\n  private send(): XMLHttpRequest {\n    const {\n      request,\n      request: { user, method, url, async, password, headers, body }\n    } = this;\n    const createXHR = request.createXHR;\n    const xhr: XMLHttpRequest = tryCatch(createXHR).call(request);\n\n    if (<any>xhr === errorObject) {\n      this.error(errorObject.e);\n    } else {\n      this.xhr = xhr;\n\n      // set up the events before open XHR\n      // https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n      // You need to add the event listeners before calling open() on the request.\n      // Otherwise the progress events will not fire.\n      this.setupEvents(xhr, request);\n      // open XHR\n      let result: any;\n      if (user) {\n        result = tryCatch(xhr.open).call(xhr, method, url, async, user, password);\n      } else {\n        result = tryCatch(xhr.open).call(xhr, method, url, async);\n      }\n\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n\n      // timeout and responseType can be set once the XHR is open\n      xhr.timeout = request.timeout;\n      xhr.responseType = request.responseType;\n\n      // set headers\n      this.setHeaders(xhr, headers);\n\n      // finally send the request\n      result = body ? tryCatch(xhr.send).call(xhr, body) : tryCatch(xhr.send).call(xhr);\n      if (result === errorObject) {\n        this.error(errorObject.e);\n        return null;\n      }\n    }\n\n    return xhr;\n  }\n\n  private serializeBody(body: any, contentType?: string) {\n    if (!body || typeof body === 'string') {\n      return body;\n    } else if (root.FormData && body instanceof root.FormData) {\n      return body;\n    }\n\n    if (contentType) {\n      const splitIndex = contentType.indexOf(';');\n      if (splitIndex !== -1) {\n        contentType = contentType.substring(0, splitIndex);\n      }\n    }\n\n    switch (contentType) {\n      case 'application/x-www-form-urlencoded':\n        return Object.keys(body).map(key => `${encodeURI(key)}=${encodeURI(body[key])}`).join('&');\n      case 'application/json':\n        return JSON.stringify(body);\n      default:\n        return body;\n    }\n  }\n\n  private setHeaders(xhr: XMLHttpRequest, headers: Object) {\n    for (let key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  private setupEvents(xhr: XMLHttpRequest, request: AjaxRequest) {\n    const progressSubscriber = request.progressSubscriber;\n\n    function xhrTimeout(this: XMLHttpRequest, e: ProgressEvent) {\n      const {subscriber, progressSubscriber, request } = (<any>xhrTimeout);\n      if (progressSubscriber) {\n        progressSubscriber.error(e);\n      }\n      subscriber.error(new AjaxTimeoutError(this, request)); //TODO: Make betterer.\n    };\n    xhr.ontimeout = xhrTimeout;\n    (<any>xhrTimeout).request = request;\n    (<any>xhrTimeout).subscriber = this;\n    (<any>xhrTimeout).progressSubscriber = progressSubscriber;\n    if (xhr.upload && 'withCredentials' in xhr) {\n      if (progressSubscriber) {\n        let xhrProgress: (e: ProgressEvent) => void;\n        xhrProgress = function(e: ProgressEvent) {\n          const { progressSubscriber } = (<any>xhrProgress);\n          progressSubscriber.next(e);\n        };\n        if (root.XDomainRequest) {\n          xhr.onprogress = xhrProgress;\n        } else {\n          xhr.upload.onprogress = xhrProgress;\n        }\n        (<any>xhrProgress).progressSubscriber = progressSubscriber;\n      }\n      let xhrError: (e: ErrorEvent) => void;\n      xhrError = function(this: XMLHttpRequest, e: ErrorEvent) {\n        const { progressSubscriber, subscriber, request } = (<any>xhrError);\n        if (progressSubscriber) {\n          progressSubscriber.error(e);\n        }\n        subscriber.error(new AjaxError('ajax error', this, request));\n      };\n      xhr.onerror = xhrError;\n      (<any>xhrError).request = request;\n      (<any>xhrError).subscriber = this;\n      (<any>xhrError).progressSubscriber = progressSubscriber;\n    }\n\n    function xhrReadyStateChange(this: XMLHttpRequest, e: ProgressEvent) {\n      const { subscriber, progressSubscriber, request } = (<any>xhrReadyStateChange);\n      if (this.readyState === 4) {\n        // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n        let status: number = this.status === 1223 ? 204 : this.status;\n        let response: any = (this.responseType === 'text' ?  (\n          this.response || this.responseText) : this.response);\n\n        // fix status code when it is 0 (0 status is undocumented).\n        // Occurs when accessing file resources or on Android 4.1 stock browser\n        // while retrieving files from application cache.\n        if (status === 0) {\n          status = response ? 200 : 0;\n        }\n\n        if (200 <= status && status < 300) {\n          if (progressSubscriber) {\n            progressSubscriber.complete();\n          }\n          subscriber.next(e);\n          subscriber.complete();\n        } else {\n          if (progressSubscriber) {\n            progressSubscriber.error(e);\n          }\n          subscriber.error(new AjaxError('ajax error ' + status, this, request));\n        }\n      }\n    };\n    xhr.onreadystatechange = xhrReadyStateChange;\n    (<any>xhrReadyStateChange).subscriber = this;\n    (<any>xhrReadyStateChange).progressSubscriber = progressSubscriber;\n    (<any>xhrReadyStateChange).request = request;\n  }\n\n  unsubscribe() {\n    const { done, xhr } = this;\n    if (!done && xhr && xhr.readyState !== 4 && typeof xhr.abort === 'function') {\n      xhr.abort();\n    }\n    super.unsubscribe();\n  }\n}\n\n/**\n * A normalized AJAX response.\n *\n * @see {@link ajax}\n *\n * @class AjaxResponse\n */\nexport class AjaxResponse {\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  /** @type {string|ArrayBuffer|Document|object|any} The response data */\n  response: any;\n\n  /** @type {string} The raw responseText */\n  responseText: string;\n\n  /** @type {string} The responseType (e.g. 'json', 'arraybuffer', or 'xml') */\n  responseType: string;\n\n  constructor(public originalEvent: Event, public xhr: XMLHttpRequest, public request: AjaxRequest) {\n    this.status = xhr.status;\n    this.responseType = xhr.responseType || request.responseType;\n\n    switch (this.responseType) {\n      case 'json':\n        if ('response' in xhr) {\n          //IE does not support json as responseType, parse it internally\n          this.response = xhr.responseType ? xhr.response : JSON.parse(xhr.response || xhr.responseText || 'null');\n        } else {\n          this.response = JSON.parse(xhr.responseText || 'null');\n        }\n        break;\n      case 'xml':\n        this.response = xhr.responseXML;\n        break;\n      case 'text':\n      default:\n        this.response = ('response' in xhr) ? xhr.response : xhr.responseText;\n        break;\n    }\n  }\n}\n\n/**\n * A normalized AJAX error.\n *\n * @see {@link ajax}\n *\n * @class AjaxError\n */\nexport class AjaxError extends Error {\n  /** @type {XMLHttpRequest} The XHR instance associated with the error */\n  xhr: XMLHttpRequest;\n\n  /** @type {AjaxRequest} The AjaxRequest associated with the error */\n  request: AjaxRequest;\n\n  /** @type {number} The HTTP status code */\n  status: number;\n\n  constructor(message: string, xhr: XMLHttpRequest, request: AjaxRequest) {\n    super(message);\n    this.message = message;\n    this.xhr = xhr;\n    this.request = request;\n    this.status = xhr.status;\n  }\n}\n\n/**\n * @see {@link ajax}\n *\n * @class AjaxTimeoutError\n */\nexport class AjaxTimeoutError extends AjaxError {\n  constructor(xhr: XMLHttpRequest, request: AjaxRequest) {\n    super('ajax timeout', xhr, request);\n  }\n}\n","/**\nSome credit for this helper goes to http://github.com/YuzuJS/setImmediate\n*/\n\nimport {  root  } from './root';\n\nexport class ImmediateDefinition {\n  setImmediate: (cb: () => void) => number;\n\n  clearImmediate: (handle: number) => void;\n\n  private identify(o: any): string {\n    return this.root.Object.prototype.toString.call(o);\n  }\n\n  tasksByHandle: any;\n\n  nextHandle: number;\n\n  currentlyRunningATask: boolean;\n\n  constructor(private root: any) {\n    if (root.setImmediate && typeof root.setImmediate === 'function') {\n      this.setImmediate = root.setImmediate.bind(root);\n      this.clearImmediate = root.clearImmediate.bind(root);\n    } else {\n      this.nextHandle = 1;\n      this.tasksByHandle = {};\n      this.currentlyRunningATask = false;\n\n      // Don't get fooled by e.g. browserify environments.\n      if (this.canUseProcessNextTick()) {\n        // For Node.js before 0.9\n        this.setImmediate = this.createProcessNextTickSetImmediate();\n      } else if (this.canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        this.setImmediate = this.createPostMessageSetImmediate();\n      } else if (this.canUseMessageChannel()) {\n        // For web workers, where supported\n        this.setImmediate = this.createMessageChannelSetImmediate();\n      } else if (this.canUseReadyStateChange()) {\n        // For IE 6–8\n        this.setImmediate = this.createReadyStateChangeSetImmediate();\n      } else {\n        // For older browsers\n        this.setImmediate = this.createSetTimeoutSetImmediate();\n      }\n\n      let ci = function clearImmediate(handle: any) {\n        delete (<any>clearImmediate).instance.tasksByHandle[handle];\n      };\n\n      (<any>ci).instance = this;\n\n      this.clearImmediate = ci;\n    }\n  }\n\n  canUseProcessNextTick() {\n    return this.identify(this.root.process) === '[object process]';\n  }\n\n  canUseMessageChannel() {\n    return Boolean(this.root.MessageChannel);\n  }\n\n  canUseReadyStateChange() {\n    const document = this.root.document;\n    return Boolean(document && 'onreadystatechange' in document.createElement('script'));\n  }\n\n  canUsePostMessage() {\n    const root = this.root;\n    // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n    // where `root.postMessage` means something completely different and can't be used for this purpose.\n    if (root.postMessage && !root.importScripts) {\n      let postMessageIsAsynchronous = true;\n      let oldOnMessage = root.onmessage;\n      root.onmessage = function() {\n        postMessageIsAsynchronous = false;\n      };\n      root.postMessage('', '*');\n      root.onmessage = oldOnMessage;\n      return postMessageIsAsynchronous;\n    }\n\n    return false;\n  }\n\n  // This function accepts the same arguments as setImmediate, but\n  // returns a function that requires no arguments.\n  partiallyApplied(handler: any, ...args: any[]) {\n    let fn = function result () {\n      const { handler, args } = <any>result;\n      if (typeof handler === 'function') {\n        handler.apply(undefined, args);\n      } else {\n        (new Function('' + handler))();\n      }\n    };\n\n    (<any>fn).handler = handler;\n    (<any>fn).args = args;\n\n    return fn;\n  }\n\n  addFromSetImmediateArguments(args: any[]) {\n    this.tasksByHandle[this.nextHandle] = this.partiallyApplied.apply(undefined, args);\n    return this.nextHandle++;\n  }\n\n  createProcessNextTickSetImmediate() {\n    let fn = function setImmediate() {\n      const { instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.process.nextTick(instance.partiallyApplied(instance.runIfPresent, handle));\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createPostMessageSetImmediate() {\n    // Installs an event handler on `global` for the `message` event: see\n    // * https://developer.mozilla.org/en/DOM/window.postMessage\n    // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n    const root = this.root;\n\n    let messagePrefix = 'setImmediate$' + root.Math.random() + '$';\n    let onGlobalMessage = function globalMessageHandler(event: any) {\n      const instance = (<any>globalMessageHandler).instance;\n      if (event.source === root &&\n        typeof event.data === 'string' &&\n        event.data.indexOf(messagePrefix) === 0) {\n        instance.runIfPresent(+event.data.slice(messagePrefix.length));\n      }\n    };\n    (<any>onGlobalMessage).instance = this;\n\n    root.addEventListener('message', onGlobalMessage, false);\n\n    let fn = function setImmediate() {\n      const { messagePrefix, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.postMessage(messagePrefix + handle, '*');\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n    (<any>fn).messagePrefix = messagePrefix;\n\n    return fn;\n  }\n\n  runIfPresent(handle: any) {\n    // From the spec: 'Wait until any invocations of this algorithm started before this one have completed.'\n    // So if we're currently running a task, we'll need to delay this invocation.\n    if (this.currentlyRunningATask) {\n      // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n      // 'too much recursion' error.\n      this.root.setTimeout(this.partiallyApplied(this.runIfPresent, handle), 0);\n    } else {\n      let task = this.tasksByHandle[handle];\n      if (task) {\n        this.currentlyRunningATask = true;\n        try {\n          task();\n        } finally {\n          this.clearImmediate(handle);\n          this.currentlyRunningATask = false;\n        }\n      }\n    }\n  }\n\n  createMessageChannelSetImmediate() {\n    let channel = new this.root.MessageChannel();\n    channel.port1.onmessage = (event: any) => {\n      let handle = event.data;\n      this.runIfPresent(handle);\n    };\n\n    let fn = function setImmediate() {\n      const { channel, instance } = (<any>setImmediate);\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      channel.port2.postMessage(handle);\n      return handle;\n    };\n\n    (<any>fn).channel = channel;\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createReadyStateChangeSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      const root = instance.root;\n      const doc = root.document;\n      const html = doc.documentElement;\n\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      let script = doc.createElement('script');\n      script.onreadystatechange = () => {\n        instance.runIfPresent(handle);\n        script.onreadystatechange = null;\n        html.removeChild(script);\n        script = null;\n      };\n      html.appendChild(script);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n\n  createSetTimeoutSetImmediate() {\n    let fn = function setImmediate() {\n      const instance = (<any>setImmediate).instance;\n      let handle = instance.addFromSetImmediateArguments(arguments);\n      instance.root.setTimeout(instance.partiallyApplied(instance.runIfPresent, handle), 0);\n      return handle;\n    };\n\n    (<any>fn).instance = this;\n\n    return fn;\n  }\n}\nexport const Immediate = new ImmediateDefinition(root);\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: AsapAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: QueueAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\nexport const queue = new QueueScheduler(QueueAction);\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  private _subscriptions: ISubscription[];\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const { _unsubscribe, _subscriptions } = (<any> this);\n\n    (<any> this)._subscriptions = null;\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      let index = -1;\n      const len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let sub = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        sub = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (sub.closed || typeof sub.unsubscribe !== 'function') {\n          return sub;\n        } else if (this.closed) {\n          sub.unsubscribe();\n          return sub;\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const childSub = new ChildSubscription(sub, this);\n    this._subscriptions = this._subscriptions || [];\n    this._subscriptions.push(childSub);\n    return childSub;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n\n    // HACK: This might be redundant because of the logic in `add()`\n    if (subscription == null   || (\n        subscription === this) || (\n        subscription === Subscription.EMPTY)) {\n      return;\n    }\n\n    const subscriptions = (<any> this)._subscriptions;\n\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n}\n\nexport class ChildSubscription extends Subscription {\n  constructor(private _innerSub: ISubscription, private _parent: Subscription) {\n    super();\n  }\n\n  _unsubscribe() {\n    const { _innerSub, _parent } = this;\n    _parent.remove(this);\n    _innerSub.unsubscribe();\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: Action<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent Scheduler for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { root } from '../util/root';\nimport { Action } from './Action';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: AsyncAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n     }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // clear the interval id\n    return root.clearInterval(id) && undefined || undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  protected _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.delay = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n  }\n}\n","import {  root  } from './root';\n\nexport class RequestAnimationFrameDefinition {\n  cancelAnimationFrame: (handle: number) => void;\n  requestAnimationFrame: (cb: () => void) => number;\n  constructor(root: any) {\n    if (root.requestAnimationFrame) {\n      this.cancelAnimationFrame = root.cancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.requestAnimationFrame.bind(root);\n    } else if (root.mozRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.mozCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.mozRequestAnimationFrame.bind(root);\n    } else if (root.webkitRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.webkitCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.webkitRequestAnimationFrame.bind(root);\n    } else if (root.msRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.msCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.msRequestAnimationFrame.bind(root);\n    } else if (root.oRequestAnimationFrame) {\n      this.cancelAnimationFrame = root.oCancelAnimationFrame.bind(root);\n      this.requestAnimationFrame = root.oRequestAnimationFrame.bind(root);\n    } else {\n      this.cancelAnimationFrame = root.clearTimeout.bind(root);\n      this.requestAnimationFrame = function(cb) { return root.setTimeout(cb, 1000 / 60); };\n    }\n  }\n}\n\nexport const AnimationFrame = new RequestAnimationFrameDefinition(root);\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrame } from '../util/AnimationFrame';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: AnimationFrameAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = AnimationFrame.requestAnimationFrame(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      AnimationFrame.cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\n\nexport interface IScheduler {\n  now(): number;\n  schedule<T>(work: (this: Action<T>, state?: T) => void, delay?: number, state?: T): Subscription;\n}\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport class Scheduler implements IScheduler {\n\n  public static now: () => number = Date.now ? Date.now : () => +new Date();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: Action<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   */\n  public scheduled: any = undefined;\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const $$rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n","import { root } from '../util/root';\n\nexport function symbolIteratorPonyfill(root: any) {\n  const Symbol: any = root.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (!Symbol.iterator) {\n      Symbol.iterator = Symbol('iterator polyfill');\n    }\n    return Symbol.iterator;\n  } else {\n    // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n    const { Set } = root;\n    if (Set && typeof new Set()['@@iterator'] === 'function') {\n      return '@@iterator';\n    }\n    const { Map } = root;\n    // required for compatability with es6-shim\n    if (Map) {\n      let keys = Object.getOwnPropertyNames(Map.prototype);\n      for (let i = 0; i < keys.length; ++i) {\n        let key = keys[i];\n        // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n        if (key !== 'entries' && key !== 'size' && Map.prototype[key] === Map.prototype['entries']) {\n          return key;\n        }\n      }\n    }\n    return '@@iterator';\n  }\n}\n\nexport const $$iterator = symbolIteratorPonyfill(root);","declare let global: NodeJS.Global;\n\ndeclare module NodeJS {\n  interface Global {\n    window: any;\n    global: any;\n  }\n}\n\n/**\n * window: browser in DOM main thread\n * self: browser in WebWorker\n * global: Node.js/other\n */\nexport const root: any = (\n     typeof window == 'object' && window.window === window && window\n  || typeof self == 'object' && self.self === self && self\n  || typeof global == 'object' && global.global === global && global\n);\n\nif (!root) {\n  throw new Error('RxJS could not find any global context (window, self, global)');\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const $$observable = getSymbolObservable(root);","/* tslint:disable:no-unused-variable */\n// Subject imported before Observable to bypass circular dependency issue since\n// Subject extends Observable and Observable references Subject in it's\n// definition\nexport {Subject, AnonymousSubject} from './Subject';\n/* tslint:enable:no-unused-variable */\nexport {Observable} from './Observable';\n\n// statics\n/* tslint:disable:no-use-before-declare */\nimport './add/observable/bindCallback';\nimport './add/observable/bindNodeCallback';\nimport './add/observable/combineLatest';\nimport './add/observable/concat';\nimport './add/observable/defer';\nimport './add/observable/empty';\nimport './add/observable/forkJoin';\nimport './add/observable/from';\nimport './add/observable/fromEvent';\nimport './add/observable/fromEventPattern';\nimport './add/observable/fromPromise';\nimport './add/observable/generate';\nimport './add/observable/if';\nimport './add/observable/interval';\nimport './add/observable/merge';\nimport './add/observable/race';\nimport './add/observable/never';\nimport './add/observable/of';\nimport './add/observable/onErrorResumeNext';\nimport './add/observable/pairs';\nimport './add/observable/range';\nimport './add/observable/using';\nimport './add/observable/throw';\nimport './add/observable/timer';\nimport './add/observable/zip';\n\n//dom\nimport './add/observable/dom/ajax';\nimport './add/observable/dom/webSocket';\n\n//operators\nimport './add/operator/buffer';\nimport './add/operator/bufferCount';\nimport './add/operator/bufferTime';\nimport './add/operator/bufferToggle';\nimport './add/operator/bufferWhen';\nimport './add/operator/catch';\nimport './add/operator/combineAll';\nimport './add/operator/combineLatest';\nimport './add/operator/concat';\nimport './add/operator/concatAll';\nimport './add/operator/concatMap';\nimport './add/operator/concatMapTo';\nimport './add/operator/count';\nimport './add/operator/dematerialize';\nimport './add/operator/debounce';\nimport './add/operator/debounceTime';\nimport './add/operator/defaultIfEmpty';\nimport './add/operator/delay';\nimport './add/operator/delayWhen';\nimport './add/operator/distinct';\nimport './add/operator/distinctUntilChanged';\nimport './add/operator/distinctUntilKeyChanged';\nimport './add/operator/do';\nimport './add/operator/exhaust';\nimport './add/operator/exhaustMap';\nimport './add/operator/expand';\nimport './add/operator/elementAt';\nimport './add/operator/filter';\nimport './add/operator/finally';\nimport './add/operator/find';\nimport './add/operator/findIndex';\nimport './add/operator/first';\nimport './add/operator/groupBy';\nimport './add/operator/ignoreElements';\nimport './add/operator/isEmpty';\nimport './add/operator/audit';\nimport './add/operator/auditTime';\nimport './add/operator/last';\nimport './add/operator/let';\nimport './add/operator/every';\nimport './add/operator/map';\nimport './add/operator/mapTo';\nimport './add/operator/materialize';\nimport './add/operator/max';\nimport './add/operator/merge';\nimport './add/operator/mergeAll';\nimport './add/operator/mergeMap';\nimport './add/operator/mergeMapTo';\nimport './add/operator/mergeScan';\nimport './add/operator/min';\nimport './add/operator/multicast';\nimport './add/operator/observeOn';\nimport './add/operator/onErrorResumeNext';\nimport './add/operator/pairwise';\nimport './add/operator/partition';\nimport './add/operator/pluck';\nimport './add/operator/publish';\nimport './add/operator/publishBehavior';\nimport './add/operator/publishReplay';\nimport './add/operator/publishLast';\nimport './add/operator/race';\nimport './add/operator/reduce';\nimport './add/operator/repeat';\nimport './add/operator/repeatWhen';\nimport './add/operator/retry';\nimport './add/operator/retryWhen';\nimport './add/operator/sample';\nimport './add/operator/sampleTime';\nimport './add/operator/scan';\nimport './add/operator/sequenceEqual';\nimport './add/operator/share';\nimport './add/operator/single';\nimport './add/operator/skip';\nimport './add/operator/skipUntil';\nimport './add/operator/skipWhile';\nimport './add/operator/startWith';\nimport './add/operator/subscribeOn';\nimport './add/operator/switch';\nimport './add/operator/switchMap';\nimport './add/operator/switchMapTo';\nimport './add/operator/take';\nimport './add/operator/takeLast';\nimport './add/operator/takeUntil';\nimport './add/operator/takeWhile';\nimport './add/operator/throttle';\nimport './add/operator/throttleTime';\nimport './add/operator/timeInterval';\nimport './add/operator/timeout';\nimport './add/operator/timeoutWith';\nimport './add/operator/timestamp';\nimport './add/operator/toArray';\nimport './add/operator/toPromise';\nimport './add/operator/window';\nimport './add/operator/windowCount';\nimport './add/operator/windowTime';\nimport './add/operator/windowToggle';\nimport './add/operator/windowWhen';\nimport './add/operator/withLatestFrom';\nimport './add/operator/zip';\nimport './add/operator/zipAll';\n\n/* tslint:disable:no-unused-variable */\nexport {Operator} from './Operator';\nexport {Observer} from './Observer';\nexport {Subscription} from './Subscription';\nexport {Subscriber} from './Subscriber';\nexport {AsyncSubject} from './AsyncSubject';\nexport {ReplaySubject} from './ReplaySubject';\nexport {BehaviorSubject} from './BehaviorSubject';\nexport {ConnectableObservable} from './observable/ConnectableObservable';\nexport {Notification} from './Notification';\nexport {EmptyError} from './util/EmptyError';\nexport {ArgumentOutOfRangeError} from './util/ArgumentOutOfRangeError';\nexport {ObjectUnsubscribedError} from './util/ObjectUnsubscribedError';\nexport {TimeoutError} from './util/TimeoutError';\nexport {UnsubscriptionError} from './util/UnsubscriptionError';\nexport {TimeInterval} from './operator/timeInterval';\nexport {Timestamp} from './operator/timestamp';\nexport {TestScheduler} from './testing/TestScheduler';\nexport {VirtualTimeScheduler} from './scheduler/VirtualTimeScheduler';\nexport {AjaxRequest, AjaxResponse, AjaxError, AjaxTimeoutError} from './observable/dom/AjaxObservable';\n\nimport { asap } from './scheduler/asap';\nimport { async } from './scheduler/async';\nimport { queue } from './scheduler/queue';\nimport { animationFrame } from './scheduler/animationFrame';\nimport { AsapScheduler } from './scheduler/AsapScheduler';\nimport { AsyncScheduler } from './scheduler/AsyncScheduler';\nimport { QueueScheduler } from './scheduler/QueueScheduler';\nimport { AnimationFrameScheduler } from './scheduler/AnimationFrameScheduler';\nimport { $$rxSubscriber as rxSubscriber } from './symbol/rxSubscriber';\nimport { $$iterator as iterator } from './symbol/iterator';\nimport { $$observable as observable } from './symbol/observable';\n\n/* tslint:enable:no-unused-variable */\n\n/**\n * @typedef {Object} Rx.Scheduler\n * @property {Scheduler} queue Schedules on a queue in the current event frame\n * (trampoline scheduler). Use this for iteration operations.\n * @property {Scheduler} asap Schedules on the micro task queue, which uses the\n * fastest transport mechanism available, either Node.js' `process.nextTick()`\n * or Web Worker MessageChannel or setTimeout or others. Use this for\n * asynchronous conversions.\n * @property {Scheduler} async Schedules work with `setInterval`. Use this for\n * time-based operations.\n * @property {Scheduler} animationFrame Schedules work with `requestAnimationFrame`.\n * Use this for synchronizing with the platform's painting\n */\nlet Scheduler = {\n  asap,\n  queue,\n  animationFrame,\n  async\n};\n\n/**\n * @typedef {Object} Rx.Symbol\n * @property {Symbol|string} rxSubscriber A symbol to use as a property name to\n * retrieve an \"Rx safe\" Observer from an object. \"Rx safety\" can be defined as\n * an object that has all of the traits of an Rx Subscriber, including the\n * ability to add and remove subscriptions to the subscription chain and\n * guarantees involving event triggering (can't \"next\" after unsubscription,\n * etc).\n * @property {Symbol|string} observable A symbol to use as a property name to\n * retrieve an Observable as defined by the [ECMAScript \"Observable\" spec](https://github.com/zenparsing/es-observable).\n * @property {Symbol|string} iterator The ES6 symbol to use as a property name\n * to retrieve an iterator from an object.\n */\nlet Symbol = {\n  rxSubscriber,\n  observable,\n  iterator\n};\n\nexport {\n    Scheduler,\n    Symbol\n};\n"]}